[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/flowDraw.js",
    "content": "import GlobalVariables from './js/globalvariables'\r\nimport Molecule from './js/molecules/molecule.js'\r\nimport GitHubMolecule from './js/molecules/githubmolecule.js'\r\nimport {cmenu, showGitHubSearch} from './js/NewMenu.js'\r\n\r\n\r\nGlobalVariables.canvas = document.querySelector('canvas')\r\nGlobalVariables.c = GlobalVariables.canvas.getContext('2d')\r\nGlobalVariables.runMode = window.location.href.includes('run') //Check if we are using the run mode based on url\r\n\r\nGlobalVariables.canvas.width = window.innerWidth\r\nGlobalVariables.canvas.height = window.innerHeight/2.5\r\n\r\n// Event Listeners\r\n/** \r\n * The canvas on which the atoms are placed.\r\n * @type {object}\r\n */\r\nlet flowCanvas = document.getElementById('flow-canvas')\r\nvar longTouchTimer\r\nvar lastMoveTouch\r\n/** \r\n * The last time a touch was detected...used for timing a long touch.\r\n */\r\nvar lastTouchTime = new Date().getTime()\r\n\r\nflowCanvas.addEventListener('touchstart', event => {\r\n    \r\n    //Keep track of this for the touch up\r\n    lastMoveTouch = event.touches[0]\r\n    GlobalVariables.touchInterface = true\r\n    \r\n    //Check for a double touch\r\n    var timesinceLastTouch = new Date().getTime() - lastTouchTime\r\n    if((timesinceLastTouch < 600) && (timesinceLastTouch > 0)){\r\n        onDoubleClick(event.touches[0])\r\n    }\r\n    else{\r\n        onMouseDown(event.touches[0])\r\n    }\r\n    \r\n    lastTouchTime = new Date().getTime()\r\n    \r\n    //This should be a fake right click \r\n    longTouchTimer = setTimeout(function() {\r\n        const downEvt = new MouseEvent('mousedown', {\r\n            clientX: event.touches[0].clientX,\r\n            clientY: event.touches[0].clientY,\r\n            which: 3,\r\n            button: 2,\r\n            detail: 1\r\n        })\r\n        document.getElementById('flow-canvas').dispatchEvent(downEvt)\r\n    }, 1500)\r\n})\r\nflowCanvas.addEventListener('mousedown', event => {\r\n    onMouseDown(event)\r\n})\r\n\r\n\r\nflowCanvas.addEventListener('touchmove', event => {\r\n    lastMoveTouch = event.touches[0]\r\n    clearTimeout(longTouchTimer)\r\n    onMouseMove(lastMoveTouch)\r\n})\r\nflowCanvas.addEventListener('mousemove', event => {\r\n    onMouseMove(event)\r\n})\r\n\r\nflowCanvas.addEventListener('dblclick', event => {\r\n    onDoubleClick(event)\r\n})\r\n\r\ndocument.addEventListener('mouseup',(e)=>{\r\n    if(e.srcElement.tagName.toLowerCase() !== (\"textarea\")\r\n        && e.srcElement.tagName.toLowerCase() !== (\"input\")\r\n        && e.srcElement.tagName.toLowerCase() !== (\"select\")\r\n        &&(!e.srcElement.isContentEditable)){\r\n        //puts focus back into mainbody after clicking button\r\n        document.activeElement.blur()\r\n        document.getElementById(\"mainBody\").focus()\r\n    }\r\n})\r\nflowCanvas.addEventListener('touchend', () => {\r\n    clearTimeout(longTouchTimer)\r\n    onMouseUp(lastMoveTouch)\r\n})\r\nflowCanvas.addEventListener('mouseup', event => {\r\n    onMouseUp(event)\r\n})\r\n\r\n/** \r\n* Called by mouse down\r\n*/\r\nfunction onMouseDown(event){\r\n    \r\n    var isRightMB\r\n    if (\"which\" in event){  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera\r\n        isRightMB = event.which == 3\r\n    }\r\n    else if (\"button\" in event){  // IE, Opera \r\n        isRightMB = event.button == 2\r\n    }\r\n    if(isRightMB){\r\n        return\r\n    }\r\n\r\n    var clickHandledByMolecule = false\r\n\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        \r\n        if (molecule.clickDown(event.clientX,event.clientY,clickHandledByMolecule) == true){\r\n            clickHandledByMolecule = true\r\n        }\r\n\r\n    })\r\n    \r\n    //Draw the selection box\r\n    if (!clickHandledByMolecule){\r\n        GlobalVariables.currentMolecule.placeAtom({\r\n            parentMolecule: GlobalVariables.currentMolecule, \r\n            x: GlobalVariables.pixelsToWidth(event.clientX),\r\n            y: GlobalVariables.pixelsToHeight(event.clientY),\r\n            parent: GlobalVariables.currentMolecule,\r\n            name: 'Box',\r\n            atomType: 'Box'\r\n        }, null, GlobalVariables.availableTypes)\r\n    }\r\n    \r\n    if(!clickHandledByMolecule){\r\n        GlobalVariables.currentMolecule.backgroundClick() \r\n    }\r\n    else{\r\n        GlobalVariables.currentMolecule.selected = false\r\n    }\r\n    \r\n    //hide the menu if it is visible\r\n    if (!document.querySelector('#circle-menu1').contains(event.target)) {\r\n        cmenu.hide()\r\n    }\r\n    //hide search menu if it is visible\r\n    if (!document.querySelector('#canvas_menu').contains(event.target)) {\r\n        const menu = document.querySelector('#canvas_menu')\r\n        menu.classList.add('off')\r\n        menu.style.top = '-200%'\r\n        menu.style.left = '-200%'\r\n    }\r\n    //hide the menu if it is visible\r\n    if (!document.querySelector('#straight_menu').contains(event.target)) {\r\n        closeTopMenu()\r\n        let options = document.querySelectorAll('.option')\r\n        Array.prototype.forEach.call(options, a => {\r\n            a.classList.remove(\"openMenu\") \r\n        })\r\n    }\r\n    \r\n}\r\n/** \r\n* Called by mouse up\r\n*/\r\nfunction onMouseUp(event){\r\n    //every time the mouse button goes up\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.clickUp(event.clientX,event.clientY)\r\n    })\r\n    GlobalVariables.currentMolecule.clickUp(event.clientX,event.clientY)\r\n}\r\n/** \r\n* Called by mouse moves\r\n*/\r\nfunction onMouseMove(event){\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.clickMove(event.clientX,event.clientY)\r\n    })\r\n}\r\n/** \r\n* Called by double clicks\r\n*/\r\nfunction onDoubleClick(event){\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {\r\n        molecule.doubleClick(event.clientX,event.clientY)\r\n    })\r\n}\r\n\r\n/** \r\n* Array containing selected atoms to copy or delete\r\n* @type {array}\r\n*/\r\nwindow.addEventListener('keydown', e => {\r\n    //Prevents default behavior of the browser on canvas to allow for copy/paste/delete\r\n    if(e.srcElement.tagName.toLowerCase() !== (\"textarea\")\r\n        && e.srcElement.tagName.toLowerCase() !== (\"input\")\r\n        &&(!e.srcElement.isContentEditable)\r\n        && ['c','v','Backspace'].includes(e.key)){\r\n        e.preventDefault()\r\n    }\r\n\r\n    if (document.activeElement.id == \"mainBody\"){\r\n        if (e.key == \"Backspace\" || e.key == \"Delete\") {\r\n            GlobalVariables.atomsSelected = []\r\n            //Adds items to the  array that we will use to delete\r\n            GlobalVariables.currentMolecule.copy()\r\n            GlobalVariables.atomsSelected.forEach(item => {\r\n                GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(nodeOnTheScreen => {\r\n                    if(nodeOnTheScreen.uniqueID == item.uniqueID){\r\n                        nodeOnTheScreen.deleteNode()\r\n                    }\r\n                })\r\n            })\r\n        }    \r\n\r\n        /** \r\n        * Object containing letters and values used for keyboard shortcuts\r\n        * @type {object?}\r\n        */ \r\n        var shortCuts = {\r\n            a: \"Assembly\",\r\n            b: \"ShrinkWrap\",//>\r\n            c: \"Copy\",\r\n            d: \"Difference\",\r\n            e: \"Extrude\",\r\n            g: \"GitHub\", // Not working yet\r\n            i: \"Input\",\r\n            j: \"Translate\", \r\n            k: \"Rectangle\",\r\n            l: \"Circle\",\r\n            m: \"Molecule\",\r\n            s: \"Save\", \r\n            v: \"Paste\",\r\n            x: \"Equation\",\r\n            y: \"Code\", //is there a more natural code letter? can't seem to prevent command t new tab behavior\r\n            z: \"Undo\" //saving this letter \r\n        }\r\n\r\n        //Copy /paste listeners\r\n        if (e.key == \"Control\" || e.key == \"Meta\") {\r\n            GlobalVariables.ctrlDown = true\r\n        }  \r\n\r\n        if (GlobalVariables.ctrlDown && shortCuts.hasOwnProperty([e.key])) {\r\n            \r\n            e.preventDefault()\r\n            //Copy & Paste\r\n            if (e.key == \"c\") {\r\n                GlobalVariables.atomsSelected = []\r\n                GlobalVariables.currentMolecule.copy()\r\n            }\r\n            if (e.key == \"v\") {\r\n                GlobalVariables.atomsSelected.forEach(item => {\r\n                    let newAtomID = GlobalVariables.generateUniqueID()\r\n                    item.uniqueID = newAtomID\r\n                    GlobalVariables.currentMolecule.placeAtom(item, true)\r\n                })   \r\n            }\r\n            //Save project\r\n            if (e.key == \"s\") {\r\n                GlobalVariables.gitHub.saveProject()\r\n            }\r\n            //Opens menu to search for github molecule\r\n            if (e.key == \"g\") {\r\n                showGitHubSearch()\r\n            }\r\n            \r\n            else { \r\n\r\n                GlobalVariables.currentMolecule.placeAtom({\r\n                    parentMolecule: GlobalVariables.currentMolecule, \r\n                    x: 0.5,\r\n                    y: 0.5,\r\n                    parent: GlobalVariables.currentMolecule,\r\n                    atomType: `${shortCuts[e.key]}`,\r\n                    uniqueID: GlobalVariables.generateUniqueID()\r\n                }, true)\r\n            }\r\n            \r\n        }\r\n    }\r\n    //every time a key is pressed\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {  \r\n        molecule.keyPress(e.key)      \r\n    })\r\n   \r\n})\r\n\r\nwindow.addEventListener('keyup', e => {\r\n    if (e.key == \"Control\" || e.key == \"Meta\") {\r\n        GlobalVariables.ctrlDown = false\r\n    }\r\n})\r\n\r\n/* Button to open top menu */\r\ndocument.getElementById('straight_menu').addEventListener('mousedown', () => {\r\n    openTopMenu()\r\n}) \r\n\r\n/**\r\n * Checks if menu is open and changes class to trigger hiding of individual buttons\r\n */ \r\nfunction openTopMenu(){\r\n\r\n    document.querySelector('#toggle_wrap').style.display = \"inline\"\r\n    let options = document.querySelectorAll('.option')\r\n    var step = -150\r\n    Array.prototype.forEach.call(options, a => {\r\n        if (a.classList.contains(\"openMenu\")){\r\n            closeTopMenu() \r\n            a.classList.remove(\"openMenu\")\r\n        }\r\n        else{\r\n            a.classList.add(\"openMenu\")\r\n            a.style.transition = `transform 0.5s`\r\n            a.style.transform = `translateX(${step}%)` \r\n            step-=100\r\n            document.getElementById('goup_top').style.visibility = \"hidden\"\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Closes main menu on background click or on button click if open\r\n */\r\nfunction closeTopMenu(){\r\n    document.querySelector('#toggle_wrap').style.display = \"inline\"\r\n    let options = document.querySelectorAll('.option')\r\n    var step = 0\r\n    document.getElementById('goup_top').style.visibility = \"visible\"\r\n    Array.prototype.forEach.call(options, a => {\r\n        a.style.transition = `transform 0.5s`\r\n        a.style.transform = `translateX(${step}%)`              \r\n    })  \r\n}\r\n\r\n\r\n/**\r\n * Top Button menu event listeners if not in run mode\r\n */ \r\nif (!GlobalVariables.runMode){\r\n    \r\n    let githubButton = document.getElementById('github_top')\r\n    githubButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.openGitHubPage()\r\n    })\r\n    let otherProjectsButton = document.getElementById('projectmenu_top')\r\n    otherProjectsButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.showProjectsToLoad()\r\n    })\r\n    let shareButton = document.getElementById('share_top')\r\n    shareButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.shareOpenedProject()\r\n    })\r\n    let bomButton = document.getElementById('bom_top')\r\n    bomButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.openBillOfMaterialsPage()\r\n    })\r\n    let readButton = document.getElementById('read_top')\r\n    readButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.openREADMEPage()\r\n    })\r\n    let saveButton = document.getElementById('save_top')\r\n    saveButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.saveProject()\r\n    })\r\n    let parentButton = document.getElementById('goup_top')\r\n    parentButton.addEventListener('mousedown', () => {\r\n        if(!GlobalVariables.currentMolecule.topLevel){\r\n            GlobalVariables.currentMolecule.goToParentMolecule()  \r\n        }\r\n    })\r\n    let deleteButton = document.getElementById('delete_top')\r\n    deleteButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.deleteProject() \r\n    })\r\n    let pullButton = document.getElementById('pull_top')\r\n    pullButton.addEventListener('mousedown', () => {\r\n        GlobalVariables.gitHub.makePullRequest() \r\n    })\r\n}\r\n\r\n//Add viewer bar which lets you turn on and off things like wireframe view\r\n/**\r\n * Contains the check boxes to hide and show the display attributes\r\n */ \r\nlet viewerBar = document.querySelector('#viewer_bar')\r\n/**\r\n * The up arrow for going up one level\r\n */ \r\nlet arrowUpMenu = document.querySelector('#arrow-up-menu')\r\n\r\n/**\r\n * Creates the checkbox hidden menu when viewer is active. These really shouldn't be regenerated every time. They should just be hidden.\r\n */ \r\nfunction checkBoxes(){\r\n    \r\n    //Update the values from all the check boxes\r\n    function checkBoxChange(){\r\n        GlobalVariables.displayGrid = document.getElementById('gridCheck').checked\r\n        GlobalVariables.displayAxis = document.getElementById('axesCheck').checked\r\n        GlobalVariables.displayEdges = document.getElementById('edgesCheck').checked\r\n        GlobalVariables.displayTriangles = document.getElementById('facesCheck').checked\r\n        \r\n        GlobalVariables.writeToDisplay(GlobalVariables.displayedPath)\r\n    }\r\n    \r\n    let viewerBar = document.querySelector('#viewer_bar')\r\n    viewerBar.classList.add('slidedown')\r\n\r\n    //Grid display html element\r\n    var gridDiv = document.createElement('div')\r\n    viewerBar.appendChild(gridDiv)\r\n    gridDiv.setAttribute('id', 'gridDiv')\r\n    var gridCheck = document.createElement('input')\r\n    gridDiv.appendChild(gridCheck)\r\n    gridCheck.setAttribute('type', 'checkbox')\r\n    gridCheck.setAttribute('id', 'gridCheck')\r\n    gridDiv.setAttribute('style', 'float:right;')\r\n           \r\n    if (GlobalVariables.displayGrid){\r\n        gridCheck.setAttribute('checked', 'true')\r\n    }\r\n\r\n    var gridCheckLabel = document.createElement('label')\r\n    gridDiv.appendChild(gridCheckLabel)\r\n    gridCheckLabel.setAttribute('for', 'gridCheck')\r\n    gridCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n    gridCheckLabel.textContent= \"Grid\"\r\n    gridCheckLabel.setAttribute('style', 'user-select: none;')\r\n\r\n\r\n    gridCheck.addEventListener('change', checkBoxChange)\r\n\r\n    //Axes Html\r\n\r\n    var axesDiv = document.createElement('div')\r\n    viewerBar.appendChild(axesDiv)\r\n    var axesCheck = document.createElement('input')\r\n    axesDiv.appendChild(axesCheck)\r\n    axesCheck.setAttribute('type', 'checkbox')\r\n    axesCheck.setAttribute('id', 'axesCheck')\r\n            \r\n    if (GlobalVariables.displayAxis){\r\n        axesCheck.setAttribute('checked', 'true')\r\n    }\r\n\r\n    var axesCheckLabel = document.createElement('label')\r\n    axesDiv.appendChild(axesCheckLabel)\r\n    axesCheckLabel.setAttribute('for', 'axesCheck')\r\n    axesCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n    axesDiv.setAttribute('style', 'float:right;')\r\n    axesCheckLabel.textContent= \"Axes\"\r\n    axesCheckLabel.setAttribute('style', 'user-select: none;')\r\n\r\n    axesCheck.addEventListener('change', checkBoxChange)\r\n    \r\n    \r\n    //Display faces\r\n    var facesDiv = document.createElement('div')\r\n    viewerBar.appendChild(facesDiv)\r\n    var facesCheck = document.createElement('input')\r\n    facesDiv.appendChild(facesCheck)\r\n    facesCheck.setAttribute('type', 'checkbox')\r\n    facesCheck.setAttribute('id', 'facesCheck')\r\n    \r\n    if(GlobalVariables.displayTriangles){\r\n        facesCheck.setAttribute('checked', 'true')\r\n    }\r\n    \r\n    var facesCheckLabel = document.createElement('label')\r\n    facesDiv.appendChild(facesCheckLabel)\r\n    facesCheckLabel.setAttribute('for', 'facesCheck')\r\n    facesCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n    facesDiv.setAttribute('style', 'float:right;')\r\n    facesCheckLabel.textContent= \"Faces\"\r\n    facesCheckLabel.setAttribute('style', 'user-select: none;')\r\n\r\n    facesCheck.addEventListener('change', checkBoxChange)\r\n    \r\n    //Display edges\r\n    var edgesDiv = document.createElement('div')\r\n    viewerBar.appendChild(edgesDiv)\r\n    var edgesCheck = document.createElement('input')\r\n    edgesDiv.appendChild(edgesCheck)\r\n    edgesCheck.setAttribute('type', 'checkbox')\r\n    edgesCheck.setAttribute('id', 'edgesCheck')\r\n    \r\n    if(GlobalVariables.displayEdges){\r\n        edgesCheck.setAttribute('checked', 'true')\r\n    }\r\n    \r\n    var edgesCheckLabel = document.createElement('label')\r\n    edgesDiv.appendChild(edgesCheckLabel)\r\n    edgesCheckLabel.setAttribute('for', 'edgesCheck')\r\n    edgesCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n    edgesDiv.setAttribute('style', 'float:right;')\r\n    edgesCheckLabel.textContent= \"Edges\"\r\n    edgesCheckLabel.setAttribute('style', 'user-select: none;')\r\n\r\n    edgesCheck.addEventListener('change', checkBoxChange)\r\n    \r\n    //Display wireframe\r\n    var resetDiv = document.createElement('div')\r\n    viewerBar.appendChild(resetDiv)\r\n    var resetButton = document.createElement('button')\r\n    resetButton.innerHTML = \"Reset View\"\r\n    resetDiv.appendChild(resetButton)\r\n    resetButton.setAttribute('type', 'checkbox')\r\n    resetButton.setAttribute('id', 'resetButton')\r\n    \r\n    var resetButtonLabel = document.createElement('label')\r\n    resetDiv.appendChild(resetButtonLabel)\r\n    resetButtonLabel.setAttribute('for', 'resetButton')\r\n    resetButtonLabel.setAttribute('style', 'margin-right:1em;')\r\n    resetDiv.setAttribute('style', 'float:right;')\r\n    resetButtonLabel.textContent= \" \"\r\n    resetButtonLabel.setAttribute('style', 'user-select: none;')\r\n\r\n    resetButton.addEventListener('click', ()=>{GlobalVariables.writeToDisplay(GlobalVariables.displayedPath, true)})\r\n    \r\n}\r\n\r\ndocument.getElementById('viewerContext').addEventListener('mouseenter', () => {\r\n    if(viewerBar.innerHTML.trim().length == 0){\r\n        checkBoxes()\r\n    }\r\n})\r\n\r\n/** \r\n* A flag to indicate if the startTimer event has already fired\r\n* @type {boolean}\r\n*/\r\nvar evtFired = false\r\nvar g_timer\r\n\r\n/**\r\n * Starts the timer to retract the menu\r\n */ \r\nfunction startTimer(){\r\n    g_timer = setTimeout(function() {\r\n        if (!evtFired) {\r\n            viewerBar.classList.remove(\"slideup\")\r\n            viewerBar.classList.add('slidedown')  \r\n        }\r\n    }, 2000)\r\n}\r\n\r\narrowUpMenu.addEventListener('mouseenter', () =>{\r\n    clearTimeout(g_timer)\r\n    viewerBar.classList.remove(\"slidedown\")\r\n    viewerBar.classList.add('slideup')   \r\n})\r\nviewerBar.addEventListener('mouseleave', () =>{\r\n    evtFired = false\r\n    viewerBar.classList.remove(\"slideup\")\r\n    viewerBar.classList.add('slidedown')   \r\n})\r\nviewerBar.addEventListener('mouseenter', () =>{\r\n    evtFired = true\r\n    viewerBar.classList.remove(\"slidedown\")\r\n    viewerBar.classList.add('slideup')   \r\n})\r\narrowUpMenu.addEventListener('mouseleave', () =>{\r\n    startTimer()\r\n})\r\n\r\n\r\n// Implementation\r\n/**\r\n * Runs once when the program begins to initialize variables.\r\n */ \r\nfunction init() {\r\n    if(!GlobalVariables.runMode){ //If we are in CAD mode load an empty project as a placeholder\r\n        GlobalVariables.currentMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: 'Maslow Create',\r\n            atomType: 'Molecule',\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        })\r\n    }\r\n    else{\r\n        var ID = window.location.href.split('?')[1]\r\n        \r\n        //Have the current molecule load it\r\n        if(typeof ID != undefined){\r\n            GlobalVariables.currentMolecule = new GitHubMolecule({\r\n                projectID: ID,\r\n                topLevel: true\r\n            })\r\n            GlobalVariables.topLevelMolecule = GlobalVariables.currentMolecule\r\n            \r\n            //This is used because window.ask takes some time to load so we need to wait for it. This sets up a callback which will be called in jsxcad.js once window.ask exists\r\n            window.askSetupCallback = () => {\r\n                GlobalVariables.topLevelMolecule.loadProjectByID(ID).then( ()=> {\r\n                    GlobalVariables.topLevelMolecule.backgroundClick()\r\n                })\r\n            }\r\n        }\r\n    }\r\n    window.addEventListener('resize', () => { onWindowResize() }, false)\r\n\r\n    onWindowResize()\r\n    animate()\r\n}\r\n\r\n/**\r\n * Handles the window's resize behavior when the browser size changes.\r\n */ \r\nfunction onWindowResize() {\r\n\r\n    GlobalVariables.canvas.width = window.innerWidth\r\n\r\n    //reset screen parameters \r\n    if(!GlobalVariables.runMode){\r\n        document.querySelector('.flex-parent').setAttribute('style','height:'+ (window.innerHeight - GlobalVariables.canvas.height)+'px')\r\n    }else{\r\n        document.querySelector('.flex-parent').setAttribute('style','height:'+innerHeight+'px')\r\n    }\r\n    document.querySelector('.jscad-container').setAttribute('style','width:'+innerWidth/1.7+'px')\r\n}\r\n\r\n\r\n\r\n/**\r\n * Animation loop. Runs with every frame to draw the program on the display.\r\n */ \r\nfunction animate() {\r\n    requestAnimationFrame(animate)\r\n    GlobalVariables.c.clearRect(0, 0, GlobalVariables.canvas.width, GlobalVariables.canvas.height)\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(atom => {\r\n        atom.update()\r\n    })\r\n}\r\n\r\ninit()\r\n\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/flowDraw.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "flowCanvas",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~flowCanvas",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "The canvas on which the atoms are placed.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "lastTouchTime",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~lastTouchTime",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "The last time a touch was detected...used for timing a long touch.",
    "lineNumber": 25,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "onMouseDown",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onMouseDown",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Called by mouse down",
    "lineNumber": 95,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "onMouseUp",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onMouseUp",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Called by mouse up",
    "lineNumber": 161,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "onMouseMove",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onMouseMove",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Called by mouse moves",
    "lineNumber": 171,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "onDoubleClick",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onDoubleClick",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Called by double clicks",
    "lineNumber": 179,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "openTopMenu",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~openTopMenu",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Checks if menu is open and changes class to trigger hiding of individual buttons",
    "lineNumber": 299,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "closeTopMenu",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~closeTopMenu",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Closes main menu on background click or on button click if open",
    "lineNumber": 322,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "viewerBar",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~viewerBar",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Contains the check boxes to hide and show the display attributes",
    "lineNumber": 383,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "arrowUpMenu",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~arrowUpMenu",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "The up arrow for going up one level",
    "lineNumber": 387,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "checkBoxes",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~checkBoxes",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Creates the checkbox hidden menu when viewer is active. These really shouldn't be regenerated every time. They should just be hidden.",
    "lineNumber": 392,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "evtFired",
    "memberof": "src/flowDraw.js",
    "static": true,
    "longname": "src/flowDraw.js~evtFired",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "A flag to indicate if the startTimer event has already fired",
    "lineNumber": 530,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "startTimer",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~startTimer",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Starts the timer to retract the menu",
    "lineNumber": 536,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "init",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~init",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Runs once when the program begins to initialize variables.",
    "lineNumber": 569,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "onWindowResize",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~onWindowResize",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Handles the window's resize behavior when the browser size changes.",
    "lineNumber": 608,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "animate",
    "memberof": "src/flowDraw.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/flowDraw.js~animate",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/flowDraw.js",
    "importStyle": null,
    "description": "Animation loop. Runs with every frame to draw the program on the display.",
    "lineNumber": 626,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/js/alwaysOneFreeInput.js",
    "content": "//This module is used to create atoms which do not have a set number of inputs, but instead always have one input free.\r\n\r\n/**\r\n * Computes the number of inputs which are curently available on a target atom.\r\n * @param {object} target - The atom which should have it's number of inputs computed.\r\n */ \r\nconst howManyInputPortsAvailable = function(target){\r\n    var portsAvailable = 0\r\n    target.inputs.forEach(io => {\r\n        if(io.type == 'input' && io.connectors.length == 0){   //if this port is available\r\n            portsAvailable = portsAvailable + 1  //Add one to the count\r\n        }\r\n    })\r\n    return portsAvailable\r\n}\r\n\r\n/**\r\n * Deletes one free input from an atom which has more than one free input available.\r\n * @param {object} target - The atom which should have one input deleted (if there are more than two free).\r\n */ \r\nconst deleteEmptyPort = function(target){\r\n    var i\r\n    for (i = 0; i < target.inputs.length - 1; i++) {\r\n        var io = target.inputs[i]\r\n        if(io.type == 'input' && io.connectors.length == 0){\r\n            target.removeIO('input', io.name, target)\r\n            return\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Finds the highest number input currently used by this atom\r\n * @param {object} target - The atom which should be inspected for inputs.\r\n */ \r\nconst findHighestInput = function(target){\r\n    var maxInput = 0\r\n    target.inputs.forEach( input => {\r\n        maxInput = Math.max(maxInput, parseInt(input.name.match(/\\d+$/)[0]))\r\n    })\r\n    return maxInput\r\n}\r\n\r\n/**\r\n * Adds or deletes inputs from a target atom until there is exactly one input available.\r\n * @param {object} target - The atom which should have it's number of inputs adjusted.\r\n */ \r\nexport const addOrDeletePorts = (target) => {\r\n    \r\n    //Add or delete ports as needed\r\n    if(howManyInputPortsAvailable(target) == 0){ //We need to make a new port available\r\n        findHighestInput(target)\r\n        target.addIO('input', '3D shape ' + (findHighestInput(target) + 1), target, 'geometry', '', true)\r\n    }\r\n    if(howManyInputPortsAvailable(target) >= 2){  //We need to remove the empty port\r\n        deleteEmptyPort(target)\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/alwaysOneFreeInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "howManyInputPortsAvailable",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~howManyInputPortsAvailable",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Computes the number of inputs which are curently available on a target atom.",
    "lineNumber": 7,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have it's number of inputs computed."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "deleteEmptyPort",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~deleteEmptyPort",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Deletes one free input from an atom which has more than one free input available.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have one input deleted (if there are more than two free)."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "findHighestInput",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~findHighestInput",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": null,
    "description": "Finds the highest number input currently used by this atom",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should be inspected for inputs."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "addOrDeletePorts",
    "memberof": "src/js/alwaysOneFreeInput.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/alwaysOneFreeInput.js~addOrDeletePorts",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/alwaysOneFreeInput.js",
    "importStyle": "{addOrDeletePorts}",
    "description": "Adds or deletes inputs from a target atom until there is exactly one input available.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom which should have it's number of inputs adjusted."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/js/BOM.js",
    "content": "\r\n/**\r\n * This class defines a BOMEntry object which is used to define one entry in a bill of materials.\r\n */ \r\nexport class BOMEntry {\r\n    /**\r\n     * The constructor returns a new blank BOMEntry object.\r\n     */ \r\n    constructor(){\r\n        /** \r\n         * The name of the item.\r\n         * @type {string}\r\n         */\r\n        this.BOMitemName  = 'name'\r\n        /** \r\n         * The number of this item needed.\r\n         * @type {number}\r\n         */\r\n        this.numberNeeded = 1\r\n        /** \r\n         * The cost of one of this item in USD.\r\n         * @type {number}\r\n         */\r\n        this.costUSD      = 0\r\n        /** \r\n         * A link to where to purchase the item.\r\n         * @type {string}\r\n         */\r\n        this.source       = 'www.example.com'\r\n        /** \r\n         * The total number of this item needed for this part. Should this be removed in favor of  forcing the parts to be modeled? Probably nobody would bother.\r\n         * @type {number}\r\n         */\r\n        this.totalNeeded  = this.numberNeeded //Scaled by the number of this instance\r\n        /** \r\n         * This atom's radius as displayed on the screen is 1/72 width\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/65\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n    }\r\n}\r\n\r\n/**\r\n * Computes and returns an array of BOMEntry objects after looking at the tags of a geometry.\r\n * @param {string} path - The geometry which should be scanned for tags.\r\n */ \r\nexport const extractBomTags = function(path, functionToPlace){\r\n    //Extract all of the tags\r\n    const {answer} = window.ask({op: \"listItems\", readPath: path })\r\n    answer.then( items => {\r\n        // Filter for only bomItems\r\n        \r\n        var bomItems = items.filter(item => {\r\n            return item.substring(2, 13) == \"BOMitemName\"\r\n        })\r\n        \r\n        bomItems = bomItems.map(JSON.parse)\r\n        \r\n        // Consolidate similar items into a single item\r\n        var compiledArray = []\r\n        bomItems.forEach(function (bomElement) {\r\n            if (!this[bomElement.BOMitemName]) {                    //If the list of items doesn't already have one of these\r\n                this[bomElement.BOMitemName] = new BOMEntry             //Create one\r\n                this[bomElement.BOMitemName].numberNeeded = 0           //Set the number needed to zerio initially\r\n                this[bomElement.BOMitemName].BOMitemName = bomElement.BOMitemName   //With the information from the item\r\n                this[bomElement.BOMitemName].source = bomElement.source\r\n                compiledArray.push(this[bomElement.BOMitemName])\r\n            }\r\n            this[bomElement.BOMitemName].numberNeeded += bomElement.numberNeeded\r\n            this[bomElement.BOMitemName].costUSD += bomElement.costUSD\r\n        }, Object.create(null))\r\n        \r\n        // Alphabetize by source\r\n        compiledArray = compiledArray.sort((a,b) => (a.source > b.source) ? 1 : ((b.source > a.source) ? -1 : 0)) \r\n        \r\n        functionToPlace(compiledArray)\r\n    })\r\n}\r\n\r\n/**\r\n * Takes a link and converts it to be an affiliate link if it should be.\r\n * @param {string} link - The link to check.\r\n */ \r\nexport const convertLinks = function(link){\r\n    if(link.toLowerCase().includes(\"amazon\")){\r\n        return \"[Amazon](\" + link + \"?tag=maslowcnc01-20)\"\r\n    }\r\n    return link\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "BOMEntry",
    "memberof": "src/js/BOM.js",
    "static": true,
    "longname": "src/js/BOM.js~BOMEntry",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{BOMEntry}",
    "description": "This class defines a BOMEntry object which is used to define one entry in a bill of materials.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/BOM.js~BOMEntry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#constructor",
    "access": "public",
    "description": "The constructor returns a new blank BOMEntry object.",
    "lineNumber": 9
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "BOMitemName",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#BOMitemName",
    "access": "public",
    "description": "The name of the item.",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "numberNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#numberNeeded",
    "access": "public",
    "description": "The number of this item needed.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "costUSD",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#costUSD",
    "access": "public",
    "description": "The cost of one of this item in USD.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "source",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#source",
    "access": "public",
    "description": "A link to where to purchase the item.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "totalNeeded",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#totalNeeded",
    "access": "public",
    "description": "The total number of this item needed for this part. Should this be removed in favor of  forcing the parts to be modeled? Probably nobody would bother.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/BOM.js~BOMEntry",
    "static": false,
    "longname": "src/js/BOM.js~BOMEntry#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen is 1/72 width",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "extractBomTags",
    "memberof": "src/js/BOM.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/BOM.js~extractBomTags",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{extractBomTags}",
    "description": "Computes and returns an array of BOMEntry objects after looking at the tags of a geometry.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "The geometry which should be scanned for tags."
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "convertLinks",
    "memberof": "src/js/BOM.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/BOM.js~convertLinks",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/BOM.js",
    "importStyle": "{convertLinks}",
    "description": "Takes a link and converts it to be an affiliate link if it should be.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "link",
        "description": "The link to check."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "file",
    "name": "src/js/githubOauth.js",
    "content": "import Molecule from './molecules/molecule.js'\r\nimport GlobalVariables from './globalvariables.js'\r\nimport { licenses } from './licenseOptions.js'\r\nimport { extractBomTags, convertLinks } from './BOM.js'\r\nimport { OAuth } from 'oauthio-web'\r\n\r\n/**\r\n * This function works like a class to sandbox interaction with GitHub.\r\n */\r\nexport default function GitHubModule(){\r\n    const { Octokit } = require(\"@octokit/rest\")\r\n    /** \r\n     * The octokit instance which allows authenticated interaction with GitHub.\r\n     * @type {object}\r\n     */\r\n    var octokit = new Octokit()\r\n    /** \r\n     * The HTML element which is the popup.\r\n     * @type {object}\r\n     */\r\n    var popup = document.getElementById('projects-popup')\r\n    /** \r\n     * The name of the current repo.\r\n     * @type {string}\r\n     */\r\n    var currentRepoName = null\r\n    /** \r\n     * The name of the currently logged in user.\r\n     * @type {string}\r\n     */\r\n    var currentUser = null\r\n    /** \r\n     * The text to display at the top of the bill of materials.\r\n     * @type {string}\r\n     */\r\n    var bomHeader = \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model \\n# Bill Of Materials \\n |Part|Number Needed|Price|Source| \\n |----|----------|-----|-----|\"\r\n     \r\n    /** \r\n     * The text to display at the top of the ReadMe file.\r\n     * @type {string}\r\n     */\r\n    var readmeHeader = \"###### Note: Do not edit this file directly, it is automatically generated from the CAD model\"\r\n\r\n    /** \r\n     * The timer used to trigger saving of the file.\r\n     * @type {object}\r\n     */\r\n    var intervalTimer\r\n\r\n    /** \r\n     * The timer used to trigger saving of the file.\r\n     * @type {object}\r\n     */\r\n    var page = 1\r\n\r\n    //Github pop up event listeners\r\n    document.getElementById(\"loginButton\").addEventListener(\"mousedown\", () => {\r\n        this.tryLogin()\r\n    })\r\n    \r\n    /** \r\n     * Try to login using the oauth popup.\r\n     */\r\n    this.tryLogin = function(){\r\n        \r\n        // Initialize with OAuth.io app public key\r\n        if(window.location.href.includes('private')){\r\n            OAuth.initialize('6CQQE8MMCBFjdWEjevnTBMCQpsw') //app public key for repo scope\r\n        }\r\n        else{\r\n            OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8') //app public key for public_repo scope\r\n        }\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n        \r\n            /** \r\n             * Oktokit object to access github\r\n             * @type {object}\r\n             */\r\n            octokit = new Octokit({\r\n                auth: github.access_token\r\n            })\r\n            \r\n            //Test the authentication \r\n            octokit.users.getAuthenticated({}).then(result => {\r\n                currentUser = result.data.login\r\n                this.showProjectsToLoad()\r\n            })\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Display projects which can be loaded in the popup.\r\n     */\r\n    this.showProjectsToLoad = function(){\r\n        //Remove everything in the popup now\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n\r\n        //Close button (Mac style)\r\n        if(GlobalVariables.topLevelMolecule && GlobalVariables.topLevelMolecule.name != \"Maslow Create\"){ //Only offer a close button if there is a project to go back to\r\n            var closeButton = document.createElement(\"button\")\r\n            closeButton.setAttribute(\"class\", \"closeButton\")\r\n            closeButton.addEventListener(\"click\", () => {\r\n                popup.classList.add('off')\r\n            })\r\n            popup.appendChild(closeButton)\r\n        }\r\n        //Welcome title\r\n        var welcome = document.createElement(\"div\")\r\n        welcome.setAttribute(\"style\", \" display: flex; margin: 10px; align-items: center;\")\r\n        popup.appendChild(welcome)\r\n\r\n        var welcome1 = document.createElement(\"IMG\")\r\n        welcome1.setAttribute(\"src\", \"/imgs/maslow-logo.png\" )\r\n        welcome1.setAttribute(\"style\", \" height:25px; border-radius:50%;\")\r\n        welcome.appendChild(welcome1)\r\n        var welcome2 = document.createElement(\"IMG\")\r\n        welcome2.setAttribute(\"src\", \"/imgs/maslowcreate.svg\" )\r\n        welcome2.setAttribute(\"style\", \"height:20px; padding: 10px;\")\r\n        welcome.appendChild(welcome2)\r\n        var middleBrowseDiv = document.createElement(\"div\")\r\n        if (currentUser == null){\r\n\r\n            var githubSign = document.createElement(\"button\")\r\n            githubSign.setAttribute(\"id\", \"loginButton2\" )\r\n            githubSign.setAttribute(\"class\", \"form browseButton githubSign\")\r\n            githubSign.setAttribute(\"style\", \"width: 90px; font-size: .7rem; margin-left: auto;\")\r\n            githubSign.textContent = \"Login\"\r\n            welcome.appendChild(githubSign)   \r\n\r\n            var githubSignUp = document.createElement(\"button\")\r\n            githubSignUp.setAttribute(\"class\", \"form browseButton githubSign\")\r\n            githubSignUp.setAttribute(\"onclick\", \"window.open('https://github.com/join')\")\r\n            githubSignUp.setAttribute(\"style\", \"width: 130px; font-size: .7rem;margin-left: 5px;\")\r\n            githubSignUp.textContent = \"Create an account\"\r\n            welcome.appendChild(githubSignUp)  \r\n\r\n            //Welcome title\r\n            var welcome3 = document.createElement(\"div\")\r\n            welcome3.innerHTML = \"Maslow Create User Projects\"\r\n            welcome3.setAttribute(\"style\", \"justify-content: flex-start; display: inline; width: 100%; font-size: 18px;\")\r\n            popup.appendChild(welcome3)\r\n\r\n            middleBrowseDiv.setAttribute(\"style\",\"margin-top:25px\")\r\n\r\n            githubSign.addEventListener(\"mousedown\", () => {\r\n                this.tryLogin()\r\n            })\r\n        }\r\n        \r\n        popup.classList.remove('off')\r\n        popup.setAttribute(\"style\", \"padding: 0;text-align: center; background-color: #f9f6f6; border: 10px solid #3e3d3d;\")\r\n       \r\n        var tabButtons = document.createElement(\"DIV\")\r\n        tabButtons.setAttribute(\"class\", \"tab\")\r\n        popup.appendChild(tabButtons)\r\n     \r\n        middleBrowseDiv.setAttribute(\"class\", \"middleBrowse\")\r\n        popup.appendChild(middleBrowseDiv)\r\n\r\n        var searchIcon = document.createElement(\"IMG\")\r\n        searchIcon.setAttribute(\"src\", '/imgs/search_icon.svg')\r\n        searchIcon.setAttribute(\"style\", \"width: 20px; float: right; color: white; position: relative;right: 3px; opacity: 0.5;\")\r\n        middleBrowseDiv.appendChild(searchIcon)\r\n\r\n        var searchBar = document.createElement(\"input\")\r\n        searchBar.setAttribute(\"type\", \"text\")\r\n        searchBar.setAttribute(\"contenteditable\", \"true\")\r\n        searchBar.setAttribute(\"placeholder\", \"Search for project..\")\r\n        searchBar.setAttribute(\"class\", \"menu_search\")\r\n        searchBar.setAttribute(\"id\", \"project_search\")\r\n        middleBrowseDiv.appendChild(searchBar)\r\n\r\n        //Display option buttons\r\n        var browseDisplay1 = document.createElement(\"div\")\r\n        browseDisplay1.setAttribute(\"class\", \"browseDisplay\")\r\n        var listPicture = document.createElement(\"IMG\")\r\n        listPicture.setAttribute(\"src\", '/imgs/list-with-dots.svg') //https://www.freeiconspng.com/img/1454\r\n        listPicture.setAttribute(\"style\", \"height: 75%;padding: 3px;\")\r\n        browseDisplay1.appendChild(listPicture)\r\n        middleBrowseDiv.appendChild(browseDisplay1)\r\n        var browseDisplay2 = document.createElement(\"div\")\r\n        browseDisplay2.setAttribute(\"class\", \"browseDisplay active_filter\")\r\n        browseDisplay2.setAttribute(\"id\", \"thumb\")\r\n        var listPicture2 = document.createElement(\"IMG\")\r\n        listPicture2.setAttribute(\"src\", '/imgs/thumb_icon.png') \r\n        listPicture2.setAttribute(\"style\", \"height: 80%;padding: 3px;\")\r\n        browseDisplay2.appendChild(listPicture2)\r\n        middleBrowseDiv.appendChild(browseDisplay2)\r\n\r\n        //Input to search for projects\r\n\r\n        searchBar.addEventListener('keydown', (e) => {\r\n            \r\n            this.loadProjectsBySearch(\"yoursButton\",e, searchBar.value, \"updated\")\r\n            this.loadProjectsBySearch(\"githubButton\",e, searchBar.value, \"stars\") // updated just sorts content by most recently updated\r\n        })\r\n        \r\n\r\n        this.projectsSpaceDiv = document.createElement(\"DIV\")\r\n        this.projectsSpaceDiv.setAttribute(\"class\", \"float-left-div\")\r\n        this.projectsSpaceDiv.setAttribute(\"style\", \"overflow-x: hidden; margin-top: 10px;\")\r\n        popup.appendChild(this.projectsSpaceDiv)\r\n        \r\n        const pageChange = document.createElement(\"div\")\r\n        const pageBack = document.createElement(\"button\")\r\n        pageBack.setAttribute(\"id\", \"back\")\r\n        pageBack.setAttribute(\"class\", \"page_change\")\r\n        pageBack.innerHTML = \"&#8249;\"\r\n\r\n        const pageForward = document.createElement(\"button\")\r\n        pageChange.appendChild(pageBack)\r\n        pageChange.appendChild(pageForward)\r\n        pageForward.setAttribute(\"id\", \"forward\")\r\n        pageForward.setAttribute(\"class\", \"page_change\")\r\n        pageForward.innerHTML = \"&#8250;\"\r\n\r\n        popup.appendChild(pageChange)\r\n\r\n        \r\n        this.openTab(page)\r\n\r\n        //Event listeners \r\n\r\n        browseDisplay1.addEventListener(\"click\", () => {\r\n            // titlesDiv.style.display = \"flex\"\r\n            browseDisplay2.classList.remove(\"active_filter\")\r\n            this.openTab(page)\r\n        })\r\n        browseDisplay2.addEventListener(\"click\", () => {\r\n            // titlesDiv.style.display = \"none\"\r\n            browseDisplay2.classList.add(\"active_filter\")\r\n            this.openTab(page)\r\n        })\r\n        pageForward.addEventListener(\"click\", () => {\r\n            if (page >=1){ page +=1 }\r\n            this.openTab(page)\r\n        })\r\n        pageBack.addEventListener(\"click\", () => {\r\n            if (page >1){page -=1}\r\n            this.openTab(page)\r\n        })\r\n\r\n    }\r\n\r\n    /** \r\n     * Search for the name of a project and then return results which match that search.\r\n     */\r\n    this.loadProjectsBySearch = async function(tabName, ev, searchString, sorting, pageNumber, clear = true){\r\n        \r\n        if(ev.key == \"Enter\"){\r\n            //Remove projects shown now\r\n            if(clear){\r\n                while (this.projectsSpaceDiv.firstChild) {\r\n                    this.projectsSpaceDiv.removeChild(this.projectsSpaceDiv.firstChild)\r\n                }\r\n            }\r\n            // add initial projects to div\r\n\r\n            //New project div\r\n            if (currentUser !== null && clear){\r\n                var browseDiv = document.createElement(\"div\")\r\n                browseDiv.setAttribute(\"class\", \"browseDiv\")\r\n                this.projectsSpaceDiv.appendChild(browseDiv)\r\n            \r\n                var createNewProject = document.createElement(\"div\")\r\n                createNewProject.setAttribute(\"class\", \"newProject\")\r\n\r\n                browseDiv.appendChild(createNewProject)\r\n                this.NewProject(\"New Project\", null, true, \"\")\r\n            }\r\n            //header for project list style display\r\n            var titlesDiv = document.createElement(\"div\")\r\n            titlesDiv.setAttribute(\"id\",\"titlesDiv\")\r\n            var titles = document.createElement(\"div\")\r\n            titles.innerHTML = \"\"\r\n            titles.setAttribute(\"class\",\"browseColumn\")\r\n            titlesDiv.appendChild(titles)\r\n            var titles2 = document.createElement(\"div\")\r\n            titles2.innerHTML = \"Project\"\r\n            titles2.setAttribute(\"class\",\"browseColumn\")\r\n            titlesDiv.appendChild(titles2)\r\n            var titles3 = document.createElement(\"div\")\r\n            titles3.innerHTML = \"Creator\"\r\n            titles3.setAttribute(\"class\",\"browseColumn\")\r\n            titlesDiv.appendChild(titles3)\r\n            var titles4 = document.createElement(\"div\")\r\n            titles4.innerHTML = \"Created on\"\r\n            titles4.setAttribute(\"class\",\"browseColumn\")\r\n            titlesDiv.appendChild(titles4)\r\n            var titles5 = document.createElement(\"div\")\r\n            titles5.innerHTML = \"Last Modified\"\r\n            titles5.setAttribute(\"class\",\"browseColumn\")\r\n            titlesDiv.appendChild(titles5)\r\n\r\n            if (!document.getElementById(\"thumb\").classList.contains(\"active_filter\")){\r\n                titlesDiv.style.display = \"flex\"\r\n                titlesDiv.style.marginTop = \"10px\"\r\n                browseDiv.style.width = \"100%\"\r\n                createNewProject.style.height = \"80px\"\r\n            }\r\n        \r\n            this.projectsSpaceDiv.appendChild(titlesDiv)\r\n              \r\n            //Load projects\r\n            var query\r\n            var owned\r\n\r\n            var sortMethod = sorting  //drop down input. temporarily inactive until we figure some better way to sort\r\n            if(tabName == \"yoursButton\"){\r\n                owned = true\r\n                query = searchString + ' ' + 'fork:true user:' + currentUser + ' topic:maslowcreate'\r\n            }\r\n            else{\r\n                owned = false\r\n                query = searchString + ' topic:maslowcreate -user:' + currentUser\r\n            }\r\n            \r\n            //Figure out how many repos this user has, search will throw an error if they have 0;\r\n            // octokit.repos.list({\r\n            // affiliation: 'owner',\r\n            // })\r\n            \r\n            return octokit.search.repos({\r\n                q: query,\r\n                sort: sortMethod,\r\n                per_page: 50,\r\n                page: pageNumber,\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            }).then(result => {\r\n                result.data.items.forEach(repo => {\r\n                    const thumbnailPath = \"https://raw.githubusercontent.com/\"+repo.full_name+\"/master/project.svg?sanitize=true\"\r\n                    \r\n                    this.addProject(repo.name, repo.id, repo.owner.login, repo.created_at, repo.updated_at, owned, thumbnailPath)\r\n                })\r\n                \r\n            }) \r\n        } \r\n    }\r\n    \r\n    /** \r\n     * Adds a new project to the load projects display.\r\n     */\r\n    this.NewProject = function(projectName, id, owned, thumbnailPath){\r\n        //create a project element to display\r\n        \r\n        var project = document.createElement(\"DIV\")\r\n        project.classList.add(\"newProjectdiv\")\r\n        \r\n        var projectPicture = document.createElement(\"IMG\")\r\n        projectPicture.setAttribute(\"src\", thumbnailPath)\r\n        projectPicture.setAttribute(\"onerror\", \"this.src='/defaultThumbnail.svg'\")\r\n        projectPicture.setAttribute(\"style\", \"height: 80%; float: left;\")\r\n        project.appendChild(projectPicture)\r\n        \r\n        var projectText = document.createElement(\"span\")\r\n        projectText.innerHTML = \"Start a new project\"\r\n        projectText.setAttribute(\"style\",\"align-self: center\")\r\n        project.appendChild(projectText)\r\n\r\n        document.querySelector(\".newProject\").appendChild(project) \r\n        \r\n        project.addEventListener('click', () => {\r\n            this.projectClicked(projectName, id, owned)\r\n        })\r\n\r\n    }\r\n    \r\n    /** \r\n     * Adds a new project to the load projects display.\r\n     */\r\n    this.addProject = function(projectName, id, owner, createdAt, updatedAt, owned, thumbnailPath){\r\n        \r\n        this.projectsSpaceDiv.classList.remove(\"float-left-div-thumb\")\r\n        var project = document.createElement(\"DIV\")\r\n        var projectPicture = document.createElement(\"IMG\")\r\n        projectPicture.setAttribute(\"src\", thumbnailPath)\r\n        projectPicture.setAttribute(\"onerror\", \"this.src='/defaultThumbnail.svg'\")\r\n        project.appendChild(projectPicture)\r\n        project.setAttribute(\"id\", projectName)\r\n        project.classList.add(\"project\")\r\n\r\n        if (owned){\r\n            project.classList.add(\"mine\")\r\n        }\r\n\r\n        //create a project element to display\r\n        if (document.getElementById(\"thumb\").classList.contains(\"active_filter\")){\r\n            \r\n            projectPicture.setAttribute(\"style\", \"width: 100%; height: 80%;\")\r\n            project.appendChild(document.createElement(\"BR\"))\r\n\r\n            var shortProjectName\r\n            if(projectName.length > 13){\r\n                shortProjectName = document.createTextNode(projectName.substr(0,9)+\"..\")\r\n            }\r\n            else{\r\n                shortProjectName = document.createTextNode(projectName)\r\n            }\r\n            project.setAttribute(\"title\",projectName)\r\n            project.appendChild(shortProjectName) \r\n        }\r\n        else{\r\n            project.setAttribute(\"style\", \"display:flex; flex-direction:row; flex-wrap:wrap; width: 100%; border-bottom: 1px solid darkgrey;\")\r\n            projectPicture.setAttribute(\"class\", \"browseColumn\")\r\n            \r\n            shortProjectName = document.createElement(\"DIV\")\r\n            shortProjectName.innerHTML = projectName\r\n            shortProjectName.setAttribute(\"class\", \"browseColumn\")\r\n            project.appendChild(shortProjectName) \r\n\r\n            var ownerName = document.createElement(\"DIV\")\r\n            var ownerNameIn = document.createTextNode(owner)\r\n            ownerName.appendChild(ownerNameIn) \r\n            ownerName.setAttribute(\"class\", \"browseColumn\")\r\n            project.appendChild(ownerName) \r\n\r\n            var date = new Date(createdAt)\r\n            var months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n            var createdTime = document.createElement(\"DIV\")\r\n            createdTime.setAttribute(\"class\", \"browseColumn\")\r\n            var createdTimeIn = document.createTextNode(months[date.getMonth()] + \" \" + date.getFullYear())\r\n            createdTime.appendChild(createdTimeIn) \r\n            project.appendChild(createdTime) \r\n\r\n            var updated = new Date(updatedAt)\r\n            var updatedTime = document.createElement(\"DIV\")\r\n            var updatedTimeIn = document.createTextNode(months[updated.getMonth()] + \" \" + date.getFullYear())\r\n            updatedTime.appendChild(updatedTimeIn)\r\n            updatedTime.setAttribute(\"class\", \"browseColumn\")\r\n            project.appendChild(updatedTime) \r\n   \r\n        }\r\n\r\n        this.projectsSpaceDiv.appendChild(project) \r\n\r\n        project.addEventListener('click', () => {\r\n            this.projectClicked(projectName, id, owned)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Runs when you click on a project.\r\n     */\r\n    this.projectClicked = function(projectName, projectID, owned){\r\n        //runs when you click on one of the projects\r\n        if(projectName == \"New Project\"){\r\n            this.createNewProjectPopup()\r\n        }\r\n        else if(owned){\r\n            this.loadProject(projectName)\r\n        }\r\n        else{\r\n            window.open('/run?'+projectID)\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Runs owned search first and then full github search\r\n     */\r\n    this.openTab = function(page) {\r\n\r\n        // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n        //Click on the search bar so that when you start typing it shows updateCommands\r\n        document.getElementById('menuInput').focus()\r\n        \r\n        this.loadProjectsBySearch(\"yoursButton\", {key: \"Enter\"}, document.getElementById(\"project_search\").value, \"updated\", page, true)\r\n            .then( () => {\r\n                this.loadProjectsBySearch(\"githubButton\", {key: \"Enter\"}, document.getElementById(\"project_search\").value, \"stars\", page, false)\r\n            })\r\n    }\r\n    \r\n    /** \r\n     * The popup to create a new project (giving it a name and whatnot).\r\n     */\r\n    this.createNewProjectPopup = function(){\r\n        //Clear the popup and populate the fields we will need to create the new repo\r\n        \r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.setAttribute(\"style\", \"padding:2% 0\")\r\n        //Project name\r\n        // <div class=\"form\">\r\n        var createNewProjectDiv = document.createElement(\"DIV\")\r\n        createNewProjectDiv.setAttribute(\"class\", \"form\")\r\n        createNewProjectDiv.setAttribute(\"style\", \"color:whitesmoke\")\r\n        \r\n        //Add a title\r\n        var header = document.createElement(\"H1\")\r\n        var title = document.createTextNode(\"Create a new project\")\r\n        header.appendChild(title)\r\n        createNewProjectDiv.appendChild(header)\r\n        \r\n        //Create the form object\r\n        var form = document.createElement(\"form\")\r\n        form.setAttribute(\"class\", \"login-form\")\r\n        createNewProjectDiv.appendChild(form)\r\n        \r\n        //Create the name field\r\n        var name = document.createElement(\"input\")\r\n        name.setAttribute(\"id\",\"project-name\")\r\n        name.setAttribute(\"type\",\"text\")\r\n        name.setAttribute(\"placeholder\",\"Project name\")\r\n        form.appendChild(name)\r\n        \r\n        //Add the description field\r\n        var description = document.createElement(\"input\")\r\n        description.setAttribute(\"id\", \"project-description\")\r\n        description.setAttribute(\"type\", \"text\")\r\n        description.setAttribute(\"placeholder\", \"Project description\")\r\n        form.appendChild(description)\r\n        \r\n        //Grab all of the available licenses\r\n        var licenseOptions = document.createElement('select')\r\n        licenseOptions.setAttribute(\"id\", \"license-options\")\r\n        Object.keys(licenses).forEach( key => {\r\n            var option = document.createElement('option')\r\n            option.value = key\r\n            option.text = key\r\n            licenseOptions.appendChild(option)\r\n        })\r\n        \r\n        form.appendChild(licenseOptions)\r\n        \r\n        //Add the button\r\n        var createButton = document.createElement(\"button\")\r\n        createButton.setAttribute(\"type\", \"button\")\r\n        createButton.setAttribute(\"style\", \"height: 50px; border: 1px solid whitesmoke;\")\r\n        createButton.addEventListener('click', () => {\r\n            this.createNewProject()\r\n        })\r\n        var buttonText = document.createTextNode(\"Create Project\")\r\n        createButton.appendChild(buttonText)\r\n        form.appendChild(createButton)\r\n    \r\n        popup.appendChild(createNewProjectDiv)\r\n\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with a sharable copy of the project.\r\n     */\r\n    this.shareOpenedProject = function(){\r\n        alert(\"A page with a shareable url to this project will open in a new window. Share the link to that page with anyone you would like to share the project with.\")\r\n         \r\n\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var ID = result.data.id\r\n            window.open('/run?'+ID)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with the github page for the project.\r\n     */\r\n    this.openGitHubPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with the README page for the project.\r\n     */\r\n    this.openREADMEPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url + '/blob/master/README.md'\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Open a new tab with the Bill Of Materials page for the project.\r\n     */\r\n    this.openBillOfMaterialsPage = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url + '/blob/master/BillOfMaterials.md'\r\n            window.open(url)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Search github for projects which match a string.\r\n     */\r\n    this.searchGithub = async (searchString,owned) => {\r\n        //Load projects\r\n        var query\r\n\r\n        if(owned){\r\n            query = searchString + ' ' + 'user:' + currentUser + ' topic:maslowcreate'\r\n        }\r\n        else{\r\n            query = searchString + ' topic:maslowcreate -user:' + currentUser\r\n        }\r\n\r\n        return await octokit.search.repos({\r\n            q: query,\r\n            sort: 'stars',\r\n            per_page: 10,\r\n            page: 1,\r\n            headers: {\r\n                accept: 'application/vnd.github.mercy-preview+json'\r\n            }\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Send user to GitHub settings page to delete project.\r\n     */\r\n    this.deleteProject = function(){\r\n        //Open the github page for the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            var url = result.data.html_url + '/settings'\r\n            window.open(url)\r\n        })\r\n    }\r\n\r\n    /** \r\n     * Open pull request if it's a forked project.\r\n     */\r\n    this.makePullRequest = function(){\r\n      \r\n        //Open the github page for making a pull request to the current project in a new tab\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            \r\n            const webString = \"https://github.com/\" + result.data.parent.full_name + \"/compare/\" + result.data.parent.default_branch + \"...\" + result.data.owner.login + \":\" + result.data.default_branch\r\n            \r\n            window.open(webString)\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Creates a new blank project.\r\n     */\r\n    this.createNewProject = function(){\r\n\r\n        if(typeof intervalTimer != undefined){\r\n            clearInterval(intervalTimer) //Turn of auto saving\r\n        }\r\n        \r\n        //Get name and description\r\n        const name = document.getElementById('project-name').value\r\n        const description = document.getElementById('project-description').value\r\n        const licenseText = licenses[document.getElementById('license-options').value]\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            name: name,\r\n            atomType: \"Molecule\",\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule\r\n        \r\n        //Create a new repo\r\n        octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            currentRepoName = result.data.name\r\n            var jsonRepOfProject = GlobalVariables.topLevelMolecule.serialize()\r\n            jsonRepOfProject.filetypeVersion = 1\r\n            jsonRepOfProject.circleSegmentSize = GlobalVariables.circleSegmentSize\r\n            const projectContent = window.btoa(JSON.stringify(jsonRepOfProject, null, 4))\r\n            \r\n            octokit.repos.createOrUpdateFileContents({\r\n                owner: currentUser,\r\n                repo: currentRepoName,\r\n                path: \"project.maslowcreate\",\r\n                message: \"initialize repo\", \r\n                content: projectContent\r\n            }).then(() => {\r\n                //Then create the BOM file\r\n                var content = window.btoa(bomHeader) // create a file with just the header in it and base64 encode it\r\n                octokit.repos.createOrUpdateFileContents({\r\n                    owner: currentUser,\r\n                    repo: currentRepoName,\r\n                    path: \"BillOfMaterials.md\",\r\n                    message: \"initialize BOM\", \r\n                    content: content\r\n                }).then(() => {\r\n                    //Then create the README file\r\n                    content = window.btoa(readmeHeader) // create a file with just the word \"init\" in it and base64 encode it\r\n                    octokit.repos.createOrUpdateFileContents({\r\n                        owner: currentUser,\r\n                        repo: currentRepoName,\r\n                        path: \"README.md\",\r\n                        message: \"initialize README\", \r\n                        content: content\r\n                    }).then(() => {\r\n                        octokit.repos.createOrUpdateFileContents({\r\n                            owner: currentUser,\r\n                            repo: currentRepoName,\r\n                            path: \"project.svg\",\r\n                            message: \"SVG Picture\", \r\n                            content: \"\"\r\n                        }).then(()=>{\r\n                            octokit.repos.createOrUpdateFileContents({\r\n                                owner: currentUser,\r\n                                repo: currentRepoName,\r\n                                path: \".gitattributes\",\r\n                                message: \"Create gitattributes\", \r\n                                content: window.btoa(\"data binary\")\r\n                            }).then(()=>{\r\n                                octokit.repos.createOrUpdateFileContents({ \r\n                                    owner: currentUser,\r\n                                    repo: currentRepoName,\r\n                                    path: \"data.json\",\r\n                                    message: \"Data file\", \r\n                                    content: \"\"\r\n                                }).then(()=>{\r\n                                    octokit.repos.createOrUpdateFileContents({ \r\n                                        owner: currentUser,\r\n                                        repo: currentRepoName,\r\n                                        path: \"LICENSE.txt\",\r\n                                        message: \"Establish license\", \r\n                                        content:  window.btoa(licenseText)\r\n                                    }).then(()=>{\r\n                                        intervalTimer = setInterval(() => { this.saveProject() }, 1200000) //Save the project regularly\r\n                                    })\r\n                                })\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n            \r\n            //Update the project topics\r\n            octokit.repos.replaceAllTopics({\r\n                owner: currentUser,\r\n                repo: currentRepoName,\r\n                names: [\"maslowcreate\", \"maslowcreate-project\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule.backgroundClick()\r\n        \r\n        //Clear and hide the popup\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.classList.add('off')\r\n        \r\n        \r\n    }\r\n\r\n    /** \r\n     * Save the current project to github.\r\n     */\r\n    this.saveProject = function(){\r\n        \r\n        //Save the current project into the github repo\r\n        if(currentRepoName != null){\r\n            \r\n            //Store the target repo incase a new project is loaded during the save\r\n            const saveRepoName = currentRepoName\r\n            const saveUser = currentUser\r\n            \r\n            if(typeof intervalTimer != undefined){\r\n                clearInterval(intervalTimer) //Turn off auto saving to prevent it from saving again during this save\r\n            }\r\n            this.progressSave(0)\r\n            // var shape = null\r\n\r\n            // if(GlobalVariables.topLevelMolecule.value != null && typeof GlobalVariables.topLevelMolecule.value != 'number'){\r\n            // shape = GlobalVariables.topLevelMolecule.value\r\n            // }\r\n            \r\n            const passBOMOn = (bomItems) => {\r\n                const values = {op: \"svg\", readPath: GlobalVariables.topLevelMolecule.path}\r\n                const {answer} = window.ask(values)\r\n                answer.then( answer => {\r\n                    this.progressSave(10)\r\n                    \r\n                    var contentSvg = answer //Would compute the svg picture here\r\n                    \r\n                    var bomContent = bomHeader\r\n                    \r\n                    var totalParts = 0\r\n                    var totalCost  = 0\r\n                    if(bomItems != undefined){\r\n                        bomItems.forEach(item => {\r\n                            totalParts += item.numberNeeded\r\n                            totalCost  += item.costUSD\r\n                            bomContent = bomContent + \"\\n|\" + item.BOMitemName + \"|\" + item.numberNeeded + \"|$\" + item.costUSD.toFixed(2) + \"|\" + convertLinks(item.source) + \"|\"\r\n                        })\r\n                    }\r\n                    bomContent = bomContent + \"\\n|\" + \"Total: \" + \"|\" + totalParts + \"|$\" + totalCost.toFixed(2) + \"|\" + \" \" + \"|\"\r\n                    bomContent = bomContent+\"\\n\\n 3xCOG MSRP: $\" + (3*totalCost).toFixed(2)\r\n                    \r\n                    var readmeContent = readmeHeader + \"\\n\\n\" + \"# \" + saveRepoName + \"\\n\\n![](/project.svg)\\n\\n\"\r\n                    GlobalVariables.topLevelMolecule.requestReadme().forEach(item => {\r\n                        readmeContent = readmeContent + item + \"\\n\\n\\n\"\r\n                    })\r\n                        \r\n                    var jsonRepOfProject = GlobalVariables.topLevelMolecule.serialize()\r\n                    jsonRepOfProject.filetypeVersion = 1\r\n                    jsonRepOfProject.circleSegmentSize = GlobalVariables.circleSegmentSize\r\n                    const projectContent = JSON.stringify(jsonRepOfProject, null, 4)\r\n                           \r\n                    var decoder = new TextDecoder('utf8')\r\n                    var finalSVG = decoder.decode(contentSvg)\r\n                    \r\n                    \r\n                    const askJsonVals = {op: \"getJSON\", readPath: GlobalVariables.topLevelMolecule.path}\r\n                    const  {answer: answer2} = window.ask(askJsonVals)\r\n                    answer2.then( JSONData => {\r\n                        \r\n                        this.createCommit(octokit,{\r\n                            owner: saveUser,\r\n                            repo: saveRepoName,\r\n                            changes: {\r\n                                files: {\r\n                                    'BillOfMaterials.md': bomContent,\r\n                                    'README.md': readmeContent,\r\n                                    'project.svg': finalSVG,\r\n                                    'project.maslowcreate': projectContent,\r\n                                    'data.json': JSONData\r\n                                },\r\n                                commit: 'Autosave'\r\n                            }\r\n                        })\r\n                    })\r\n\r\n                    intervalTimer = setInterval(() => this.saveProject(), 1200000)\r\n                })\r\n            }\r\n            extractBomTags(GlobalVariables.topLevelMolecule.path, passBOMOn)\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Creates saving/saved pop up\r\n     */\r\n    this.progressSave = function (progress, saving = true) {\r\n        \r\n        progress = Math.max(0, progress) //Make it so the progress can't be displayed negitive\r\n        \r\n        var popUp = document.getElementById(\"popUp\")   \r\n        let popUpBox = document.querySelector('#Progress_Status') \r\n        //var width = 1; \r\n        popUp.setAttribute(\"style\",\"display:block\")\r\n        popUpBox.setAttribute(\"style\",\"display:block\")\r\n        \r\n        if (progress >= 100) { \r\n            popUp.style.width = progress + '%' \r\n            if(saving){\r\n                popUp.textContent = \"Project Saved\"\r\n                setTimeout(function() {\r\n                    popUp.setAttribute(\"style\",\"display:none\")\r\n                    popUpBox.setAttribute(\"style\",\"display:none\")\r\n                }, 4000)\r\n            }\r\n            else{\r\n                popUp.setAttribute(\"style\",\"display:none\")\r\n                popUpBox.setAttribute(\"style\",\"display:none\")\r\n            }\r\n        } else { \r\n            if(saving){\r\n                popUp.textContent = \"Saving...\"\r\n            }\r\n            else{\r\n                popUp.textContent = \"Loading...\"+progress.toFixed(1)+\"%\"\r\n            }\r\n            popUp.style.width = progress + '%'  \r\n        } \r\n    } \r\n        \r\n    /** \r\n     * Create a commit as part of the saving process.\r\n     */\r\n    this.createCommit = async function(octokit, { owner, repo, base, changes }) {\r\n        this.progressSave(30)\r\n        let response\r\n        \r\n        if (!base) {\r\n            response = await octokit.repos.get({ owner, repo })\r\n            base = response.data.default_branch\r\n        }\r\n        this.progressSave(40)\r\n        \r\n        response = await octokit.repos.listCommits({\r\n            owner,\r\n            repo,\r\n            sha: base,\r\n            per_page: 1\r\n        })\r\n        \r\n        let latestCommitSha = response.data[0].sha\r\n        const treeSha = response.data[0].commit.tree.sha\r\n        this.progressSave(60)\r\n      \r\n        response = await octokit.git.createTree({\r\n            owner,\r\n            repo,\r\n            base_tree: treeSha,\r\n            tree: Object.keys(changes.files).map(path => {\r\n                if(changes.files[path] != null){\r\n                    return {\r\n                        path,\r\n                        mode: '100644',\r\n                        content: changes.files[path]\r\n                    }\r\n                }\r\n                else{\r\n                    return {\r\n                        path,\r\n                        mode: '100644',\r\n                        sha: null\r\n                    }\r\n                }\r\n            })\r\n        })\r\n        const newTreeSha = response.data.sha\r\n        this.progressSave(80)\r\n\r\n        response = await octokit.git.createCommit({\r\n            owner,\r\n            repo,\r\n            message: changes.commit,\r\n            tree: newTreeSha,\r\n            parents: [latestCommitSha]\r\n        })\r\n        latestCommitSha = response.data.sha\r\n\r\n        this.progressSave(90)\r\n      \r\n        await octokit.git.updateRef({\r\n            owner,\r\n            repo,\r\n            sha: latestCommitSha,\r\n            ref: \"heads/\" + base,\r\n            force: true\r\n        })\r\n        this.progressSave(100)\r\n        console.warn(\"Project saved\")\r\n       \r\n    }\r\n    \r\n    /** \r\n     * Loads a project from github by name.\r\n     */\r\n    this.loadProject = async function(projectName){\r\n        \r\n        this.totalAtomCount = 0\r\n        this.numberOfAtomsToLoad = 0\r\n\r\n        GlobalVariables.startTime = new Date().getTime()\r\n        \r\n        if(typeof intervalTimer != undefined){\r\n            clearInterval(intervalTimer) //Turn off auto saving\r\n        }\r\n\r\n        //Clear and hide the popup\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        popup.classList.add('off')\r\n        \r\n        currentRepoName = projectName\r\n        \r\n        //Load a blank project\r\n        GlobalVariables.topLevelMolecule = new Molecule({\r\n            x: 0, \r\n            y: 0, \r\n            topLevel: true, \r\n            atomType: \"Molecule\"\r\n        })\r\n        \r\n        GlobalVariables.currentMolecule = GlobalVariables.topLevelMolecule\r\n        \r\n        octokit.repos.getContent({\r\n            owner: currentUser,\r\n            repo: projectName,\r\n            path: 'project.maslowcreate'\r\n        }).then(result => {\r\n            //content will be base64 encoded\r\n            let rawFile = JSON.parse(atob(result.data.content))\r\n            \r\n            if(rawFile.circleSegmentSize){\r\n                GlobalVariables.circleSegmentSize = rawFile.circleSegmentSize\r\n            }\r\n            \r\n            if(rawFile.filetypeVersion == 1){\r\n                GlobalVariables.topLevelMolecule.deserialize(rawFile)\r\n            }\r\n            else{\r\n                GlobalVariables.topLevelMolecule.deserialize(this.convertFromOldFormat(rawFile))\r\n            }\r\n        })\r\n        octokit.repos.get({\r\n            owner: currentUser,\r\n            repo: currentRepoName\r\n        }).then(result => {\r\n            GlobalVariables.fork = result.data.fork\r\n            if(!GlobalVariables.fork){\r\n                document.getElementById(\"pull_top\").style.display = \"none\"\r\n            }\r\n            else{\r\n                document.getElementById(\"pull_top\").style.display = \"inline\"\r\n            }\r\n        })\r\n        \r\n    }\r\n    \r\n    this.convertFromOldFormat = function(json){\r\n        \r\n        var listOfMoleculeAtoms = json.molecules\r\n        \r\n        //Find the top level molecule\r\n        var projectObject = listOfMoleculeAtoms.filter((molecule) => { return molecule.topLevel == true })[0]\r\n        //Remove that element from the listOfMoleculeAtoms\r\n        listOfMoleculeAtoms.splice(listOfMoleculeAtoms.findIndex(e => e.topLevel == true),1)\r\n        \r\n        //Recursive function to walk the tree and find molecule placeholders\r\n        function walkForMolecules(projectObject){\r\n            projectObject.allAtoms.forEach(function(atom, allAtomsIndex, allAtomsObject) {\r\n                if(atom.atomType == \"Molecule\"){\r\n                    \r\n                    if(atom.allAtoms != undefined){ //If this molecule has allAtoms\r\n                        walkForMolecules(atom)//Walk it\r\n                    }\r\n                    else{ //Else replace it with a version which does have allAtoms from the list\r\n                        //Find the version in molecules list and plug it in\r\n                        allAtomsObject[allAtomsIndex] = listOfMoleculeAtoms.filter((molecule) => { return molecule.uniqueID == atom.uniqueID })[0]\r\n                        //Remove that element from the listOfMoleculeAtoms\r\n                        listOfMoleculeAtoms.splice(listOfMoleculeAtoms.findIndex(e => e.uniqueID == atom.uniqueID),1)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        \r\n        //Find any placeholder molecules in there (this needs to be a full tree walk for everything to work)\r\n        while(listOfMoleculeAtoms.length > 0){\r\n            walkForMolecules(projectObject)\r\n        }\r\n        \r\n        return projectObject\r\n    }\r\n    \r\n    /** \r\n     * Begins the automatic process of saving the project\r\n     */\r\n    this.beginAutosave = function(){\r\n        intervalTimer = setInterval(() => this.saveProject(), 120000) //Save the project regularly\r\n    }\r\n    \r\n    /** \r\n     * Loads a project from github by its github ID.\r\n     */\r\n    this.getProjectByID = async function(id, saveUserInfo){\r\n        let repo = await octokit.request('GET /repositories/:id', {id})\r\n        //Find out the owners info;\r\n        const user     = repo.data.owner.login\r\n        const repoName = repo.data.name\r\n        const description = repo.data.description\r\n        //Get the file contents\r\n        let result = await octokit.repos.getContent({\r\n            owner: user,\r\n            repo: repoName,\r\n            path: 'project.maslowcreate'\r\n        })\r\n        \r\n        //If this is the top level we will save the rep info at the top level\r\n        if(saveUserInfo){\r\n            currentUser = user\r\n            currentRepoName = repoName\r\n        }\r\n        \r\n        let rawFile = JSON.parse(atob(result.data.content))\r\n        \r\n        rawFile.description = description\r\n        \r\n        if(rawFile.filetypeVersion == 1){\r\n            return rawFile\r\n        }\r\n        else{\r\n            return this.convertFromOldFormat(rawFile)\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Loads a project's data from github by its github ID.\r\n     */\r\n    this.getProjectDataByID = async function(id){\r\n        let repo = await octokit.request('GET /repositories/:id', {id})\r\n        //Find out the owners info;\r\n        const user     = repo.data.owner.login\r\n        const repoName = repo.data.name\r\n        \r\n        try{\r\n            let jsonData = await octokit.repos.getContent({\r\n                owner: user,\r\n                repo: repoName,\r\n                path: 'data.json'\r\n            })\r\n            \r\n            jsonData = atob(jsonData.data.content)\r\n            return jsonData\r\n            \r\n        }catch(err){\r\n            console.warn(\"Unable to load project data from github...using full model\")\r\n            return false\r\n        }\r\n    }\r\n    \r\n    /** \r\n     * Export a molecule as a new github project.\r\n     */\r\n    this.exportCurrentMoleculeToGithub = function(molecule){\r\n        \r\n        //Get name and description\r\n        var name = molecule.name\r\n        var description = \"A stand alone molecule exported from Maslow Create\"\r\n        \r\n        //Create a new repo\r\n        octokit.repos.createForAuthenticatedUser({\r\n            name: name,\r\n            description: description\r\n        }).then(result => {\r\n            //Once we have created the new repo we need to create a file within it to store the project in\r\n            var repoName = result.data.name\r\n            var id       = result.data.id\r\n            var path     = \"project.maslowcreate\"\r\n            var content  = window.btoa(\"init\") // create a file with just the word \"init\" in it and base64 encode it\r\n            octokit.repos.createOrUpdateFileContents({\r\n                owner: currentUser,\r\n                repo: repoName,\r\n                path: path,\r\n                message: \"initialize repo\", \r\n                content: content\r\n            }).then(() => {\r\n                \r\n                //Save the molecule into the newly created repo\r\n                \r\n                var path = \"project.maslowcreate\"\r\n                \r\n                molecule.topLevel = true //force the molecule to export in the long form as if it were the top level molecule\r\n                var content = window.btoa(JSON.stringify(molecule.serialize({molecules: []}), null, 4)) //Convert the passed molecule object to a JSON string and then convert it to base64 encoding\r\n                \r\n                //Get the SHA for the file\r\n                octokit.repos.getContent({\r\n                    owner: currentUser,\r\n                    repo: repoName,\r\n                    path: path\r\n                }).then(result => {\r\n                    var sha = result.data.sha\r\n                    \r\n                    //Save the repo to the file\r\n                    octokit.repos.updateFile({\r\n                        owner: currentUser,\r\n                        repo: repoName,\r\n                        path: path,\r\n                        message: \"export Molecule\", \r\n                        content: content,\r\n                        sha: sha\r\n                    }).then(() => {\r\n                        //Replace the existing molecule now that we just exported\r\n                        molecule.replaceThisMoleculeWithGithub(id)\r\n                    })\r\n                })\r\n\r\n            })\r\n            \r\n            //Update the project topics\r\n            octokit.repos.replaceTopics({\r\n                owner: currentUser,\r\n                repo: repoName,\r\n                names: [\"maslowcreate\", \"maslowcreate-molecule\"],\r\n                headers: {\r\n                    accept: 'application/vnd.github.mercy-preview+json'\r\n                }\r\n            })\r\n            \r\n        })\r\n    }\r\n\r\n    /** \r\n     * Like a project on github by unique ID.\r\n     */\r\n    this.starProject = function(id){\r\n        //Authenticate - Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n\r\n            octokit = new Octokit({\r\n                auth: github.access_token\r\n            })\r\n            \r\n            octokit.request('GET /repositories/:id', {id}).then(result => {\r\n                //Find out the information of who owns the project we are trying to like\r\n                \r\n                var user     = result.data.owner.login\r\n                var repoName = result.data.name\r\n                \r\n                octokit.repos.listTopics({\r\n                    owner: user, \r\n                    repo: repoName,\r\n                    headers: {\r\n                        accept: 'application/vnd.github.mercy-preview+json'\r\n                    }\r\n                }).then(()=> { \r\n                    //Find out if the project has been starred and unstar if it is\r\n                    octokit.activity.checkStarringRepo({\r\n                        owner:user,\r\n                        repo: repoName\r\n                    }).then(() => { \r\n                        var button= document.getElementById(\"Star-button\")\r\n                        button.setAttribute(\"class\",\"browseButton\")\r\n                        button.innerHTML = \"Star\"\r\n                        octokit.activity.unstarRepo({\r\n                            owner: user,\r\n                            repo: repoName\r\n                        })\r\n                    })\r\n                        \r\n                }).then(() =>{ \r\n                    var button= document.getElementById(\"Star-button\")\r\n                    button.setAttribute(\"class\",\"liked\")\r\n                    button.innerHTML = \"Starred\"\r\n                    octokit.activity.starRepo({\r\n                        owner: user,\r\n                        repo: repoName\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n    /** \r\n     * Fork a project on github by unique ID.\r\n     */\r\n    this.forkByID = function(id){\r\n        \r\n        //Authenticate - Initialize with OAuth.io app public key\r\n        OAuth.initialize('BYP9iFpD7aTV9SDhnalvhZ4fwD8')\r\n        // Use popup for oauth\r\n        OAuth.popup('github').then(github => {\r\n\r\n            octokit = new Octokit({\r\n                auth: github.access_token\r\n            })\r\n            \r\n            octokit.request('GET /repositories/:id', {id}).then(result => {\r\n                //Find out the information of who owns the project we are trying to fork\r\n                var user     = result.data.owner.login\r\n                var repoName = result.data.name\r\n                \r\n                octokit.repos.listTopics({\r\n                    owner: user, \r\n                    repo: repoName,\r\n                    headers: {\r\n                        accept: 'application/vnd.github.mercy-preview+json'\r\n                    }\r\n                }).then(result => {\r\n                    var topics = result.data.names\r\n                    \r\n                    //Create a fork of the project with the found user name and repo name under your account\r\n                    octokit.repos.createFork({\r\n                        owner: user, \r\n                        repo: repoName,\r\n                        headers: {\r\n                            accept: 'application/vnd.github.mercy-preview+json'\r\n                        }\r\n                    }).then(result => {\r\n                        var repoName = result.data.name\r\n                        //Manually copy over the topics which are lost in forking\r\n                        octokit.repos.replaceTopics({\r\n                            owner: result.data.owner.login,\r\n                            repo: result.data.name,\r\n                            names: topics,\r\n                            headers: {\r\n                                accept: 'application/vnd.github.mercy-preview+json'\r\n                            }\r\n                        }).then(() => {\r\n                            \r\n                            //Remove everything in the popup now\r\n                            while (popup.firstChild) {\r\n                                popup.removeChild(popup.firstChild)\r\n                            }\r\n                            \r\n                            popup.classList.remove('off')\r\n                            popup.setAttribute(\"style\", \"text-align: center\")\r\n\r\n                            var subButtonDiv = document.createElement('div')\r\n                            subButtonDiv.setAttribute(\"class\", \"form\")\r\n                            \r\n                            //Add a title\r\n                            var title = document.createElement(\"H3\")\r\n                            title.appendChild(document.createTextNode(\"A copy of the project '\" + repoName + \"' has been copied and added to your projects. You can view it by clicking the button below.\"))\r\n                            subButtonDiv.setAttribute('style','color:white;')\r\n                            subButtonDiv.appendChild(title)\r\n                            subButtonDiv.appendChild(document.createElement(\"br\"))\r\n                            \r\n                            var form = document.createElement(\"form\")\r\n                            subButtonDiv.appendChild(form)\r\n                            var button = document.createElement(\"button\")\r\n                            button.setAttribute(\"type\", \"button\")\r\n                            button.setAttribute(\"style\", \"border:2px solid white;\")\r\n                            button.appendChild(document.createTextNode(\"View Projects\"))\r\n                            button.addEventListener(\"click\", () => {\r\n                                window.location.href = '/'\r\n                            })\r\n                            form.appendChild(button)\r\n                            popup.appendChild(subButtonDiv)\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Upload or remove files from github. Files with null content will be deleted.\r\n     * @param {object} files A dictionary with paths as keys and the content as the answer.\r\n     */\r\n    this.uploadAFile = async function(files){\r\n        \r\n        await this.createCommit(octokit,{\r\n            owner: currentUser,\r\n            repo: currentRepoName,\r\n            changes: {\r\n                files: files,\r\n                commit: 'Upload file'\r\n            }\r\n        })\r\n    }\r\n    \r\n    /** \r\n     * Get a file from github. Calback is called after the retrieved.\r\n     */\r\n    this.getAFile = async function(filePath){\r\n        \r\n        const result = await octokit.repos.getContent({\r\n            owner: currentUser,\r\n            repo: currentRepoName,\r\n            path: filePath\r\n        })\r\n        \r\n        //content will be base64 encoded\r\n        let rawFile = atob(result.data.content)\r\n        return rawFile\r\n    }\r\n    \r\n    /** \r\n     * Get a link to the raw version of a file on GitHub\r\n     */\r\n    this.getAFileRawPath = function(filePath){\r\n        const rawPath = \"https://raw.githubusercontent.com/\" + currentUser + \"/\" + currentRepoName + \"/main/\" + filePath\r\n        return rawPath\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/githubOauth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "GitHubModule",
    "memberof": "src/js/githubOauth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/githubOauth.js~GitHubModule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/githubOauth.js",
    "importStyle": "GitHubModule",
    "description": "This function works like a class to sandbox interaction with GitHub.",
    "lineNumber": 10,
    "params": [],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/js/globalvariables.js",
    "content": "import { create, all }  from 'mathjs'\r\nimport Assembly         from './molecules/assembly.js'\r\nimport Box              from './molecules/box.js'\r\nimport CutList          from './molecules/cutlist.js'\r\nimport Circle           from './molecules/circle.js'\r\nimport Color            from './molecules/color.js'\r\nimport CutLayout        from './molecules/cutlayout.js'\r\nimport Rectangle        from './molecules/rectangle.js'\r\nimport ShrinkWrap       from './molecules/shrinkwrap.js'\r\nimport Move             from './molecules/move.js'\r\nimport Tag              from './molecules/tag.js'\r\nimport RegularPolygon   from './molecules/regularpolygon.js'\r\nimport Extrude          from './molecules/extrude.js'\r\nimport Stl              from './molecules/stl.js'\r\nimport Svg              from './molecules/svg.js'\r\n//import Nest              from './molecules/nest.js'\r\nimport Intersection     from './molecules/intersection.js'\r\nimport Difference       from './molecules/difference.js'\r\nimport Constant         from './molecules/constant.js'\r\nimport Equation         from './molecules/equation.js'\r\nimport ExtractTag       from './molecules/extracttag.js'\r\nimport Molecule         from './molecules/molecule.js'\r\nimport GeneticAlgorithm from './molecules/geneticAlgorithm.js'\r\nimport Input            from './molecules/input.js'\r\nimport Readme           from './molecules/readme.js'\r\nimport AddBOMTag        from './molecules/BOM.js'\r\nimport Rotate           from './molecules/rotate.js'\r\nimport GitHubMolecule   from './molecules/githubmolecule.js'\r\nimport Output           from './molecules/output.js'\r\nimport Gcode            from './molecules/gcode.js'\r\nimport Code             from './molecules/code.js'\r\nimport Group            from './molecules/group.js'\r\nimport UploadSVG        from './molecules/uploadSVG.js'\r\nimport GitHubModule     from './githubOauth'\r\n\r\n/**\r\n * This class defines things which are made available to all objects which import it. It is a singlton which means that each time it is imported the same instance is made available so if it is written to in one place, it can be read somewhere else.\r\n */\r\nclass GlobalVariables{\r\n    /**\r\n     * The constructor creates a new instance of the Global Variables object.\r\n     */\r\n    constructor(){\r\n        /** \r\n         * The canvas object on which the atoms are drawn.\r\n         * @type {object}\r\n         */\r\n        this.canvas = null\r\n        /** \r\n         * The 2D reference to the canvas object on which the atoms are drawn.\r\n         * @type {object}\r\n         */\r\n        this.c = null\r\n        /** \r\n        * An array of all of the available types of atoms which can be placed with a right click.\r\n        * @type {array}\r\n        */\r\n        this.availableTypes = {\r\n        \r\n            box:                {creator: Box, atomType: 'Box'},\r\n            \r\n            intersection:       {creator: Intersection, atomType: 'Intersection', atomCategory: 'Interactions'},\r\n            difference:         {creator: Difference, atomType: 'Difference', atomCategory: 'Interactions'},\r\n            assembly:           {creator: Assembly, atomType: 'Assembly', atomCategory: 'Interactions'},\r\n            union:              {creator: Group, atomType: 'Union', atomCategory: 'None'},\r\n            group:              {creator: Group, atomType: 'Group', atomCategory: 'None'},\r\n            shrinkwrap:         {creator: ShrinkWrap, atomType: 'ShrinkWrap', atomCategory: 'Interactions'},\r\n            \r\n            \r\n            readme:             {creator: Readme, atomType: 'Readme', atomCategory: 'Tags'},\r\n            addBOMTag:          {creator: AddBOMTag, atomType: 'Add-BOM-Tag', atomCategory: 'Tags'},\r\n            color:              {creator: Color, atomType: 'Color', atomCategory: 'Tags'},\r\n            tag:                {creator: Tag, atomType: 'Tag', atomCategory: 'Tags'},\r\n            extracttag:         {creator: ExtractTag, atomType: 'ExtractTag', atomCategory: 'Tags'},\r\n            cutLayout:          {creator: CutLayout, atomType: 'CutLayout', atomCategory: 'Tags'},\r\n            CutList:            {creator: CutList, atomType: 'CutList', atomCategory: 'Tags'},\r\n\r\n\r\n            \r\n            regularPolygon:     {creator: RegularPolygon, atomType: 'RegularPolygon', atomCategory: 'Shapes'},\r\n            costant:            {creator: Constant, atomType: 'Constant', atomCategory: 'Inputs'},\r\n            circle:             {creator: Circle, atomType: 'Circle', atomCategory: 'Shapes'},\r\n            rectangle:          {creator: Rectangle, atomType: 'Rectangle', atomCategory: 'Shapes'},\r\n            molecule:           {creator: Molecule, atomType: 'Molecule', atomCategory: 'Shapes'},\r\n            input:              {creator: Input, atomType: 'Input', atomCategory: 'Inputs'},\r\n            equation:           {creator: Equation, atomType: 'Equation', atomCategory: 'Inputs'},\r\n            code:               {creator: Code, atomType: 'Code', atomCategory: 'Inputs'},\r\n            \r\n            rotate:             {creator: Rotate, atomType: 'Rotate', atomCategory: 'Actions'},\r\n            extrude:            {creator: Extrude, atomType: 'Extrude', atomCategory: 'Actions'},\r\n            move:               {creator: Move, atomType: 'Move', atomCategory: 'Actions'},\r\n            translate:          {creator: Move, atomType: 'Translate', atomCategory: 'none'},\r\n            GeneticAlgorithm:   {creator: GeneticAlgorithm, atomType: 'GeneticAlgorithm', atomCategory: 'Actions'},\r\n\r\n            stl:                {creator: Stl, atomType: 'Stl', atomCategory: 'Export'},\r\n            svg:                {creator: Svg, atomType: 'Svg', atomCategory: 'Export'},\r\n            //nest:               {creator: Nest, atomType: 'Nest', atomCategory: 'Export'},\r\n            gcode:              {creator: Gcode, atomType: 'Gcode', atomCategory: 'Export'},\r\n            uploadSVG:          {creator: UploadSVG, atomType: 'UploadSVG', atomCategory: 'Export'},\r\n            githubmolecule:     {creator: GitHubMolecule, atomType: 'GitHubMolecule', atomCategory: 'Inputs'},\r\n\r\n            output:             {creator: Output, atomType: 'Output'}\r\n        }\r\n        /** \r\n         * A reference to the molecule curently being displayed on the screen.\r\n         * @type {object}\r\n         */\r\n        this.currentMolecule\r\n        /** \r\n         * A reference to the top level molecule of the project.\r\n         * @type {object}\r\n         */\r\n        this.topLevelMolecule\r\n        /** \r\n         * A flag to indicate if the program is running in run mode (ie a shared link).\r\n         * @type {boolean}\r\n         */\r\n        this.runMode = false\r\n        /** \r\n         * A flag to indicate if the program is running with a touch interface. Set in flowDraw.js.\r\n         * @type {boolean}\r\n         */\r\n        this.touchInterface = false\r\n        /** \r\n         * The github object which is used to interact with GitHub.\r\n         * @type {object}\r\n         */\r\n        this.gitHub = new GitHubModule()\r\n        /** \r\n         * A total of the number of atoms in this project\r\n         * @type {integer}\r\n         */\r\n        this.totalAtomCount = 0\r\n        /** \r\n         * A counter used during the loading process to keep track of how many atoms are still to be loaded.\r\n         * @type {integer}\r\n         */\r\n        this.numberOfAtomsToLoad = 0\r\n        /** \r\n         * A flag to indicate if the project is a fork.\r\n         * @type {boolean}\r\n         */\r\n        this.fork = false\r\n        /** \r\n         * A flag to indicate if command is pressed\r\n         * @type {boolean}\r\n         */\r\n        this.ctrlDown = false\r\n        /** \r\n         * A variable to save array to be copied\r\n         * @type {array}\r\n         */\r\n        this.atomsSelected = []\r\n        /** \r\n         * The size (in mm) of segments to use for circles.\r\n         * @type {number}\r\n         */\r\n        this.circleSegmentSize = 2\r\n        /** \r\n         * A flag to indicate if a display value is currently being processed.\r\n         * @type {bool}\r\n         */\r\n        this.displayProcessing = false\r\n        /** \r\n         * The function to call to cancel the processing of the prevous display value.\r\n         * @type {function}\r\n         */\r\n        this.cancelLastDisplayWorker = function(){}\r\n        /** \r\n         * The last path displayed. Used for updating the display when the controls change.\r\n         * @type {string}\r\n         */\r\n        this.displayedPath = \"\"\r\n        /** \r\n         * A list of all of the paths in this project which can be read from memory\r\n         * @type {array}\r\n         */\r\n        this.availablePaths = []\r\n        /** \r\n         * A flag to indicate if a grid should be displayed behind the shape\r\n         * @type {boolean}\r\n         */\r\n        this.displayGrid = true\r\n        /** \r\n         * A flag to indicate if the edges of the shape should be displayed.\r\n         * @type {boolean}\r\n         */\r\n        this.displayAxis = true\r\n        /** \r\n         * A flag to indicate if the display should show axis.\r\n         * @type {boolean}\r\n         */\r\n        this.displayTriangles = true\r\n        /** \r\n         * A flag to indicate if the faces of the shape should be displayed.\r\n         * @type {boolean}\r\n         */\r\n        this.displayEdges = true\r\n         \r\n        const math = create(all)  //What does this do? I think it is used to evalue strings as math\r\n        /** \r\n         * An evaluator for strings as mathmatical equations which is sandboxed and secure.\r\n         * @type {function}\r\n         */\r\n        this.limitedEvaluate = math.evaluate\r\n        math.import({\r\n            'import':     function () { throw new Error('Function import is disabled') },\r\n            'createUnit': function () { throw new Error('Function createUnit is disabled') },\r\n            'evaluate':   function () { throw new Error('Function evaluate is disabled') },\r\n            'parse':      function () { throw new Error('Function parse is disabled') },\r\n            'simplify':   function () { throw new Error('Function simplify is disabled') },\r\n            'derivative': function () { throw new Error('Function derivative is disabled') }\r\n        }, { override: true })\r\n    }\r\n\r\n    /** \r\n    * A function to generate a pixel value for 0-1 location on screen depending on screen width\r\n    * @param {number} width 0-1 \r\n    */\r\n    widthToPixels(width){\r\n        width = Math.min(width, 1) //Constrain the position to be a max of 1\r\n        let pixels = this.canvas.width * width\r\n        return pixels\r\n    }\r\n    /** \r\n    * A function to generate a 0-1 value from pixels for location on screen depending on screen width\r\n    * @param {number} width 0-1 \r\n    */\r\n    pixelsToWidth(pixels){\r\n        let width = 1 /(this.canvas.width / pixels)\r\n        return width\r\n    }\r\n    /** \r\n    * A function to generate a pixel value for 0-1 location on screen depending on screen height\r\n    * @param {number} width 0-1 \r\n    */\r\n    heightToPixels(height){\r\n        height = Math.min(height, 1) //Constrain the position of the max value to be 1\r\n        let pixels = this.canvas.height * height\r\n        return pixels\r\n    }\r\n    /** \r\n    * A function which reads from a path and displays the geometry it contains\r\n    * @param {string} The path to read from\r\n    */\r\n    writeToDisplay(path, resetView = false){\r\n        \r\n        this.displayedPath = path\r\n        \r\n        // Cancel the last write to display if there is one active because this one will replace it\r\n        if(this.displayProcessing){\r\n            this.cancelLastDisplayWorker()\r\n            this.displayProcessing = false\r\n        }\r\n        \r\n        const {answer, terminate} = window.ask({ evaluate: \"md`hello`\", \r\n            op: \"display\", \r\n            readPath: path, \r\n            triangles: this.displayTriangles, \r\n            outline: this.displayEdges, \r\n            wireframe: false \r\n        })\r\n        \r\n        answer.then( result => {\r\n            \r\n            this.displayProcessing = false\r\n            document.getElementById('viewerContext').style.filter=\"sepia(0%)\"\r\n            \r\n            if(result && result != -1){\r\n                window.updateDisplay(result)\r\n                window.showGrid(this.displayGrid)\r\n                if(resetView){\r\n                    window.updateFit()\r\n                }\r\n            }\r\n        }).catch ((e) => console.warn(e))\r\n        \r\n        this.displayProcessing = true\r\n        document.getElementById('viewerContext').style.filter=\"sepia(100%)\"\r\n        \r\n        /** \r\n        * A function which cancels the worker processing display when called\r\n        */\r\n        this.cancelLastDisplayWorker = terminate\r\n    }\r\n    /** \r\n    * A function to generate a 0-1 value from pixels for location on screen depending on screen height\r\n    * @param {number} width 0-1 \r\n    */\r\n    pixelsToHeight(pixels){\r\n        let height = 1 /(this.canvas.height / pixels)\r\n        return height\r\n    }\r\n    \r\n    /** \r\n     * A function to generate a unique ID value. Currently uses random which does not gurintee that it will be unique.\r\n     */\r\n    generateUniqueID(){\r\n        return Math.floor(Math.random()*900000) + 100000\r\n    }\r\n    \r\n    /**\r\n     * Computes the distance between two points on a plane. This is a duplicate of the one in utils which should probably be deleted.\r\n     * @param {number} x1 - The x cordinate of the first point.\r\n     * @param {number} x2 - The x cordinate of the second point.\r\n     * @param {number} y1 - The y cordinate of the first point.\r\n     * @param {number} y2 - The y cordinate of the second point.\r\n     */ \r\n    distBetweenPoints(x1, x2, y1, y2){\r\n        var a2 = Math.pow(x1 - x2, 2)\r\n        var b2 = Math.pow(y1 - y2, 2)\r\n        var dist = Math.sqrt(a2 + b2)\r\n        \r\n        return dist\r\n    }\r\n\r\n\r\n}\r\n\r\n/**\r\n * Because we want global variables to be the same every time it is imported we export an instance of global variables instead of the constructor.\r\n */\r\nexport default (new GlobalVariables)",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/globalvariables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "GlobalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~GlobalVariables",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/globalvariables.js",
    "importStyle": null,
    "description": "This class defines things which are made available to all objects which import it. It is a singlton which means that each time it is imported the same instance is made available so if it is written to in one place, it can be read somewhere else.",
    "lineNumber": 39,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#constructor",
    "access": "public",
    "description": "The constructor creates a new instance of the Global Variables object.",
    "lineNumber": 43
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#canvas",
    "access": "public",
    "description": "The canvas object on which the atoms are drawn.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "c",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#c",
    "access": "public",
    "description": "The 2D reference to the canvas object on which the atoms are drawn.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "availableTypes",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#availableTypes",
    "access": "public",
    "description": "An array of all of the available types of atoms which can be placed with a right click.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "runMode",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#runMode",
    "access": "public",
    "description": "A flag to indicate if the program is running in run mode (ie a shared link).",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "touchInterface",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#touchInterface",
    "access": "public",
    "description": "A flag to indicate if the program is running with a touch interface. Set in flowDraw.js.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "gitHub",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#gitHub",
    "access": "public",
    "description": "The github object which is used to interact with GitHub.",
    "lineNumber": 128,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "totalAtomCount",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#totalAtomCount",
    "access": "public",
    "description": "A total of the number of atoms in this project",
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "numberOfAtomsToLoad",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#numberOfAtomsToLoad",
    "access": "public",
    "description": "A counter used during the loading process to keep track of how many atoms are still to be loaded.",
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "fork",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#fork",
    "access": "public",
    "description": "A flag to indicate if the project is a fork.",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "ctrlDown",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#ctrlDown",
    "access": "public",
    "description": "A flag to indicate if command is pressed",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "atomsSelected",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#atomsSelected",
    "access": "public",
    "description": "A variable to save array to be copied",
    "lineNumber": 153,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "circleSegmentSize",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#circleSegmentSize",
    "access": "public",
    "description": "The size (in mm) of segments to use for circles.",
    "lineNumber": 158,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "displayProcessing",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayProcessing",
    "access": "public",
    "description": "A flag to indicate if a display value is currently being processed.",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "bool"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "displayedPath",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayedPath",
    "access": "public",
    "description": "The last path displayed. Used for updating the display when the controls change.",
    "lineNumber": 173,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "availablePaths",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#availablePaths",
    "access": "public",
    "description": "A list of all of the paths in this project which can be read from memory",
    "lineNumber": 178,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "displayGrid",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayGrid",
    "access": "public",
    "description": "A flag to indicate if a grid should be displayed behind the shape",
    "lineNumber": 183,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "displayAxis",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayAxis",
    "access": "public",
    "description": "A flag to indicate if the edges of the shape should be displayed.",
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "displayTriangles",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayTriangles",
    "access": "public",
    "description": "A flag to indicate if the display should show axis.",
    "lineNumber": 193,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "displayEdges",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#displayEdges",
    "access": "public",
    "description": "A flag to indicate if the faces of the shape should be displayed.",
    "lineNumber": 198,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "limitedEvaluate",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#limitedEvaluate",
    "access": "public",
    "description": "An evaluator for strings as mathmatical equations which is sandboxed and secure.",
    "lineNumber": 205,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "widthToPixels",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#widthToPixels",
    "access": "public",
    "description": "A function to generate a pixel value for 0-1 location on screen depending on screen width",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "0-1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "pixelsToWidth",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#pixelsToWidth",
    "access": "public",
    "description": "A function to generate a 0-1 value from pixels for location on screen depending on screen width",
    "lineNumber": 229,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "0-1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "heightToPixels",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#heightToPixels",
    "access": "public",
    "description": "A function to generate a pixel value for 0-1 location on screen depending on screen height",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "0-1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "writeToDisplay",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#writeToDisplay",
    "access": "public",
    "description": "A function which reads from a path and displays the geometry it contains",
    "lineNumber": 246,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "path to read from"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "cancelLastDisplayWorker",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#cancelLastDisplayWorker",
    "access": "public",
    "description": "A function which cancels the worker processing display when called",
    "lineNumber": 284,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "pixelsToHeight",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#pixelsToHeight",
    "access": "public",
    "description": "A function to generate a 0-1 value from pixels for location on screen depending on screen height",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "0-1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "generateUniqueID",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#generateUniqueID",
    "access": "public",
    "description": "A function to generate a unique ID value. Currently uses random which does not gurintee that it will be unique.",
    "lineNumber": 298,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "distBetweenPoints",
    "memberof": "src/js/globalvariables.js~GlobalVariables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/globalvariables.js~GlobalVariables#distBetweenPoints",
    "access": "public",
    "description": "Computes the distance between two points on a plane. This is a duplicate of the one in utils which should probably be deleted.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "The x cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "The x cordinate of the second point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "The y cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "The y cordinate of the second point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "globalVariables",
    "memberof": "src/js/globalvariables.js",
    "static": true,
    "longname": "src/js/globalvariables.js~globalVariables",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/globalvariables.js",
    "importStyle": "globalVariables",
    "description": "Because we want global variables to be the same every time it is imported we export an instance of global variables instead of the constructor.",
    "lineNumber": 323,
    "type": {
      "types": [
        "src/js/globalvariables.js~GlobalVariables"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/js/initialPopup.js",
    "content": "",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/initialPopup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/js/licenseOptions.js",
    "content": "\r\n/**\r\n * This class defines the available default licenses when creating a new project\r\n */ \r\nconst licenses = {\r\n    \"CC0\": `Creative Commons Legal Code\r\n\r\nCC0 1.0 Universal\r\n\r\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\r\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\r\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\r\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\r\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\r\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\r\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\r\n    HEREUNDER.\r\n\r\nStatement of Purpose\r\n\r\nThe laws of most jurisdictions throughout the world automatically confer\r\nexclusive Copyright and Related Rights (defined below) upon the creator\r\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\r\nauthorship and/or a database (each, a \"Work\").\r\n\r\nCertain owners wish to permanently relinquish those rights to a Work for\r\nthe purpose of contributing to a commons of creative, cultural and\r\nscientific works (\"Commons\") that the public can reliably and without fear\r\nof later claims of infringement build upon, modify, incorporate in other\r\nworks, reuse and redistribute as freely as possible in any form whatsoever\r\nand for any purposes, including without limitation commercial purposes.\r\nThese owners may contribute to the Commons to promote the ideal of a free\r\nculture and the further production of creative, cultural and scientific\r\nworks, or to gain reputation or greater distribution for their Work in\r\npart through the use and efforts of others.\r\n\r\nFor these and/or other purposes and motivations, and without any\r\nexpectation of additional consideration or compensation, the person\r\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\r\nis an owner of Copyright and Related Rights in the Work, voluntarily\r\nelects to apply CC0 to the Work and publicly distribute the Work under its\r\nterms, with knowledge of his or her Copyright and Related Rights in the\r\nWork and the meaning and intended legal effect of CC0 on those rights.\r\n\r\n1. Copyright and Related Rights. A Work made available under CC0 may be\r\nprotected by copyright and related or neighboring rights (\"Copyright and\r\nRelated Rights\"). Copyright and Related Rights include, but are not\r\nlimited to, the following:\r\n\r\n  i. the right to reproduce, adapt, distribute, perform, display,\r\n     communicate, and translate a Work;\r\n ii. moral rights retained by the original author(s) and/or performer(s);\r\niii. publicity and privacy rights pertaining to a person's image or\r\n     likeness depicted in a Work;\r\n iv. rights protecting against unfair competition in regards to a Work,\r\n     subject to the limitations in paragraph 4(a), below;\r\n  v. rights protecting the extraction, dissemination, use and reuse of data\r\n     in a Work;\r\n vi. database rights (such as those arising under Directive 96/9/EC of the\r\n     European Parliament and of the Council of 11 March 1996 on the legal\r\n     protection of databases, and under any national implementation\r\n     thereof, including any amended or successor version of such\r\n     directive); and\r\nvii. other similar, equivalent or corresponding rights throughout the\r\n     world based on applicable law or treaty, and any national\r\n     implementations thereof.\r\n\r\n2. Waiver. To the greatest extent permitted by, but not in contravention\r\nof, applicable law, Affirmer hereby overtly, fully, permanently,\r\nirrevocably and unconditionally waives, abandons, and surrenders all of\r\nAffirmer's Copyright and Related Rights and associated claims and causes\r\nof action, whether now known or unknown (including existing as well as\r\nfuture claims and causes of action), in the Work (i) in all territories\r\nworldwide, (ii) for the maximum duration provided by applicable law or\r\ntreaty (including future time extensions), (iii) in any current or future\r\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\r\nincluding without limitation commercial, advertising or promotional\r\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\r\nmember of the public at large and to the detriment of Affirmer's heirs and\r\nsuccessors, fully intending that such Waiver shall not be subject to\r\nrevocation, rescission, cancellation, termination, or any other legal or\r\nequitable action to disrupt the quiet enjoyment of the Work by the public\r\nas contemplated by Affirmer's express Statement of Purpose.\r\n\r\n3. Public License Fallback. Should any part of the Waiver for any reason\r\nbe judged legally invalid or ineffective under applicable law, then the\r\nWaiver shall be preserved to the maximum extent permitted taking into\r\naccount Affirmer's express Statement of Purpose. In addition, to the\r\nextent the Waiver is so judged Affirmer hereby grants to each affected\r\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\r\nirrevocable and unconditional license to exercise Affirmer's Copyright and\r\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\r\nmaximum duration provided by applicable law or treaty (including future\r\ntime extensions), (iii) in any current or future medium and for any number\r\nof copies, and (iv) for any purpose whatsoever, including without\r\nlimitation commercial, advertising or promotional purposes (the\r\n\"License\"). The License shall be deemed effective as of the date CC0 was\r\napplied by Affirmer to the Work. Should any part of the License for any\r\nreason be judged legally invalid or ineffective under applicable law, such\r\npartial invalidity or ineffectiveness shall not invalidate the remainder\r\nof the License, and in such case Affirmer hereby affirms that he or she\r\nwill not (i) exercise any of his or her remaining Copyright and Related\r\nRights in the Work or (ii) assert any associated claims and causes of\r\naction with respect to the Work, in either case contrary to Affirmer's\r\nexpress Statement of Purpose.\r\n\r\n4. Limitations and Disclaimers.\r\n\r\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\r\n    surrendered, licensed or otherwise affected by this document.\r\n b. Affirmer offers the Work as-is and makes no representations or\r\n    warranties of any kind concerning the Work, express, implied,\r\n    statutory or otherwise, including without limitation warranties of\r\n    title, merchantability, fitness for a particular purpose, non\r\n    infringement, or the absence of latent or other defects, accuracy, or\r\n    the present or absence of errors, whether or not discoverable, all to\r\n    the greatest extent permissible under applicable law.\r\n c. Affirmer disclaims responsibility for clearing rights of other persons\r\n    that may apply to the Work or any use thereof, including without\r\n    limitation any person's Copyright and Related Rights in the Work.\r\n    Further, Affirmer disclaims responsibility for obtaining any necessary\r\n    consents, permissions or other rights required for any use of the\r\n    Work.\r\n d. Affirmer understands and acknowledges that Creative Commons is not a\r\n    party to this document and has no duty or obligation with respect to\r\n    this CC0 or use of the Work.`,\r\n    \"CC-BY\": `Attribution 4.0 International\r\n\r\n=======================================================================\r\n\r\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\r\ndoes not provide legal services or legal advice. Distribution of\r\nCreative Commons public licenses does not create a lawyer-client or\r\nother relationship. Creative Commons makes its licenses and related\r\ninformation available on an \"as-is\" basis. Creative Commons gives no\r\nwarranties regarding its licenses, any material licensed under their\r\nterms and conditions, or any related information. Creative Commons\r\ndisclaims all liability for damages resulting from their use to the\r\nfullest extent possible.\r\n\r\nUsing Creative Commons Public Licenses\r\n\r\nCreative Commons public licenses provide a standard set of terms and\r\nconditions that creators and other rights holders may use to share\r\noriginal works of authorship and other material subject to copyright\r\nand certain other rights specified in the public license below. The\r\nfollowing considerations are for informational purposes only, are not\r\nexhaustive, and do not form part of our licenses.\r\n\r\n     Considerations for licensors: Our public licenses are\r\n     intended for use by those authorized to give the public\r\n     permission to use material in ways otherwise restricted by\r\n     copyright and certain other rights. Our licenses are\r\n     irrevocable. Licensors should read and understand the terms\r\n     and conditions of the license they choose before applying it.\r\n     Licensors should also secure all rights necessary before\r\n     applying our licenses so that the public can reuse the\r\n     material as expected. Licensors should clearly mark any\r\n     material not subject to the license. This includes other CC-\r\n     licensed material, or material used under an exception or\r\n     limitation to copyright. More considerations for licensors:\r\n\twiki.creativecommons.org/Considerations_for_licensors\r\n\r\n     Considerations for the public: By using one of our public\r\n     licenses, a licensor grants the public permission to use the\r\n     licensed material under specified terms and conditions. If\r\n     the licensor's permission is not necessary for any reason--for\r\n     example, because of any applicable exception or limitation to\r\n     copyright--then that use is not regulated by the license. Our\r\n     licenses grant only permissions under copyright and certain\r\n     other rights that a licensor has authority to grant. Use of\r\n     the licensed material may still be restricted for other\r\n     reasons, including because others have copyright or other\r\n     rights in the material. A licensor may make special requests,\r\n     such as asking that all changes be marked or described.\r\n     Although not required by our licenses, you are encouraged to\r\n     respect those requests where reasonable. More_considerations\r\n     for the public:\r\n\twiki.creativecommons.org/Considerations_for_licensees\r\n\r\n=======================================================================\r\n\r\nCreative Commons Attribution 4.0 International Public License\r\n\r\nBy exercising the Licensed Rights (defined below), You accept and agree\r\nto be bound by the terms and conditions of this Creative Commons\r\nAttribution 4.0 International Public License (\"Public License\"). To the\r\nextent this Public License may be interpreted as a contract, You are\r\ngranted the Licensed Rights in consideration of Your acceptance of\r\nthese terms and conditions, and the Licensor grants You such rights in\r\nconsideration of benefits the Licensor receives from making the\r\nLicensed Material available under these terms and conditions.\r\n\r\n\r\nSection 1 -- Definitions.\r\n\r\n  a. Adapted Material means material subject to Copyright and Similar\r\n     Rights that is derived from or based upon the Licensed Material\r\n     and in which the Licensed Material is translated, altered,\r\n     arranged, transformed, or otherwise modified in a manner requiring\r\n     permission under the Copyright and Similar Rights held by the\r\n     Licensor. For purposes of this Public License, where the Licensed\r\n     Material is a musical work, performance, or sound recording,\r\n     Adapted Material is always produced where the Licensed Material is\r\n     synched in timed relation with a moving image.\r\n\r\n  b. Adapter's License means the license You apply to Your Copyright\r\n     and Similar Rights in Your contributions to Adapted Material in\r\n     accordance with the terms and conditions of this Public License.\r\n\r\n  c. Copyright and Similar Rights means copyright and/or similar rights\r\n     closely related to copyright including, without limitation,\r\n     performance, broadcast, sound recording, and Sui Generis Database\r\n     Rights, without regard to how the rights are labeled or\r\n     categorized. For purposes of this Public License, the rights\r\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\r\n     Rights.\r\n\r\n  d. Effective Technological Measures means those measures that, in the\r\n     absence of proper authority, may not be circumvented under laws\r\n     fulfilling obligations under Article 11 of the WIPO Copyright\r\n     Treaty adopted on December 20, 1996, and/or similar international\r\n     agreements.\r\n\r\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\r\n     any other exception or limitation to Copyright and Similar Rights\r\n     that applies to Your use of the Licensed Material.\r\n\r\n  f. Licensed Material means the artistic or literary work, database,\r\n     or other material to which the Licensor applied this Public\r\n     License.\r\n\r\n  g. Licensed Rights means the rights granted to You subject to the\r\n     terms and conditions of this Public License, which are limited to\r\n     all Copyright and Similar Rights that apply to Your use of the\r\n     Licensed Material and that the Licensor has authority to license.\r\n\r\n  h. Licensor means the individual(s) or entity(ies) granting rights\r\n     under this Public License.\r\n\r\n  i. Share means to provide material to the public by any means or\r\n     process that requires permission under the Licensed Rights, such\r\n     as reproduction, public display, public performance, distribution,\r\n     dissemination, communication, or importation, and to make material\r\n     available to the public including in ways that members of the\r\n     public may access the material from a place and at a time\r\n     individually chosen by them.\r\n\r\n  j. Sui Generis Database Rights means rights other than copyright\r\n     resulting from Directive 96/9/EC of the European Parliament and of\r\n     the Council of 11 March 1996 on the legal protection of databases,\r\n     as amended and/or succeeded, as well as other essentially\r\n     equivalent rights anywhere in the world.\r\n\r\n  k. You means the individual or entity exercising the Licensed Rights\r\n     under this Public License. Your has a corresponding meaning.\r\n\r\n\r\nSection 2 -- Scope.\r\n\r\n  a. License grant.\r\n\r\n       1. Subject to the terms and conditions of this Public License,\r\n          the Licensor hereby grants You a worldwide, royalty-free,\r\n          non-sublicensable, non-exclusive, irrevocable license to\r\n          exercise the Licensed Rights in the Licensed Material to:\r\n\r\n            a. reproduce and Share the Licensed Material, in whole or\r\n               in part; and\r\n\r\n            b. produce, reproduce, and Share Adapted Material.\r\n\r\n       2. Exceptions and Limitations. For the avoidance of doubt, where\r\n          Exceptions and Limitations apply to Your use, this Public\r\n          License does not apply, and You do not need to comply with\r\n          its terms and conditions.\r\n\r\n       3. Term. The term of this Public License is specified in Section\r\n          6(a).\r\n\r\n       4. Media and formats; technical modifications allowed. The\r\n          Licensor authorizes You to exercise the Licensed Rights in\r\n          all media and formats whether now known or hereafter created,\r\n          and to make technical modifications necessary to do so. The\r\n          Licensor waives and/or agrees not to assert any right or\r\n          authority to forbid You from making technical modifications\r\n          necessary to exercise the Licensed Rights, including\r\n          technical modifications necessary to circumvent Effective\r\n          Technological Measures. For purposes of this Public License,\r\n          simply making modifications authorized by this Section 2(a)\r\n          (4) never produces Adapted Material.\r\n\r\n       5. Downstream recipients.\r\n\r\n            a. Offer from the Licensor -- Licensed Material. Every\r\n               recipient of the Licensed Material automatically\r\n               receives an offer from the Licensor to exercise the\r\n               Licensed Rights under the terms and conditions of this\r\n               Public License.\r\n\r\n            b. No downstream restrictions. You may not offer or impose\r\n               any additional or different terms or conditions on, or\r\n               apply any Effective Technological Measures to, the\r\n               Licensed Material if doing so restricts exercise of the\r\n               Licensed Rights by any recipient of the Licensed\r\n               Material.\r\n\r\n       6. No endorsement. Nothing in this Public License constitutes or\r\n          may be construed as permission to assert or imply that You\r\n          are, or that Your use of the Licensed Material is, connected\r\n          with, or sponsored, endorsed, or granted official status by,\r\n          the Licensor or others designated to receive attribution as\r\n          provided in Section 3(a)(1)(A)(i).\r\n\r\n  b. Other rights.\r\n\r\n       1. Moral rights, such as the right of integrity, are not\r\n          licensed under this Public License, nor are publicity,\r\n          privacy, and/or other similar personality rights; however, to\r\n          the extent possible, the Licensor waives and/or agrees not to\r\n          assert any such rights held by the Licensor to the limited\r\n          extent necessary to allow You to exercise the Licensed\r\n          Rights, but not otherwise.\r\n\r\n       2. Patent and trademark rights are not licensed under this\r\n          Public License.\r\n\r\n       3. To the extent possible, the Licensor waives any right to\r\n          collect royalties from You for the exercise of the Licensed\r\n          Rights, whether directly or through a collecting society\r\n          under any voluntary or waivable statutory or compulsory\r\n          licensing scheme. In all other cases the Licensor expressly\r\n          reserves any right to collect such royalties.\r\n\r\n\r\nSection 3 -- License Conditions.\r\n\r\nYour exercise of the Licensed Rights is expressly made subject to the\r\nfollowing conditions.\r\n\r\n  a. Attribution.\r\n\r\n       1. If You Share the Licensed Material (including in modified\r\n          form), You must:\r\n\r\n            a. retain the following if it is supplied by the Licensor\r\n               with the Licensed Material:\r\n\r\n                 i. identification of the creator(s) of the Licensed\r\n                    Material and any others designated to receive\r\n                    attribution, in any reasonable manner requested by\r\n                    the Licensor (including by pseudonym if\r\n                    designated);\r\n\r\n                ii. a copyright notice;\r\n\r\n               iii. a notice that refers to this Public License;\r\n\r\n                iv. a notice that refers to the disclaimer of\r\n                    warranties;\r\n\r\n                 v. a URI or hyperlink to the Licensed Material to the\r\n                    extent reasonably practicable;\r\n\r\n            b. indicate if You modified the Licensed Material and\r\n               retain an indication of any previous modifications; and\r\n\r\n            c. indicate the Licensed Material is licensed under this\r\n               Public License, and include the text of, or the URI or\r\n               hyperlink to, this Public License.\r\n\r\n       2. You may satisfy the conditions in Section 3(a)(1) in any\r\n          reasonable manner based on the medium, means, and context in\r\n          which You Share the Licensed Material. For example, it may be\r\n          reasonable to satisfy the conditions by providing a URI or\r\n          hyperlink to a resource that includes the required\r\n          information.\r\n\r\n       3. If requested by the Licensor, You must remove any of the\r\n          information required by Section 3(a)(1)(A) to the extent\r\n          reasonably practicable.\r\n\r\n       4. If You Share Adapted Material You produce, the Adapter's\r\n          License You apply must not prevent recipients of the Adapted\r\n          Material from complying with this Public License.\r\n\r\n\r\nSection 4 -- Sui Generis Database Rights.\r\n\r\nWhere the Licensed Rights include Sui Generis Database Rights that\r\napply to Your use of the Licensed Material:\r\n\r\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\r\n     to extract, reuse, reproduce, and Share all or a substantial\r\n     portion of the contents of the database;\r\n\r\n  b. if You include all or a substantial portion of the database\r\n     contents in a database in which You have Sui Generis Database\r\n     Rights, then the database in which You have Sui Generis Database\r\n     Rights (but not its individual contents) is Adapted Material; and\r\n\r\n  c. You must comply with the conditions in Section 3(a) if You Share\r\n     all or a substantial portion of the contents of the database.\r\n\r\nFor the avoidance of doubt, this Section 4 supplements and does not\r\nreplace Your obligations under this Public License where the Licensed\r\nRights include other Copyright and Similar Rights.\r\n\r\n\r\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\r\n\r\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\r\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\r\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\r\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\r\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\r\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\r\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\r\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\r\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\r\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\r\n\r\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\r\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\r\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\r\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\r\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\r\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\r\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\r\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\r\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\r\n\r\n  c. The disclaimer of warranties and limitation of liability provided\r\n     above shall be interpreted in a manner that, to the extent\r\n     possible, most closely approximates an absolute disclaimer and\r\n     waiver of all liability.\r\n\r\n\r\nSection 6 -- Term and Termination.\r\n\r\n  a. This Public License applies for the term of the Copyright and\r\n     Similar Rights licensed here. However, if You fail to comply with\r\n     this Public License, then Your rights under this Public License\r\n     terminate automatically.\r\n\r\n  b. Where Your right to use the Licensed Material has terminated under\r\n     Section 6(a), it reinstates:\r\n\r\n       1. automatically as of the date the violation is cured, provided\r\n          it is cured within 30 days of Your discovery of the\r\n          violation; or\r\n\r\n       2. upon express reinstatement by the Licensor.\r\n\r\n     For the avoidance of doubt, this Section 6(b) does not affect any\r\n     right the Licensor may have to seek remedies for Your violations\r\n     of this Public License.\r\n\r\n  c. For the avoidance of doubt, the Licensor may also offer the\r\n     Licensed Material under separate terms or conditions or stop\r\n     distributing the Licensed Material at any time; however, doing so\r\n     will not terminate this Public License.\r\n\r\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\r\n     License.\r\n\r\n\r\nSection 7 -- Other Terms and Conditions.\r\n\r\n  a. The Licensor shall not be bound by any additional or different\r\n     terms or conditions communicated by You unless expressly agreed.\r\n\r\n  b. Any arrangements, understandings, or agreements regarding the\r\n     Licensed Material not stated herein are separate from and\r\n     independent of the terms and conditions of this Public License.\r\n\r\n\r\nSection 8 -- Interpretation.\r\n\r\n  a. For the avoidance of doubt, this Public License does not, and\r\n     shall not be interpreted to, reduce, limit, restrict, or impose\r\n     conditions on any use of the Licensed Material that could lawfully\r\n     be made without permission under this Public License.\r\n\r\n  b. To the extent possible, if any provision of this Public License is\r\n     deemed unenforceable, it shall be automatically reformed to the\r\n     minimum extent necessary to make it enforceable. If the provision\r\n     cannot be reformed, it shall be severed from this Public License\r\n     without affecting the enforceability of the remaining terms and\r\n     conditions.\r\n\r\n  c. No term or condition of this Public License will be waived and no\r\n     failure to comply consented to unless expressly agreed to by the\r\n     Licensor.\r\n\r\n  d. Nothing in this Public License constitutes or may be interpreted\r\n     as a limitation upon, or waiver of, any privileges and immunities\r\n     that apply to the Licensor or You, including from the legal\r\n     processes of any jurisdiction or authority.\r\n\r\n\r\n=======================================================================\r\n\r\nCreative Commons is not a party to its public\r\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\r\nits public licenses to material it publishes and in those instances\r\nwill be considered the “Licensor.” The text of the Creative Commons\r\npublic licenses is dedicated to the public domain under the CC0 Public\r\nDomain Dedication. Except for the limited purpose of indicating that\r\nmaterial is shared under a Creative Commons public license or as\r\notherwise permitted by the Creative Commons policies published at\r\ncreativecommons.org/policies, Creative Commons does not authorize the\r\nuse of the trademark \"Creative Commons\" or any other trademark or logo\r\nof Creative Commons without its prior written consent including,\r\nwithout limitation, in connection with any unauthorized modifications\r\nto any of its public licenses or any other arrangements,\r\nunderstandings, or agreements concerning use of licensed material. For\r\nthe avoidance of doubt, this paragraph does not form part of the\r\npublic licenses.\r\n\r\nCreative Commons may be contacted at creativecommons.org.`\r\n}\r\n\r\nexport { licenses }",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/licenseOptions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "licenses",
    "memberof": "src/js/licenseOptions.js",
    "static": true,
    "longname": "src/js/licenseOptions.js~licenses",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/licenseOptions.js",
    "importStyle": "{licenses}",
    "description": "This class defines the available default licenses when creating a new project",
    "lineNumber": 5,
    "type": {
      "types": [
        "{\"CC0\": *, \"CC-BY\": *}"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/js/molecules/assembly.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the Assembly atom instance.\r\n */\r\nexport default class Assembly extends Atom{\r\n    /**\r\n    * Creates a new assembly atom.\r\n    * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\r\n    */\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Assembly'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Assembly'\r\n        /**\r\n         * A list of all of the inputs to this molecule. May be loaded when the molecule is created.\r\n         * @type {array}\r\n         */\r\n        this.ioValues = []\r\n        /**\r\n         * A flag to determine if cutaway geometry is removed....not used anymore?\r\n         * @type {boolean}\r\n         */\r\n        this.removeCutawayGeometry = true\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Assembles multiple shapes together into one. Shapes higher in the inputs list will cut into shapes lower on the input list where they overlap.\"\r\n        \r\n        this.setValues(values)\r\n        \r\n        //This loads any inputs which this atom had when last saved.\r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n\r\n\r\n        this.setValues([])\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Add or delete ports as needed in addition to the normal begin propogation stuff\r\n     */ \r\n    beginPropagation(){\r\n        \r\n        addOrDeletePorts(this)  //Add or remove ports as needed\r\n        \r\n        super.beginPropagation()\r\n    }\r\n\r\n    /**\r\n     * Draw the assembly icon\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.lineJoin = \"round\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n\r\n    /**\r\n    * Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the assembly.\r\n    */ \r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            try{\r\n                var inputValues = []\r\n                this.inputs.forEach( io => {\r\n                    if(io.connectors.length > 0 && io.type == 'input'){\r\n                        inputValues.push(io.getValue())\r\n                    }\r\n                })\r\n                \r\n                const values = { op: \"assembly\", paths: inputValues, writePath: this.path }\r\n                this.basicThreadValueProcessing(values)\r\n                this.clearAlert()\r\n            }catch(err){this.setAlert(err)}\r\n            \r\n            //Delete or add ports as needed\r\n            addOrDeletePorts(this)\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.\r\n    */ \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.connectors.length > 0){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        thisAsObject.ioValues = ioValues\r\n        \r\n        return thisAsObject\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/assembly.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "Assembly",
    "memberof": "src/js/molecules/assembly.js",
    "static": true,
    "longname": "src/js/molecules/assembly.js~Assembly",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/assembly.js",
    "importStyle": "Assembly",
    "description": "This class creates the Assembly atom instance.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#constructor",
    "access": "public",
    "description": "Creates a new assembly atom.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be loaded when the molecule is created.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "removeCutawayGeometry",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#removeCutawayGeometry",
    "access": "public",
    "description": "A flag to determine if cutaway geometry is removed....not used anymore?",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#beginPropagation",
    "access": "public",
    "description": "Add or delete ports as needed in addition to the normal begin propogation stuff",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#draw",
    "access": "public",
    "description": "Draw the assembly icon",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#updateValue",
    "access": "public",
    "description": "Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the assembly.",
    "lineNumber": 107,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/assembly.js~Assembly",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/assembly.js~Assembly#serialize",
    "access": "public",
    "description": "Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.",
    "lineNumber": 130,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/js/molecules/BOM.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport {BOMEntry} from '../BOM.js'\r\n\r\n/**\r\n * The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way\r\n */\r\nexport default class AddBOMTag extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Add BOM Tag'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'addBOMTag'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Add BOM Tag'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Adds a Bill Of Materials tag which appears in molecules containing this atom and in the GitHub project bill of materials.\"\r\n        \r\n        /**\r\n         * The BOM item object created by this atom\r\n         * @type {string}\r\n         */\r\n        this.BOMitem = new BOMEntry()\r\n        /** \r\n         * This atom's radius as displayed on the screen is 1/65 width\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/65\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null, false, true)\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Set the value to be the BOMitem\r\n     */ \r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            try{\r\n                var inputPath = this.findIOValue('geometry')\r\n                const values = {op: \"item\", tag: JSON.stringify(this.BOMitem), readPath: inputPath, writePath: this.path }\r\n                this.basicThreadValueProcessing(values)\r\n                this.clearAlert()\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n    }\r\n        \r\n    /**\r\n     * Updates the side bar to display the BOM item information\r\n     */ \r\n    updateSidebar(){\r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createBOM(valueList)\r\n    }\r\n    \r\n    /**\r\n     * Draw the constant which is more rectangular than the regular shape.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\") \r\n\r\n        let pixelsX = GlobalVariables.widthToPixels(this.x)\r\n        let pixelsY = GlobalVariables.heightToPixels(this.y)\r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height = pixelsRadius/1.3\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius/1.5}px Work Sans Bold`\r\n        GlobalVariables.c.fillText(String.fromCharCode(0x0024,0x0024,0x0024), pixelsX - pixelsRadius/2, pixelsY +this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n    }\r\n    \r\n    /**\r\n     * Creates an editable UI representation of the bom list. \r\n     * @param {Object} list - list is an object to which the generated HTML element will be appended\r\n     */ \r\n    createBOM(list){\r\n        \r\n        list.appendChild(document.createElement('br'))\r\n        list.appendChild(document.createElement('br'))\r\n        \r\n        var div = document.createElement('h3')\r\n        div.setAttribute('style','text-align:center;')\r\n        list.appendChild(div)\r\n        var valueText = document.createTextNode('Bill Of Materials Entry')\r\n        div.appendChild(valueText)\r\n        \r\n        var x = document.createElement('HR')\r\n        list.appendChild(x)\r\n        \r\n        this.createEditableValueListItem(list,this.BOMitem,'BOMitemName', 'Item', false, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'numberNeeded', 'Number', true, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'costUSD', 'Price', true, () => this.updateValue())\r\n        this.createEditableValueListItem(list,this.BOMitem,'source', 'Source', false,() => this.updateValue())\r\n        x = document.createElement('HR')\r\n        list.appendChild(x)\r\n    }\r\n    \r\n    /**\r\n     * Add the bom item to the saved object\r\n     */\r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.BOMitem = Object.assign({}, this.BOMitem) //Makes a shallow copy to prevent issues when copy pasting\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/BOM.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "AddBOMTag",
    "memberof": "src/js/molecules/BOM.js",
    "static": true,
    "longname": "src/js/molecules/BOM.js~AddBOMTag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/BOM.js",
    "importStyle": "AddBOMTag",
    "description": "The addBOMTag molecule type adds a tag containing information about a bill of materials item to the input geometry. The input geometry is not modified in any other way",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "BOMitem",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#BOMitem",
    "access": "public",
    "description": "The BOM item object created by this atom",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen is 1/65 width",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#updateValue",
    "access": "public",
    "description": "Set the value to be the BOMitem",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to display the BOM item information",
    "lineNumber": 75,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "createBOM",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#createBOM",
    "access": "public",
    "description": "Creates an editable UI representation of the bom list. ",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "list is an object to which the generated HTML element will be appended"
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/BOM.js~AddBOMTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/BOM.js~AddBOMTag#serialize",
    "access": "public",
    "description": "Add the bom item to the saved object",
    "lineNumber": 134,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/js/molecules/box.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class is used for selecting multiple atoms. Probably shouldn't be done like this.\r\n */\r\nexport default class Box extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'box'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Box'\r\n        /**\r\n         * This atom's value\r\n         * @type {object}\r\n         */\r\n        this.value = null\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Box'\r\n        /**\r\n         * This atom's height\r\n         * @type {number}\r\n         */\r\n        this.height = 16\r\n        /**\r\n         * This atom's radius\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/75\r\n\r\n        /**\r\n         * Mouse x position when moving\r\n         * @type {number}\r\n         */\r\n        this.endX\r\n        /**\r\n         * Mouse y position when moving\r\n         * @type {number}\r\n         */\r\n        this.endY\r\n        \r\n        /**\r\n         * Value to save for start position of box\r\n         * @type {number}\r\n         */\r\n        this.startX\r\n        /**\r\n         * Value to save for start position of box\r\n         * @type {number}\r\n         */\r\n        this.startY\r\n\r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Draw the select box shape on the screen.\r\n     */ \r\n    draw() {\r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n       \r\n        //if(GlobalVariables.ctrlDown){\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#80808080'\r\n        GlobalVariables.c.rect(\r\n            xInPixels, \r\n            yInPixels, \r\n            this.endX - xInPixels, \r\n            this.endY - yInPixels)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        //}\r\n        \r\n    }\r\n\r\n    /**\r\n     * When mouse moves and Ctrl is down updates value for box width and height\r\n     */ \r\n    clickMove(x,y){\r\n        // if(GlobalVariables.ctrlDown){\r\n        /**\r\n         * Sets new box end to click target\r\n         * @type {number}\r\n         */ \r\n        this.endX = x\r\n        /**\r\n         * Sets new box end to click target\r\n         * @type {number}\r\n         */\r\n        this.endY= y\r\n        //}\r\n    }\r\n    /**\r\n     * Clears the drawing of box when clickUp and updates values for atom selection\r\n     */ \r\n    clickUp(x,y){  \r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        /**\r\n         * Sets start value to molecule position\r\n         * @type {number}\r\n         */\r\n        this.startX = xInPixels\r\n        /**\r\n         * Sets end value to molecule position\r\n         * @type {number}\r\n         */\r\n        this.startY = yInPixels\r\n        \r\n        this.deleteNode(false, false)\r\n        this.parent.nodesOnTheScreen.forEach(atom => {\r\n            atom.selectBox(this.startX, this.startY, x, y)\r\n        })\r\n    }\r\n\r\n}\r\n\r\n    ",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/box.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "Box",
    "memberof": "src/js/molecules/box.js",
    "static": true,
    "longname": "src/js/molecules/box.js~Box",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/box.js",
    "importStyle": "Box",
    "description": "This class is used for selecting multiple atoms. Probably shouldn't be done like this.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/box.js~Box#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#value",
    "access": "public",
    "description": "This atom's value",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#height",
    "access": "public",
    "description": "This atom's height",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#radius",
    "access": "public",
    "description": "This atom's radius",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/box.js~Box#draw",
    "access": "public",
    "description": "Draw the select box shape on the screen.",
    "lineNumber": 75,
    "params": [],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/box.js~Box#clickMove",
    "access": "public",
    "description": "When mouse moves and Ctrl is down updates value for box width and height",
    "lineNumber": 98,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "endX",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#endX",
    "access": "public",
    "description": "Sets new box end to click target",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "endY",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#endY",
    "access": "public",
    "description": "Sets new box end to click target",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/molecules/box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/box.js~Box#clickUp",
    "access": "public",
    "description": "Clears the drawing of box when clickUp and updates values for atom selection",
    "lineNumber": 115,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "startX",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#startX",
    "access": "public",
    "description": "Sets start value to molecule position",
    "lineNumber": 122,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "startY",
    "memberof": "src/js/molecules/box.js~Box",
    "static": false,
    "longname": "src/js/molecules/box.js~Box#startY",
    "access": "public",
    "description": "Sets end value to molecule position",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/js/molecules/circle.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the circle atom.\r\n */\r\nexport default class Circle extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Circle'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Circle'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Creates a new circle.\"\r\n        \r\n        this.addIO('input', 'diameter', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Starts propagation from this atom if it is not waiting for anything up stream.\r\n     */ \r\n    beginPropagation(force = false){\r\n        //Check to see if a value already exists. Generate it if it doesn't. Only do this for circles and rectangles\r\n        if(!GlobalVariables.availablePaths.includes(this.path)||force){\r\n            //Triggers inputs with nothing connected to begin propagation\r\n            this.inputs.forEach(input => {\r\n                input.beginPropagation()\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the circle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/2), 0, Math.PI * 2, false)\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath() \r\n    }\r\n    \r\n    /**\r\n     * Super class the default update value function. This function computes the number of points to use for the circle and then calls the worker thread to create the circle.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var diameter = this.findIOValue('diameter')\r\n            \r\n            const numberOfSegments = Math.min(Math.max(parseInt(Math.PI / (Math.acos(1 - GlobalVariables.circleSegmentSize/(diameter/2)))),6), 100)\r\n            \r\n            const values = {op: \"circle\", diameter: diameter, numSegments:numberOfSegments, writePath: this.path }\r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/circle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "Circle",
    "memberof": "src/js/molecules/circle.js",
    "static": true,
    "longname": "src/js/molecules/circle.js~Circle",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/circle.js",
    "importStyle": "Circle",
    "description": "This class creates the circle atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/circle.js~Circle",
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 42,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 55,
    "params": [],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/circle.js~Circle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/circle.js~Circle#updateValue",
    "access": "public",
    "description": "Super class the default update value function. This function computes the number of points to use for the circle and then calls the worker thread to create the circle.",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/js/molecules/code.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport CodeMirror from 'codemirror'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * The Code molecule type adds support for executing arbitrary jsxcad code.\r\n */\r\nexport default class Code extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = \"Code\"\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.atomType = \"Code\"\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Defines a JSxCAD code block.\"\r\n        /**\r\n         * The code contained within the atom stored as a string.\r\n         * @type {string}\r\n         */\r\n        this.code = \"//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \\n//Inputs:[Input1, Input2];\\n\\n\\nreturn Orb(10)\"\r\n        \r\n        this.addIO(\"output\", \"geometry\", this, \"geometry\", \"\")\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.parseInputs(false)\r\n    }\r\n\r\n    /**\r\n     * Draw the code atom which has a code icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.font = `${GlobalVariables.widthToPixels(this.radius)}px Work Sans Bold`\r\n        GlobalVariables.c.fillText('</>', GlobalVariables.widthToPixels(this.x - (this.radius/1.5)), GlobalVariables.heightToPixels(this.y + (this.radius*1.5)))\r\n    }\r\n    \r\n    /**\r\n     * Begin propagation from this code atom if it has no inputs or if none of the inputs are connected. \r\n     */ \r\n    beginPropagation(){\r\n        //If there are no inputs\r\n        if(this.inputs.length == 0){\r\n            this.updateValue()\r\n        }\r\n\r\n        //If none of the inputs are connected\r\n        var connectedInput = false\r\n        this.inputs.forEach(input => {\r\n            if(input.connectors.length > 0){\r\n                connectedInput = true\r\n            }\r\n        })\r\n        if(!connectedInput){\r\n            this.updateValue()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Grab the code as a text string and execute it. \r\n     */ \r\n    updateValue(){\r\n        try{\r\n            this.parseInputs()\r\n            \r\n            var argumentsArray = {}\r\n            this.inputs.forEach(input => {\r\n                argumentsArray[input.name] = input.value\r\n            })\r\n            \r\n            const values = { op: \"code\", code: this.code, paths: argumentsArray, writePath: this.path }\r\n            \r\n            var go = true\r\n            this.inputs.forEach(input => {\r\n                if(!input.ready){\r\n                    go = false\r\n                }\r\n            })\r\n            if(go){     //Then we update the value\r\n                \r\n                this.waitOnComingInformation() //This sends a chain command through the tree to lock all the inputs which are down stream of this one. It also cancels anything processing if this atom was doing a calculation already.\r\n                \r\n                /**\r\n                 * Indicates that this atom is computing\r\n                 * @type {boolean}\r\n                 */\r\n                this.processing = true\r\n                this.decreaseToProcessCountByOne()\r\n                \r\n                \r\n                this.clearAlert()\r\n                \r\n                const {answer, terminate} = window.ask(values)\r\n                answer.then(result => {\r\n                    if (result.success){\r\n                        if(result.type == \"path\"){\r\n                            this.displayAndPropagate()\r\n                        }\r\n                        else{\r\n                            if(this.output){\r\n                                this.output.setValue(result.value)\r\n                                this.output.ready = true\r\n                            }\r\n                        }\r\n                    }else{\r\n                        this.setAlert(\"Unable to compute\")\r\n                    }\r\n                    this.processing = false\r\n                })\r\n\r\n                /**\r\n                 * This can be called to interrupt the computation\r\n                 * @type {function}\r\n                 */\r\n                this.cancelProcessing = terminate\r\n            }\r\n            \r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * This function reads the string of inputs the user specifies and adds them to the atom.\r\n     */ \r\n    parseInputs(ready = true){\r\n        //Parse this.code for the line \"\\nmain(input1, input2....) and add those as inputs if needed\r\n        var variables = /Inputs:\\[\\s*([^)]+?)\\s*\\]/.exec(this.code)\r\n        \r\n        if(variables){\r\n            if (variables[1]) {\r\n                variables = variables[1].split(/\\s*,\\s*/)\r\n            }\r\n            \r\n            //Add any inputs which are needed\r\n            for (var variable in variables){\r\n                if(!this.inputs.some(input => input.Name === variables[variable])){\r\n                    this.addIO('input', variables[variable], this, 'geometry', null, ready)\r\n                }\r\n            }\r\n            \r\n            //Remove any inputs which are not needed\r\n            for (var input in this.inputs){\r\n                if( !variables.includes(this.inputs[input].name) ){\r\n                    this.removeIO('input', this.inputs[input].name, this)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Edit the atom's code when it is double clicked\r\n     * @param {number} x - The X coordinate of the click\r\n     * @param {number} y - The Y coordinate of the click\r\n     */ \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, xInPixels, y, yInPixels)\r\n        \r\n        if (distFromClick < this.radius){\r\n            this.editCode()\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n    \r\n    /**\r\n     * Called to trigger editing the code atom\r\n     */ \r\n    editCode(){\r\n        //Remove everything in the popup now\r\n        const popup = document.getElementById('projects-popup')\r\n        while (popup.firstChild) {\r\n            popup.removeChild(popup.firstChild)\r\n        }\r\n        \r\n        popup.classList.remove('off')\r\n\r\n        //Add a title\r\n        var codeMirror = CodeMirror(popup, {\r\n            value: this.code,\r\n            mode:  \"javascript\",\r\n            lineNumbers: true,\r\n            gutter: true,\r\n            lineWrapping: true\r\n        })\r\n        \r\n        var form = document.createElement(\"form\")\r\n        popup.appendChild(form)\r\n        var button = document.createElement(\"button\")\r\n        button.setAttribute(\"type\", \"button\")\r\n        button.appendChild(document.createTextNode(\"Save Code\"))\r\n        button.addEventListener(\"click\", () => {\r\n            this.code = codeMirror.getDoc().getValue('\\n')\r\n            this.updateValue()\r\n            popup.classList.add('off')\r\n        })\r\n        form.appendChild(button)\r\n    }\r\n    \r\n    /**\r\n     * Add a button to open the code editor to the side bar\r\n     */ \r\n    updateSidebar(){\r\n        var valueList =  super.updateSidebar() \r\n        \r\n        this.createButton(valueList,this,\"Edit Code\",() => {\r\n            this.editCode()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Save the input code to be loaded next time\r\n     */ \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.code = this.code\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/code.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "Code",
    "memberof": "src/js/molecules/code.js",
    "static": true,
    "longname": "src/js/molecules/code.js~Code",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/code.js",
    "importStyle": "Code",
    "description": "The Code molecule type adds support for executing arbitrary jsxcad code.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/code.js~Code",
    "static": false,
    "longname": "src/js/molecules/code.js~Code#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/code.js~Code",
    "static": false,
    "longname": "src/js/molecules/code.js~Code#atomType",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/code.js~Code",
    "static": false,
    "longname": "src/js/molecules/code.js~Code#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "code",
    "memberof": "src/js/molecules/code.js~Code",
    "static": false,
    "longname": "src/js/molecules/code.js~Code#code",
    "access": "public",
    "description": "The code contained within the atom stored as a string.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#beginPropagation",
    "access": "public",
    "description": "Begin propagation from this code atom if it has no inputs or if none of the inputs are connected. ",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#updateValue",
    "access": "public",
    "description": "Grab the code as a text string and execute it. ",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/code.js~Code",
    "static": false,
    "longname": "src/js/molecules/code.js~Code#processing",
    "access": "public",
    "description": "Indicates that this atom is computing",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "cancelProcessing",
    "memberof": "src/js/molecules/code.js~Code",
    "static": false,
    "longname": "src/js/molecules/code.js~Code#cancelProcessing",
    "access": "public",
    "description": "This can be called to interrupt the computation",
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "parseInputs",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#parseInputs",
    "access": "public",
    "description": "This function reads the string of inputs the user specifies and adds them to the atom.",
    "lineNumber": 145,
    "params": [
      {
        "name": "ready",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#doubleClick",
    "access": "public",
    "description": "Edit the atom's code when it is double clicked",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y coordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "editCode",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#editCode",
    "access": "public",
    "description": "Called to trigger editing the code atom",
    "lineNumber": 194,
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#updateSidebar",
    "access": "public",
    "description": "Add a button to open the code editor to the side bar",
    "lineNumber": 228,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/code.js~Code",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/code.js~Code#serialize",
    "access": "public",
    "description": "Save the input code to be loaded next time",
    "lineNumber": 239,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/js/molecules/color.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the color atom which can be used to give a part a color.\r\n */\r\nexport default class Color extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Color'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Color'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Changes the color of the shape.\"\r\n        \r\n        /**\r\n         * The index of the currently selected color option.\r\n         * @type {number}\r\n         */\r\n        this.selectedColorIndex = 0\r\n        \r\n        /**\r\n         * The color options to choose from\r\n         * @type {array}\r\n         */\r\n        this.colorOptions = {\r\n            'Red': '#FF9065',\r\n            'Orange': '#FFB458',\r\n            'Yellow': '#FFD600',\r\n            'Olive': '#C7DF66',\r\n            'Teal': '#71D1C2',\r\n            'Light Blue': '#75DBF2',\r\n            'Green': '#A3CE5B',\r\n            'Lavender ': '#CCABED',\r\n            'Brown': '#CFAB7C',\r\n            'Pink': '#FFB09D',\r\n            'Sand': '#E2C66C',\r\n            'Clay': '#C4D3AC',\r\n            'Blue': '#91C8D5',\r\n            'Light Green': '#96E1BB',\r\n            'Purple': '#ACAFDD',\r\n            'Light Purple': '#DFB1E8',\r\n            'Tan': '#F5D3B6',\r\n            'Mauve ': '#DBADA9',\r\n            'Grey': '#BABABA',\r\n            'Black': '#3C3C3C',\r\n            'White': '#FFFCF7',\r\n            'Keep Out': 'Keep Out'\r\n        }\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null, false, true)\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Draw the circle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#0000FF'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x - this.radius/4), \r\n            GlobalVariables.heightToPixels(this.y + this.radius/2), \r\n            GlobalVariables.widthToPixels(this.radius/3), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#FF0000'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x + this.radius/4), \r\n            GlobalVariables.heightToPixels(this.y + this.radius/2), \r\n            GlobalVariables.widthToPixels(this.radius/3), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath() \r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#FFFF00'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x), \r\n            GlobalVariables.heightToPixels(this.y - this.radius), \r\n            GlobalVariables.widthToPixels(this.radius/3), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath() \r\n    }\r\n    \r\n    /**\r\n     * Applies a color tag to the object in a worker thread.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputPath = this.findIOValue('geometry')\r\n            const values = {op: \"color\", color: this.colorOptions[Object.keys(this.colorOptions)[this.selectedColorIndex]], readPath: inputPath, writePath: this.path }\r\n            this.basicThreadValueProcessing(values)\r\n            this.clearAlert()\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Updates the value of the selected color and then the value.\r\n     */ \r\n    changeColor(index){\r\n        this.selectedColorIndex = index\r\n        this.updateValue()\r\n    }\r\n    \r\n    /**\r\n     * Create a drop down to choose the color.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        const dropdown= document.createElement('div')\r\n        list.appendChild(dropdown)\r\n        this.createDropDown(dropdown, this, Object.keys(this.colorOptions), this.selectedColorIndex, \"Color\", (index)=>{this.changeColor(index)})\r\n    }\r\n    \r\n    /**\r\n     * Add the color choice to the object which is saved for this molecule\r\n     */\r\n    serialize(){\r\n        var superSerialObject = super.serialize()\r\n        \r\n        //Write the current color selection to the serialized object\r\n        superSerialObject.selectedColorIndex = this.selectedColorIndex\r\n        \r\n        return superSerialObject\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/color.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "Color",
    "memberof": "src/js/molecules/color.js",
    "static": true,
    "longname": "src/js/molecules/color.js~Color",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/color.js",
    "importStyle": "Color",
    "description": "This class creates the color atom which can be used to give a part a color.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "selectedColorIndex",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#selectedColorIndex",
    "access": "public",
    "description": "The index of the currently selected color option.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "colorOptions",
    "memberof": "src/js/molecules/color.js~Color",
    "static": false,
    "longname": "src/js/molecules/color.js~Color#colorOptions",
    "access": "public",
    "description": "The color options to choose from",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 78,
    "params": [],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#updateValue",
    "access": "public",
    "description": "Applies a color tag to the object in a worker thread.",
    "lineNumber": 110,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "changeColor",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#changeColor",
    "access": "public",
    "description": "Updates the value of the selected color and then the value.",
    "lineNumber": 122,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#updateSidebar",
    "access": "public",
    "description": "Create a drop down to choose the color.",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/color.js~Color",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/color.js~Color#serialize",
    "access": "public",
    "description": "Add the color choice to the object which is saved for this molecule",
    "lineNumber": 140,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/js/molecules/constant.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the constant atom instance which can be used to define a numerical constant.\r\n */\r\nexport default class Constant extends Atom{\r\n    \r\n    /**\r\n     * Creates a new constant atom.\r\n     * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'constant'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Constant'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Constant'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Defines a mathematical constant.\"\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height = 16\r\n        /**\r\n         * A flag to indicate if this constant should be evolved by genetic algorithms\r\n         * @type {boolean}\r\n         */\r\n        this.evolve = false\r\n        /**\r\n         * Minimum value to be used when evolving constant\r\n         * @type {float}\r\n         */\r\n        this.min = 0\r\n        /**\r\n         * Maximum value to be used when evolving constant\r\n         * @type {float}\r\n         */\r\n        this.max = 20\r\n        \r\n        /**\r\n         * The default value for the constant\r\n         * @type {float}\r\n         */\r\n        this.value = 10\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.addIO('output', 'number', this, 'number', 10)\r\n        \r\n        this.decreaseToProcessCountByOne()  //Since there is nothing upstream this needs to be removed from the list here\r\n        \r\n        //This is done wrong. We should not be saving the value in the io values\r\n        if (typeof this.ioValues == 'object') {\r\n            this.value = this.ioValues[0].ioValue\r\n            this.output.value = this.value\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Draw the Bill of material atom which has a BOM icon.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Set's the output value and shows the atom output on the 3D view.\r\n     */ \r\n    updateValue(){\r\n        this.value = this.output.getValue()  //We read from the output because it is set by the sidebar because constants have no inputs\r\n        this.output.setValue(this.value)\r\n        this.output.ready = true\r\n\r\n        //Write to this's path just so that we know it has happened and don't load this again next time the project is opened\r\n        try{\r\n            const values = {op: \"text\", value:this.value, writePath: this.path }\r\n            window.ask(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Starts propagation from this atom if it is not waiting for anything up stream.\r\n     */ \r\n    beginPropagation(){\r\n        //Check to see if a value already exists. Generate it if it doesn't.\r\n        if(!GlobalVariables.availablePaths.includes(this.path)){\r\n            //Triggers inputs with nothing connected to begin propagation\r\n            this.updateValue()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms.\r\n     */\r\n    loadTree(){\r\n        return this.value\r\n    }\r\n    \r\n    /**\r\n     * Add entries for name and value to the side bar. Note: I think that should happen automatically and this function can be deleted. Please test that future self.\r\n     */ \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        this.createEditableValueListItem(valueList,this.output,'value', 'Value', true)\r\n        \r\n        this.createCheckbox(valueList,\"Evolve\",this.evolve,(event)=>{\r\n            if(event.target.checked){\r\n                this.evolve = true\r\n                this.updateSidebar()\r\n            } else{\r\n                this.evolve = false\r\n                this.updateSidebar()\r\n            }\r\n        })\r\n        \r\n        if(this.evolve){\r\n            this.createEditableValueListItem(valueList,this,'min', 'Min', true)\r\n            this.createEditableValueListItem(valueList,this,'max', 'Max', true)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Used to walk back out the tree generating a list of constants...used for evolving\r\n     */ \r\n    walkBackForConstants(callback){\r\n        //If this constant can evolve then add it to the target list\r\n        if(this.evolve){\r\n            callback(this)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add the value to be saved to the object saved for this molecule.\r\n     */ \r\n    serialize(values){\r\n        //Save the IO value to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.ioValues = [{\r\n            name: 'number',\r\n            ioValue: this.output.getValue()\r\n        }]\r\n        \r\n        valuesObj.evolve = this.evolve\r\n        valuesObj.min = this.min\r\n        valuesObj.max = this.max\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n\r\n    /**\r\n     * Send the value of this atom to the 3D display. Used to display the number\r\n     */ \r\n    sendToRender(){\r\n        //Send code to jotcad to render\r\n        try{\r\n            const values = {op: \"text\", value:this.output.getValue(), writePath: this.path }\r\n            const {answer} = window.ask(values)\r\n            answer.then( () => {\r\n                GlobalVariables.writeToDisplay(this.path)\r\n            })\r\n        }\r\n        catch(err){\r\n            this.setAlert(err)\r\n        }\r\n\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/constant.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "class",
    "name": "Constant",
    "memberof": "src/js/molecules/constant.js",
    "static": true,
    "longname": "src/js/molecules/constant.js~Constant",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/constant.js",
    "importStyle": "Constant",
    "description": "This class creates the constant atom instance which can be used to define a numerical constant.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 209,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#constructor",
    "access": "public",
    "description": "Creates a new constant atom.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 39,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "evolve",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#evolve",
    "access": "public",
    "description": "A flag to indicate if this constant should be evolved by genetic algorithms",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "min",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#min",
    "access": "public",
    "description": "Minimum value to be used when evolving constant",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "max",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#max",
    "access": "public",
    "description": "Maximum value to be used when evolving constant",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/constant.js~Constant",
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#value",
    "access": "public",
    "description": "The default value for the constant",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#draw",
    "access": "public",
    "description": "Draw the Bill of material atom which has a BOM icon.",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#updateValue",
    "access": "public",
    "description": "Set's the output value and shows the atom output on the 3D view.",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 103,
    "params": [],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms.",
    "lineNumber": 114,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#updateSidebar",
    "access": "public",
    "description": "Add entries for name and value to the side bar. Note: I think that should happen automatically and this function can be deleted. Please test that future self.",
    "lineNumber": 121,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "walkBackForConstants",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#walkBackForConstants",
    "access": "public",
    "description": "Used to walk back out the tree generating a list of constants...used for evolving",
    "lineNumber": 147,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#serialize",
    "access": "public",
    "description": "Add the value to be saved to the object saved for this molecule.",
    "lineNumber": 157,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/constant.js~Constant",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/constant.js~Constant#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display. Used to display the number",
    "lineNumber": 177,
    "params": [],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/js/molecules/cutlayout.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n//import GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * The Cut Layout atom extracts a copy of each shape on the cutlist and places them optimally on a cut sheet.\r\n */\r\nexport default class CutLayout extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Cut Layout'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'cutLayout'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Cut Layout'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Extracts all of the parts tagged for layout and lays them out on a sheet to cut.\"\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n\r\n        this.addIO('input', 'Spacing', this, 'number', 5)\r\n        //this.addIO('input', 'Sheet Width', this, 'number', 50)\r\n        //this.addIO('input', 'Sheet Length', this, 'number', 50)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Draw the cutlayout icon\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.setLineDash([3, 3])\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/1.7)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/1.7)\r\n\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.lineJoin = \"round\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.setLineDash([])\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n    /**\r\n    * Pass the input geometry to a worker function to compute the translation.\r\n    */ \r\n    updateValue(){\r\n        try{\r\n            const values = {key: \"layout\", spacing: this.findIOValue('Spacing'), readPath: this.findIOValue('geometry'), writePath: this.path }\r\n            \r\n            this.basicThreadValueProcessing(values, \"layout\")\r\n        }catch(err){\r\n            this.setAlert(err)\r\n        }\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/cutlayout.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "class",
    "name": "CutLayout",
    "memberof": "src/js/molecules/cutlayout.js",
    "static": true,
    "longname": "src/js/molecules/cutlayout.js~CutLayout",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/cutlayout.js",
    "importStyle": "CutLayout",
    "description": "The Cut Layout atom extracts a copy of each shape on the cutlist and places them optimally on a cut sheet.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 233,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 234,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 235,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#draw",
    "access": "public",
    "description": "Draw the cutlayout icon",
    "lineNumber": 50,
    "params": [],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/cutlayout.js~CutLayout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlayout.js~CutLayout#updateValue",
    "access": "public",
    "description": "Pass the input geometry to a worker function to compute the translation.",
    "lineNumber": 87,
    "params": [],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/js/molecules/cutlist.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the Add To Cutlist atom.\r\n */\r\nexport default class CutList extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '', false, true)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Add To Cutlist'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'cutList'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Adds a part to the cut list so that it will be included in the cut layout.\"\r\n        \r\n        this.setValues(values)\r\n        /** \r\n         * This atom's radius as displayed on the screen is 1/65 width\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/65\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n    }\r\n    /**\r\n     * Draw the constant which is more rectangular than the regular shape.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        \r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height = pixelsRadius/1.3\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius}px Work Sans Bold`\r\n        GlobalVariables.c.fillText(String.fromCharCode(0x2702)+' -', GlobalVariables.widthToPixels(this.x- this.radius/1.5), GlobalVariables.heightToPixels(this.y)+this.height/2)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n    }\r\n    \r\n    /**\r\n     * Add a tag to the input geometry. The substance is not changed.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputPath = this.findIOValue('geometry')\r\n            const values = {op: \"item\", tag: \"cutlist\", readPath: inputPath, writePath: this.path }\r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/cutlist.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "CutList",
    "memberof": "src/js/molecules/cutlist.js",
    "static": true,
    "longname": "src/js/molecules/cutlist.js~CutList",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/cutlist.js",
    "importStyle": "CutList",
    "description": "This class creates the Add To Cutlist atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen is 1/65 width",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/cutlist.js~CutList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/cutlist.js~CutList#updateValue",
    "access": "public",
    "description": "Add a tag to the input geometry. The substance is not changed.",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "src/js/molecules/difference.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the Difference atom.\r\n */ \r\nexport default class Difference extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor (values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Difference'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Difference'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Subtracts shape two from shape one.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n\r\n    /**\r\n     * Draw the code atom which has a code icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n         \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/3), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath() \r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.rect(GlobalVariables.widthToPixels(this.x- this.radius/2), \r\n            GlobalVariables.heightToPixels(this.y- this.radius*2), \r\n            GlobalVariables.widthToPixels(this.radius), \r\n            GlobalVariables.widthToPixels(this.radius))       \r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()  \r\n\r\n    }\r\n    /**\r\n     * Pass the input values to the worker thread to do the actual processing.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const path1 = this.findIOValue('geometry1')\r\n            const path2 = this.findIOValue('geometry2')\r\n            const values = { op: \"difference\",readPath1: path1, readPath2: path2, writePath: this.path }\r\n            \r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/difference.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "class",
    "name": "Difference",
    "memberof": "src/js/molecules/difference.js",
    "static": true,
    "longname": "src/js/molecules/difference.js~Difference",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/difference.js",
    "importStyle": "Difference",
    "description": "This class creates the Difference atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 252,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/difference.js~Difference",
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/difference.js~Difference",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/difference.js~Difference#updateValue",
    "access": "public",
    "description": "Pass the input values to the worker thread to do the actual processing.",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "src/js/molecules/equation.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the Equation atom.\r\n */\r\nexport default class Equation extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'result', this, 'number', 0)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Equation'\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Equation'\r\n        \r\n        /**\r\n         * Evaluate the equation adding and removing inputs as needed\r\n         */ \r\n        this.value = 0\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Defines a mathematical equation. Edit the output field to add or remove inputs.\"\r\n        \r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n        /**\r\n         * The index number of the currently selected option\r\n         * @type {number}\r\n         */\r\n        this.currentEquation = \"x + y\"\r\n        \r\n        this.setValues(values)\r\n        this.addAndRemoveInputs()\r\n        this.setValues(values) //Set values again to load input values which were saved\r\n        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * Draw the Bill of material atom which has a BOM icon.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        \r\n        let pixelsX = GlobalVariables.widthToPixels(this.x)\r\n        let pixelsY = GlobalVariables.heightToPixels(this.y)\r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height = pixelsRadius\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius/1.5}px Work Sans Bold`\r\n        \r\n        GlobalVariables.c.fillText('X + Y', pixelsX - pixelsRadius/1.2, pixelsY+this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Add and remove inputs as needed from the atom\r\n     */ \r\n    addAndRemoveInputs(){\r\n        //Find all the letters in this equation\r\n        var re = /[a-zA-Z]/g\r\n        const variables = this.currentEquation.match(re)\r\n        \r\n        //Remove any inputs which are not needed\r\n        const deleteExtraInputs = () => {\r\n            this.inputs.forEach( input => {\r\n                if( !variables.includes(input.name) ){\r\n                    this.removeIO('input', input.name, this)\r\n                    deleteExtraInputs() //This needs to be called recursively to make sure all the inputs are deleted\r\n                }\r\n            })\r\n        }\r\n        deleteExtraInputs()\r\n        \r\n        //Add any inputs which are needed\r\n        for (var variable in variables){\r\n            if(!this.inputs.some(input => input.Name === variables[variable])){\r\n                this.addIO('input', variables[variable], this, 'number', 1)\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Evaluate the equation\r\n     */ \r\n    evaluateEquation(){\r\n        //Substitute numbers into the string\r\n        var substitutedEquation = this.currentEquation\r\n        this.name = this.currentEquation\r\n        \r\n        //Find all the letters in this equation\r\n        var re = /[a-zA-Z]/g\r\n        const variables = this.currentEquation.match(re)\r\n        for (var variable in variables){\r\n            for (var i= 0; i<this.inputs.length; i++){\r\n                if (this.inputs[i].name == variables[variable]) {\r\n                    substitutedEquation = substitutedEquation.replace(this.inputs[i].name, this.findIOValue(this.inputs[i].name))\r\n                }\r\n            }\r\n        }\r\n        return GlobalVariables.limitedEvaluate(substitutedEquation)\r\n    }\r\n    \r\n    /**\r\n     * Evaluate the equation adding and removing inputs as needed\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            \r\n            this.addAndRemoveInputs()\r\n            \r\n            if(this.inputs.every(x => x.ready)){\r\n                \r\n                this.decreaseToProcessCountByOne()\r\n                \r\n                //Evaluate the equation\r\n                this.value = this.evaluateEquation()\r\n                \r\n                this.output.setValue(this.value)\r\n                this.output.ready = true\r\n            }\r\n            \r\n            //Updates the inputs\r\n            if(this.selected){\r\n                this.updateSidebar()\r\n            }\r\n        }catch(err){\r\n            console.warn(err)\r\n            this.setAlert(err)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms.\r\n     */ \r\n    loadTree(){\r\n        this.inputs.forEach(input => {\r\n            input.loadTree()\r\n        })\r\n        \r\n        this.value = this.evaluateEquation()\r\n        this.output.value = this.value\r\n        \r\n        return this.value\r\n    }\r\n    \r\n    /**\r\n     * Add the equation choice to the object which is saved for this molecule\r\n     */\r\n    serialize(){\r\n        var superSerialObject = super.serialize()\r\n        \r\n        //Write the current equation to the serialized object\r\n        superSerialObject.currentEquation = this.currentEquation\r\n        \r\n        return superSerialObject\r\n    }\r\n    \r\n    /**\r\n     * Add a dropdown to choose the equation type to the sidebar.\r\n     */\r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.updateSidebar()\r\n        \r\n        this.createEditableValueListItem(valueList,this,\"currentEquation\", \"output=\", false, (newEquation)=>{this.setEquation(newEquation)})\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Set the current equation to be a new value.\r\n     */\r\n    setEquation(newEquation){\r\n        this.currentEquation = newEquation.trim() //remove leading and trailing whitespace\r\n        this.updateValue()\r\n    }\r\n\r\n    /**\r\n     * Send the value of this atom to the 3D display. Used to display the number\r\n     */ \r\n    sendToRender(){\r\n        //Send code to jotcad to render\r\n        try{\r\n            const values = {op: \"text\", value:this.output.getValue(), writePath: this.path }\r\n            const {answer} = window.ask(values)\r\n            answer.then( () => {\r\n                GlobalVariables.writeToDisplay(this.path)\r\n            })\r\n        }\r\n        catch(err){\r\n            this.setAlert(err)\r\n        }\r\n\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/equation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "Equation",
    "memberof": "src/js/molecules/equation.js",
    "static": true,
    "longname": "src/js/molecules/equation.js~Equation",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/equation.js",
    "importStyle": "Equation",
    "description": "This class creates the Equation atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#value",
    "access": "public",
    "description": "Evaluate the equation adding and removing inputs as needed",
    "lineNumber": 33,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "currentEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#currentEquation",
    "access": "public",
    "description": "The index number of the currently selected option",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#draw",
    "access": "public",
    "description": "Draw the Bill of material atom which has a BOM icon.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/equation.js~Equation",
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "addAndRemoveInputs",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#addAndRemoveInputs",
    "access": "public",
    "description": "Add and remove inputs as needed from the atom",
    "lineNumber": 86,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "evaluateEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#evaluateEquation",
    "access": "public",
    "description": "Evaluate the equation",
    "lineNumber": 113,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#updateValue",
    "access": "public",
    "description": "Evaluate the equation adding and removing inputs as needed",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms.",
    "lineNumber": 163,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#serialize",
    "access": "public",
    "description": "Add the equation choice to the object which is saved for this molecule",
    "lineNumber": 177,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#updateSidebar",
    "access": "public",
    "description": "Add a dropdown to choose the equation type to the sidebar.",
    "lineNumber": 189,
    "params": [],
    "return": null
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "setEquation",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#setEquation",
    "access": "public",
    "description": "Set the current equation to be a new value.",
    "lineNumber": 201,
    "params": [
      {
        "name": "newEquation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/equation.js~Equation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/equation.js~Equation#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display. Used to display the number",
    "lineNumber": 209,
    "params": [],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/js/molecules/extracttag.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * The cut away tag adds a tag to a part indicating that it should be cut away from the rest of the model in the next assembly. Essentially it creates a negitive version of itself.\r\n */\r\nexport default class ExtractTag extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Extract Tag'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'extractTag'\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Extract Tag'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Extracts geometry containing the specified tag.\"\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null, false, true)\r\n        this.addIO('input', 'tag', this, 'string', 'Tag String')\r\n        this.addIO('output', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Draw the constant which is more rectangular than the regular shape.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        let pixelsX = GlobalVariables.widthToPixels(this.x)\r\n        let pixelsY = GlobalVariables.heightToPixels(this.y)\r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height= pixelsRadius\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius}px Work Sans Bold`\r\n        GlobalVariables.c.fillText(String.fromCharCode(0x2191,0x0023,0x2191), pixelsX- pixelsRadius/1.2, pixelsY+this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n    }\r\n    /**\r\n     * Adds the cutAway tag to the part\r\n     */ \r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            try{\r\n                var inputPath = this.findIOValue('geometry')\r\n                const tag =  this.findIOValue('tag')\r\n                const values = {op: \"extractTag\", tag: tag, readPath: inputPath, writePath: this.path }\r\n                this.basicThreadValueProcessing(values)\r\n                this.clearAlert()\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n    }\r\n    \r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/extracttag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "class",
    "name": "ExtractTag",
    "memberof": "src/js/molecules/extracttag.js",
    "static": true,
    "longname": "src/js/molecules/extracttag.js~ExtractTag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/extracttag.js",
    "importStyle": "ExtractTag",
    "description": "The cut away tag adds a tag to a part indicating that it should be cut away from the rest of the model in the next assembly. Essentially it creates a negitive version of itself.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 282,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 50,
    "params": [],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/extracttag.js~ExtractTag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extracttag.js~ExtractTag#updateValue",
    "access": "public",
    "description": "Adds the cutAway tag to the part",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "file",
    "name": "src/js/molecules/extrude.js",
    "content": "import Atom from '../prototypes/atom'\r\n\r\nimport GlobalVariables from '../globalvariables'\r\n/**\r\n * This class creates the Extrude atom.\r\n */\r\nexport default class Extrude extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Extrude'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Extrude'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Extrudes a 2D shape. Input can be negitive. \"\r\n        \r\n        this.addIO('input', 'geometry' , this, 'geometry', '', false, true)\r\n        this.addIO('input', 'height'   , this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Draw the code atom which has a code icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n         \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.rect(GlobalVariables.widthToPixels(this.x- this.radius/2), \r\n            GlobalVariables.heightToPixels(this.y + this.radius), \r\n            GlobalVariables.widthToPixels(this.radius), \r\n            GlobalVariables.widthToPixels(this.radius/3))       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath() \r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.rect(GlobalVariables.widthToPixels(this.x- this.radius/2), \r\n            GlobalVariables.heightToPixels(this.y- this.radius*2), \r\n            GlobalVariables.widthToPixels(this.radius), \r\n            GlobalVariables.widthToPixels(this.radius))       \r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()  \r\n\r\n    }\r\n    /**\r\n     * Pass the input shape to the worker thread to compute the extruded shape.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputPath = this.findIOValue('geometry')\r\n            var extrudeDistance = this.findIOValue('height')\r\n            const values = { op: \"extrude\", distance:extrudeDistance, readPath: inputPath, writePath: this.path }\r\n            \r\n            this.basicThreadValueProcessing(values, \"extrude\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/extrude.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 291,
    "kind": "class",
    "name": "Extrude",
    "memberof": "src/js/molecules/extrude.js",
    "static": true,
    "longname": "src/js/molecules/extrude.js~Extrude",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/extrude.js",
    "importStyle": "Extrude",
    "description": "This class creates the Extrude atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 292,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/extrude.js~Extrude",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/extrude.js~Extrude#updateValue",
    "access": "public",
    "description": "Pass the input shape to the worker thread to compute the extruded shape.",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "file",
    "name": "src/js/molecules/gcode.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\n\r\n/**\r\n * This class creates the circle atom.\r\n */\r\nexport default class Gcode extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Gcode'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Gcode'\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n         \r\n        this.height = 16\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Generates Maslow gcode from the input geometry.\"\r\n        /**\r\n         * The generated gcode string\r\n         * @type {string}\r\n         */\r\n        this.gcodeString = \"\"\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        this.addIO('input', 'tool size', this, 'number', 6.35)\r\n        this.addIO('input', 'passes', this, 'number', 6)\r\n        this.addIO('input', 'speed', this, 'number', 500)\r\n        this.addIO('input', 'tabs', this, 'string', \"true\")\r\n        this.addIO('input', 'safe height', this, 'number', 6)\r\n        \r\n        this.addIO('output', 'gcode', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Draw the circle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${GlobalVariables.widthToPixels(this.radius)}px Work Sans Bold`\r\n        GlobalVariables.c.fillText('G', GlobalVariables.widthToPixels(this.x- this.radius/3), GlobalVariables.heightToPixels(this.y)+this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n\r\n    /**\r\n     * Generate a layered outline of the part where the tool will cut\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var geometry = this.findIOValue('geometry')\r\n            var toolSize = this.findIOValue('tool size')\r\n            var passes = this.findIOValue('passes')\r\n            var speed = this.findIOValue('speed')\r\n            var tabs = this.findIOValue('tabs')\r\n            var safeHeight = this.findIOValue('safe height')\r\n            const values = {op: \"gcode\", readPath:geometry, toolSize:toolSize, passes:passes, speed:speed, tabs:tabs, safeHeight:safeHeight ,writePath: this.path }\r\n            this.gcodeString = this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Create a button to download the .stl file.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createButton(list, this, \"Download G-Code\", ()=>{this.downloadGCode()})\r\n    }\r\n    \r\n    /**\r\n     * The function which is called when you press the download button.\r\n     */ \r\n    downloadGCode(){\r\n        try{\r\n            var geometry = this.findIOValue('geometry')\r\n            var toolSize = this.findIOValue('tool size')\r\n            var passes = this.findIOValue('passes')\r\n            var speed = this.findIOValue('speed')\r\n            var tabs = this.findIOValue('tabs')\r\n            var safeHeight = this.findIOValue('safe height')\r\n            const values = {op: \"gcode\", readPath:geometry, toolSize:toolSize, passes:passes, speed:speed, tabs:tabs, safeHeight:safeHeight ,writePath: this.path }\r\n            const {answer} = window.ask(values)\r\n            answer.then( returnedAnswer => {\r\n                const blob = new Blob([returnedAnswer])\r\n                saveAs(blob, GlobalVariables.currentMolecule.name+'.nc')\r\n            })\r\n        }catch(err){this.setAlert(err)}\r\n        \r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/gcode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "Gcode",
    "memberof": "src/js/molecules/gcode.js",
    "static": true,
    "longname": "src/js/molecules/gcode.js~Gcode",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/gcode.js",
    "importStyle": "Gcode",
    "description": "This class creates the circle atom.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 32,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "gcodeString",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#gcodeString",
    "access": "public",
    "description": "The generated gcode string",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#updateValue",
    "access": "public",
    "description": "Generate a layered outline of the part where the tool will cut",
    "lineNumber": 75,
    "params": [],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .stl file.",
    "lineNumber": 91,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "downloadGCode",
    "memberof": "src/js/molecules/gcode.js~Gcode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/gcode.js~Gcode#downloadGCode",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 99,
    "params": [],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "file",
    "name": "src/js/molecules/geneticAlgorithm.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the Genetic Algorithm atom.\r\n */\r\nexport default class GeneticAlgorithm extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Genetic Algorithm'\r\n        \r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Genetic Algorithm'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Defines a new genetic algorithm which will simulate evolution to maximize the fitness function using the input population size and number of generations. Only constants which are upstream of this atom with evolve checked will be changed.\"\r\n        \r\n        /**\r\n         * An array of constant objects which need to be evolved\r\n         * @type {array}\r\n         */\r\n        this.constantsToEvolve = []\r\n        \r\n        /**\r\n         * An array of objects representing the current population\r\n         * @type {array}\r\n         */\r\n        this.population = []\r\n        \r\n        /**\r\n         * Current individual being evaluated in this generation\r\n         * @type {integer}\r\n         */\r\n        this.individualIndex = 0\r\n         \r\n        /**\r\n         * Current generation\r\n         * @type {integer}\r\n         */\r\n        this.generation = 0\r\n        \r\n        /**\r\n         * Top fitness value for the current generation\r\n         * @type {float}\r\n         */\r\n        this.topFitness = 0\r\n        \r\n        /**\r\n         * A flag to indicate if evolution is in process\r\n         * @type {boolean}\r\n         */\r\n        this.evolutionInProcess = false\r\n        \r\n        this.addIO('input', 'fitness function', this, 'number', 0)\r\n        this.addIO('input', 'population size', this, 'number', 50)\r\n        this.addIO('input', 'number of generations', this, 'number', 10)\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.updateValue()\r\n    }\r\n\r\n    /**\r\n     * Draw the code atom which has a code icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n         \r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n      \r\n       \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x - this.radius/5), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/2), Math.PI *3.4, Math.PI * 2.7, false) \r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x + this.radius/5), \r\n            GlobalVariables.heightToPixels(this.y ), \r\n            GlobalVariables.widthToPixels(this.radius/2), Math.PI *3.6, Math.PI * 2.3, true) \r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()  \r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels )\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels )\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels - radiusInPixels/5 )\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels - radiusInPixels/5)\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels + radiusInPixels/5 )\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels + radiusInPixels/5)\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n\r\n\r\n    }\r\n    \r\n    /**\r\n     * Generate a layered outline of the part where the tool will cut\r\n     */ \r\n    updateValue(){\r\n        this.decreaseToProcessCountByOne()\r\n        if(this.evolutionInProcess){\r\n            this.updateSidebar()\r\n            /**\r\n             * Atom is processing\r\n            * @type {boolean}\r\n             */\r\n            this.processing = true\r\n            //Store the result from this individual in it's fitness value\r\n            this.population[this.individualIndex].fitness = this.findIOValue('fitness function')\r\n            \r\n            //Evaluate the next individual\r\n            this.individualIndex = this.individualIndex + 1\r\n            if(this.individualIndex < this.findIOValue('population size')){\r\n                //Evaluate the next individual by updating all of the inputs\r\n                this.beginEvaluatingIndividual()\r\n            }\r\n            else{\r\n                this.generation = this.generation + 1\r\n                if(this.generation < this.findIOValue('number of generations')){\r\n                    // Generate a new generation from the existing generation and start the process over\r\n                    this.breedAndCullPopulation()\r\n                    this.individualIndex = 0\r\n                    this.beginEvaluatingIndividual()\r\n                }\r\n                else{\r\n                    this.evolutionInProcess = false\r\n                    this.processing = false\r\n                    // Set the inputs to the prime candidate\r\n                    this.population = this.population.sort((a, b) => parseFloat(b.fitness) - parseFloat(a.fitness))\r\n                    this.individualIndex = 0\r\n                    this.generation = 0\r\n                    this.beginEvaluatingIndividual()\r\n                    \r\n                    this.updateSidebar()\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add a button to trigger the evolution process\r\n     */ \r\n    updateSidebar(){\r\n        \r\n        if(this.evolutionInProcess){\r\n            \r\n            //Remove everything in the sidebar\r\n            let sideBar = document.querySelector('.sideBar')\r\n            while (sideBar.firstChild) {\r\n                sideBar.removeChild(sideBar.firstChild)\r\n            }\r\n            \r\n            //Generate the list\r\n            var sbList = document.createElement('ul')\r\n            sideBar.appendChild(sbList)\r\n            sbList.setAttribute('class', 'sidebar-list')\r\n            \r\n            //Add text to the list element\r\n            var listElement = document.createElement('LI')\r\n            sbList.appendChild(listElement)\r\n            \r\n            var labelDiv = document.createElement('div')\r\n            listElement.appendChild(labelDiv)\r\n            var labelText = document.createTextNode(\"Evolving...   Individual: \" + this.individualIndex + \",    Generation: \" + this.generation + \",    Best Fitness Value: \" + this.topFitness)\r\n            labelDiv.appendChild(labelText)\r\n            labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        }\r\n        else{\r\n            \r\n            var valueList =  super.updateSidebar() \r\n            \r\n            this.createButton(valueList,this,'Evolve',() => {\r\n                this.evolutionInProcess = true\r\n                \r\n                //Generate a list of all the constants to evolve\r\n                this.updateConstantsList()\r\n                \r\n                //Generate a population from those constants\r\n                this.initializePopulation()\r\n                \r\n                //Evaluate the first individual\r\n                this.beginEvaluatingIndividual()\r\n            })\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Trigger the process to evaluate the current individual\r\n     */ \r\n    beginEvaluatingIndividual(){\r\n        const individualToEvaluate = this.population[this.individualIndex]\r\n        \r\n        //Lock all the constants\r\n        individualToEvaluate.genome.forEach(gene => {\r\n            gene.constantAtom.output.waitOnComingInformation()\r\n        })\r\n        \r\n        //Set all of their values\r\n        individualToEvaluate.genome.forEach(gene => {\r\n            gene.constantAtom.output.value = gene.newValue\r\n        })\r\n        \r\n        //Trigger them to update\r\n        individualToEvaluate.genome.forEach(gene => {\r\n            gene.constantAtom.updateValue()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Generate a random number between min and max\r\n     */ \r\n    getRandomValue(min, max) {\r\n        const randomVal = Math.random() * (max - min) + min\r\n        return randomVal\r\n    }\r\n    \r\n    /**\r\n     * Generate an initial population\r\n     */ \r\n    initializePopulation(){\r\n        this.population = []\r\n        this.individualIndex = 0\r\n        this.generation = 0\r\n        this.topFitness = 0\r\n        \r\n        var i = 0\r\n        while(i < this.findIOValue('population size')){\r\n            var genome = []\r\n            this.constantsToEvolve.forEach(constant => {\r\n                var gene = {\r\n                    newValue: this.getRandomValue(constant.min, constant.max),\r\n                    constantAtom: constant\r\n                }\r\n                genome.push(gene)\r\n            })\r\n            \r\n            //Generate an individual with a random value for each input\r\n            var individual = {\r\n                genome: genome,\r\n                fitness: null\r\n            }\r\n            this.population.push(individual)\r\n            \r\n            i++\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Take two individuals and breed them to form a new individual with a mix of their genes and mutations\r\n     */ \r\n    breedTwo(A, B){\r\n        const lengthOfGenome = A.genome.length\r\n        \r\n        var child = {\r\n            fitness: null,\r\n            genome: []\r\n        }\r\n        \r\n        var geneIndex = 0\r\n        while(geneIndex < lengthOfGenome){\r\n            var newGene = {\r\n                newValue: null,\r\n                constantAtom: A.genome[geneIndex].constantAtom\r\n            }\r\n            \r\n            \r\n            const maxVal         = A.genome[geneIndex].constantAtom.max\r\n            const minVal         = A.genome[geneIndex].constantAtom.min\r\n            const mutationAmount = 0.1*(maxVal-minVal)*(Math.random()-.5) //Mutate by at most +-.5%\r\n            \r\n            var newGeneVal = null\r\n            if(Math.random() > 0.5){\r\n                newGeneVal = A.genome[geneIndex].newValue+mutationAmount\r\n            }else{\r\n                newGeneVal = B.genome[geneIndex].newValue+mutationAmount\r\n            }\r\n            \r\n            //Constrain to within bounds\r\n            newGene.newValue = Math.min(Math.max(newGeneVal, minVal), maxVal)\r\n            \r\n            child.genome.push(newGene)\r\n            \r\n            geneIndex++\r\n        }\r\n        return child\r\n    }\r\n    \r\n    /**\r\n     * Breed the best performers in the population, cull the rest\r\n     */ \r\n    breedAndCullPopulation(){\r\n        this.population = this.population.sort((a, b) => parseFloat(b.fitness) - parseFloat(a.fitness))\r\n        \r\n        this.topFitness = this.population[0].fitness\r\n        \r\n        // Create a new population by taking the top 1/5th of the original population\r\n        const keptPopulationNumber = Math.round(this.population.length / 5)\r\n        \r\n        const breeders = this.population.slice(0,keptPopulationNumber)\r\n        \r\n        //Generate a new population of individuals by breading from the last generation\r\n        var newGeneration = []\r\n        var index = 0\r\n        while(index < this.population.length - keptPopulationNumber){\r\n            const individualOneIndex = Math.round(Math.random()*(breeders.length-1))\r\n            const individualTwoIndex = Math.round(Math.random()*(breeders.length-1))\r\n            const newIndividual = this.breedTwo(breeders[individualOneIndex], breeders[individualTwoIndex])\r\n            newGeneration.push(newIndividual)\r\n            index = index + 1\r\n        }\r\n        \r\n        this.population = breeders.concat(newGeneration)\r\n    }\r\n    \r\n    /**\r\n     * Regenerate the list of constants we are evolving\r\n     */ \r\n    updateConstantsList(){\r\n        //Create an array of the inputs by walking up stream\r\n        this.constantsToEvolve = []\r\n        this.inputs.forEach(input => {\r\n            input.connectors.forEach(connector => {\r\n                connector.walkBackForConstants(constantObject => {this.addToConstantsList(constantObject)})\r\n            })\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Add a constant to the list. Used as a callback from passing up the tree.\r\n     */ \r\n    addToConstantsList(constantObject){\r\n        this.constantsToEvolve.push(constantObject)\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/geneticAlgorithm.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 312,
    "kind": "class",
    "name": "GeneticAlgorithm",
    "memberof": "src/js/molecules/geneticAlgorithm.js",
    "static": true,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/geneticAlgorithm.js",
    "importStyle": "GeneticAlgorithm",
    "description": "This class creates the Genetic Algorithm atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 313,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "constantsToEvolve",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#constantsToEvolve",
    "access": "public",
    "description": "An array of constant objects which need to be evolved",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "population",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#population",
    "access": "public",
    "description": "An array of objects representing the current population",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "individualIndex",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#individualIndex",
    "access": "public",
    "description": "Current individual being evaluated in this generation",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "generation",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#generation",
    "access": "public",
    "description": "Current generation",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "topFitness",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#topFitness",
    "access": "public",
    "description": "Top fitness value for the current generation",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "evolutionInProcess",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#evolutionInProcess",
    "access": "public",
    "description": "A flag to indicate if evolution is in process",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#draw",
    "access": "public",
    "description": "Draw the code atom which has a code icon.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#updateValue",
    "access": "public",
    "description": "Generate a layered outline of the part where the tool will cut",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#processing",
    "access": "public",
    "description": "Atom is processing",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#updateSidebar",
    "access": "public",
    "description": "Add a button to trigger the evolution process",
    "lineNumber": 178,
    "params": [],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "beginEvaluatingIndividual",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#beginEvaluatingIndividual",
    "access": "public",
    "description": "Trigger the process to evaluate the current individual",
    "lineNumber": 225,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "getRandomValue",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#getRandomValue",
    "access": "public",
    "description": "Generate a random number between min and max",
    "lineNumber": 247,
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "initializePopulation",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#initializePopulation",
    "access": "public",
    "description": "Generate an initial population",
    "lineNumber": 255,
    "params": [],
    "return": null
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "breedTwo",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#breedTwo",
    "access": "public",
    "description": "Take two individuals and breed them to form a new individual with a mix of their genes and mutations",
    "lineNumber": 286,
    "params": [
      {
        "name": "A",
        "types": [
          "*"
        ]
      },
      {
        "name": "B",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "breedAndCullPopulation",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#breedAndCullPopulation",
    "access": "public",
    "description": "Breed the best performers in the population, cull the rest",
    "lineNumber": 326,
    "params": [],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "updateConstantsList",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#updateConstantsList",
    "access": "public",
    "description": "Regenerate the list of constants we are evolving",
    "lineNumber": 353,
    "params": [],
    "return": null
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "addToConstantsList",
    "memberof": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/geneticAlgorithm.js~GeneticAlgorithm#addToConstantsList",
    "access": "public",
    "description": "Add a constant to the list. Used as a callback from passing up the tree.",
    "lineNumber": 366,
    "params": [
      {
        "name": "constantObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 351,
    "kind": "file",
    "name": "src/js/molecules/githubmolecule.js",
    "content": "import Molecule from '../molecules/molecule'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the GitHubMolecule atom.\r\n */\r\nexport default class GitHubMolecule extends Molecule {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n\r\n        /** \r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Github Molecule'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'GitHubMolecule'\r\n        /**\r\n         * A flag to signal if this node is the top level node\r\n         * @type {boolean}\r\n         */\r\n        this.topLevel = false\r\n        /**\r\n         * The color for the whole in the center of the drawing...probably doesn't need to be in this scope\r\n         * @type {string}\r\n         */\r\n        this.centerColor = 'black'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Project imported from GitHub\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * This replaces the default Molecule double click behavior to prevent you from being able to double click into a github molecule\r\n     * @param {number} x - The x coordinate of the click\r\n     * @param {number} y - The y coordinate of the click\r\n     // */ \r\n    // doubleClick(x,y){\r\n    // var clickProcessed = false\r\n    // var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n    // if (distFromClick < this.radius){\r\n    // clickProcessed = true\r\n    // }\r\n    // return clickProcessed \r\n    // }\r\n    \r\n    /**\r\n     * Loads a project into this GitHub molecule from github based on the passed github ID. This function is async and execution time depends on project complexity, and network speed.\r\n     * @param {number} id - The GitHub project ID for the project to be loaded.\r\n     */ \r\n    async loadProjectByID(id){\r\n        \r\n        //Get the repo by ID\r\n        const json = await GlobalVariables.gitHub.getProjectByID(id, this.topLevel)\r\n        \r\n        const projectData = await GlobalVariables.gitHub.getProjectDataByID(id)\r\n        \r\n        if(projectData && json.ioValues.length == 0){ //If this github molecule has no inputs\r\n            const projectData = await GlobalVariables.gitHub.getProjectDataByID(id)\r\n            if(projectData){\r\n                this.name = json.name\r\n                const values = {op: \"fromJSON\", writePath: this.path, json: projectData}\r\n                window.ask(values)\r\n            }\r\n            let aPromise = new Promise((resolve) => {\r\n                resolve()\r\n            })\r\n            return aPromise\r\n        }\r\n        else{\r\n            //Store values that we want to overwrite in the loaded version\r\n            var valuesToOverwriteInLoadedVersion\r\n            if(this.topLevel){ //If we are loading this as a stand alone project\r\n                valuesToOverwriteInLoadedVersion = {atomType: this.atomType, topLevel: this.topLevel}\r\n            }\r\n            else{\r\n                //If there are stored io values to recover\r\n                if(this.ioValues != undefined){\r\n                    valuesToOverwriteInLoadedVersion = {uniqueID: this.uniqueID, x: this.x, y: this.y, atomType: this.atomType, topLevel: this.topLevel, ioValues: this.ioValues}\r\n                }\r\n                else{\r\n                    valuesToOverwriteInLoadedVersion = {uniqueID: this.uniqueID, x: this.x, y: this.y, atomType: this.atomType, topLevel: this.topLevel}\r\n                }\r\n            }\r\n            const promsie =  this.deserialize(json, valuesToOverwriteInLoadedVersion, true).then( () => {\r\n                this.setValues(valuesToOverwriteInLoadedVersion)\r\n                this.loadTree()\r\n            })\r\n            return promsie\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Reload this github molecule from github\r\n     */\r\n    reloadMolecule(){\r\n        \r\n        var outputConnector = false\r\n        if(this.output.connectors.length > 0){\r\n            outputConnector = this.output.connectors[0]\r\n        }\r\n\r\n        //Delete everything currently inside...Make a copy to prevent index issues\r\n        const copyOfNodesOnTheScreen = [...this.nodesOnTheScreen]\r\n        copyOfNodesOnTheScreen.forEach(node => {\r\n            node.deleteNode(false, false, true)\r\n        })\r\n        \r\n        //Re-de-serialize this molecule\r\n        this.loadProjectByID(this.projectID).then( ()=> {\r\n\r\n            if(outputConnector){\r\n                //Reconnect the output connector\r\n                outputConnector.attachmentPoint1 = this.output\r\n                this.output.connectors.push(outputConnector)\r\n            }\r\n\r\n            this.beginPropagation(true)\r\n            this.updateSidebar()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Starts propagation from this atom if it is not waiting for anything up stream.\r\n     */ \r\n    beginPropagation(force = false){\r\n        //Trigger the inputs to this github molecule if needed\r\n        if(!GlobalVariables.availablePaths.includes(this.path) || force){\r\n            \r\n            //Tell every atom inside this molecule to begin Propagation\r\n            super.beginPropagation(force)\r\n            \r\n            //Triggers inputs with nothing connected to begin propagation\r\n            this.inputs.forEach(input => {\r\n                input.beginPropagation(force)\r\n            })\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Updates sidebar with buttons for user in runMode\r\n     */\r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        \r\n        if(this.topLevel){\r\n            this.runModeSidebarAdditions.forEach(sideBarFunction => {\r\n                sideBarFunction(list)\r\n            })\r\n            \r\n            this.createButton(list, this, \"Bill Of Materials\", ()=>{\r\n                GlobalVariables.gitHub.openBillOfMaterialsPage()\r\n            })\r\n            this.createButton(list, this, \"Fork\", ()=>{\r\n                GlobalVariables.gitHub.forkByID(this.projectID)\r\n            })\r\n            this.createButton(list, this, \"Star\", ()=>{\r\n                GlobalVariables.gitHub.starProject(this.projectID)\r\n            })\r\n        }\r\n        else{\r\n            this.createButton(list, this, \"Reload\", ()=>{this.reloadMolecule()})\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Save the project information to be loaded. This should use super.serialize() to maintain a connection with Molecule, but it doesn't...should be fixed\r\n     */ \r\n    serialize(){\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (typeof io.getValue() == 'number'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        //Return a placeholder for this molecule\r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x,\r\n            y: this.y,\r\n            uniqueID: this.uniqueID,\r\n            projectID: this.projectID,\r\n            ioValues: ioValues,\r\n            simplify: this.simplify\r\n        }\r\n        \r\n        return object\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/githubmolecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 352,
    "kind": "class",
    "name": "GitHubMolecule",
    "memberof": "src/js/molecules/githubmolecule.js",
    "static": true,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/githubmolecule.js",
    "importStyle": "GitHubMolecule",
    "description": "This class creates the GitHubMolecule atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/molecules/molecule.js~Molecule"
    ]
  },
  {
    "__docId__": 353,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#topLevel",
    "access": "public",
    "description": "A flag to signal if this node is the top level node",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#centerColor",
    "access": "public",
    "description": "The color for the whole in the center of the drawing...probably doesn't need to be in this scope",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "loadProjectByID",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#loadProjectByID",
    "access": "public",
    "description": "Loads a project into this GitHub molecule from github based on the passed github ID. This function is async and execution time depends on project complexity, and network speed.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The GitHub project ID for the project to be loaded."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "reloadMolecule",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#reloadMolecule",
    "access": "public",
    "description": "Reload this github molecule from github",
    "lineNumber": 108,
    "params": [],
    "return": null
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 138,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#updateSidebar",
    "access": "public",
    "description": "Updates sidebar with buttons for user in runMode",
    "lineNumber": 155,
    "params": [],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/githubmolecule.js~GitHubMolecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/githubmolecule.js~GitHubMolecule#serialize",
    "access": "public",
    "description": "Save the project information to be loaded. This should use super.serialize() to maintain a connection with Molecule, but it doesn't...should be fixed",
    "lineNumber": 181,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "src/js/molecules/group.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the group atom instance.\r\n */\r\nexport default class Group extends Atom{\r\n    /**\r\n    * Creates a new group atom.\r\n    * @param {object} values - An object of values. Each of these values will be applied to the resulting atom.\r\n    */\r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Group'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Group'\r\n        /**\r\n         * A list of all of the inputs to this molecule. May be loaded when the molecule is created.\r\n         * @type {array}\r\n         */\r\n        this.ioValues = []\r\n        /**\r\n         * A flag to determine if cutaway geometry is removed.\r\n         * @type {boolean}\r\n         */\r\n        this.removeCutawayGeometry = true\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Groups shapes together into one. Shapes are allowed to overlap.\"\r\n        \r\n        this.setValues(values)\r\n        \r\n        //This loads any inputs which this atom had when last saved.\r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n\r\n        this.setValues([])\r\n    }\r\n    \r\n    /**\r\n     * Add or delete ports as needed in addition to the normal begin propogation stuff\r\n     */ \r\n    beginPropagation(){\r\n        \r\n        addOrDeletePorts(this)  //Add or remove ports as needed\r\n        \r\n        super.beginPropagation()\r\n    }\r\n    \r\n    /**\r\n     * Draw the group icon\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n\r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.lineJoin = \"round\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n\r\n    /**\r\n    * Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the group.\r\n    */ \r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            try{\r\n                var inputValues = []\r\n                this.inputs.forEach( io => {\r\n                    if(io.connectors.length > 0 && io.type == 'input'){\r\n                        inputValues.push(io.getValue())\r\n                    }\r\n                })\r\n                \r\n                const values = { op: \"group\",paths: inputValues, writePath: this.path }\r\n                \r\n                this.basicThreadValueProcessing(values, \"group\")\r\n                this.clearAlert()\r\n            }catch(err){this.setAlert(err)}\r\n            \r\n            //Delete or add ports as needed\r\n            addOrDeletePorts(this)\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.\r\n    */ \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.connectors.length > 0){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        thisAsObject.ioValues = ioValues\r\n        \r\n        return thisAsObject\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/group.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "Group",
    "memberof": "src/js/molecules/group.js",
    "static": true,
    "longname": "src/js/molecules/group.js~Group",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/group.js",
    "importStyle": "Group",
    "description": "This class creates the group atom instance.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/group.js~Group#constructor",
    "access": "public",
    "description": "Creates a new group atom.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An object of values. Each of these values will be applied to the resulting atom."
      }
    ]
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/group.js~Group",
    "static": false,
    "longname": "src/js/molecules/group.js~Group#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 369,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/group.js~Group",
    "static": false,
    "longname": "src/js/molecules/group.js~Group#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/group.js~Group",
    "static": false,
    "longname": "src/js/molecules/group.js~Group#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be loaded when the molecule is created.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "removeCutawayGeometry",
    "memberof": "src/js/molecules/group.js~Group",
    "static": false,
    "longname": "src/js/molecules/group.js~Group#removeCutawayGeometry",
    "access": "public",
    "description": "A flag to determine if cutaway geometry is removed.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/group.js~Group",
    "static": false,
    "longname": "src/js/molecules/group.js~Group#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/group.js~Group#beginPropagation",
    "access": "public",
    "description": "Add or delete ports as needed in addition to the normal begin propogation stuff",
    "lineNumber": 59,
    "params": [],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/group.js~Group#draw",
    "access": "public",
    "description": "Draw the group icon",
    "lineNumber": 69,
    "params": [],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/group.js~Group#updateValue",
    "access": "public",
    "description": "Super class the default update value function. This function computes creates an array of all of the input values and then passes that array to a worker thread to create the group.",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/group.js~Group#serialize",
    "access": "public",
    "description": "Super class the default serialize function to save the inputs since this atom has variable numbers of inputs.",
    "lineNumber": 129,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "file",
    "name": "src/js/molecules/input.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the input atom.\r\n */\r\nexport default class Input extends Atom {\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        /** \r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Input' + GlobalVariables.generateUniqueID()\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Adds an input to the parent molecule. If the parent molecule is the top level of the project then the input will be available when the project is shared or imported into another project. Name is editable\"\r\n        /** \r\n         * The value the input is set to, defaults to 10. Is this still used or are we using the value of the attachmentPoint now?\r\n         * @type {number}\r\n         */\r\n        this.value = 10\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Input'\r\n        /** \r\n         * This atom's height for drawing\r\n         * @type {number}\r\n         */\r\n        this.height\r\n        \r\n        /** \r\n         * This atom's old name, used during name changes\r\n         * @type {string}\r\n         */\r\n        this.oldName = this.name\r\n        \r\n        this.addIO('output', 'number or geometry', this, 'number or geometry', 10)\r\n        \r\n        //Add a new input to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO('input', this.name, this.parent, 'number or geometry', 10)\r\n        }\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Updates the side bar to let the user change the atom value. Note that the parent molecule input is set, not this atom's input by changes.\r\n     */ \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList =  super.updateSidebar() //call the super function\r\n        \r\n        this.createEditableValueListItem(valueList,this,'name', 'Name', false)\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Draws the atom on the screen.\r\n     */ \r\n    draw() {\r\n        \r\n        // //Snap the inputs to the far right side\r\n        /**\r\n        * The x position of the atom\r\n        * @type {number}\r\n        */\r\n        this.x = this.radius\r\n\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height = radiusInPixels*1.3\r\n        //Check if the name has been updated\r\n        if(this.name != this.oldName){this.updateParentName()}\r\n        \r\n        //Set colors\r\n        if(this.processing){\r\n            GlobalVariables.c.fillStyle = 'blue'\r\n        }\r\n        else if(this.selected){\r\n            GlobalVariables.c.fillStyle = this.selectedColor\r\n            GlobalVariables.c.strokeStyle = this.defaultColor\r\n            /**\r\n             * This background color\r\n             * @type {string}\r\n             */\r\n            this.color = this.selectedColor\r\n            /**\r\n             * This atoms accent color\r\n             * @type {string}\r\n             */\r\n            this.strokeColor = this.defaultColor\r\n        }\r\n        else{\r\n            GlobalVariables.c.fillStyle = this.defaultColor\r\n            GlobalVariables.c.strokeStyle = this.selectedColor\r\n            this.color = this.defaultColor\r\n            this.strokeColor = this.selectedColor\r\n        }\r\n        \r\n        this.inputs.forEach(input => {\r\n            input.draw()\r\n        })\r\n        if(this.output){\r\n            this.output.draw()\r\n        }\r\n        \r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fillText(this.name, xInPixels + radiusInPixels, yInPixels -radiusInPixels)\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels, yInPixels + this.height/2)\r\n        GlobalVariables.c.lineTo(xInPixels, yInPixels + this.height/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels, yInPixels - this.height/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels, yInPixels - this.height/2)\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.stroke()\r\n        \r\n       \r\n    }\r\n    \r\n    /**\r\n     * Remove the input from the parent molecule, then delete the atom normally.\r\n     */ \r\n    deleteNode(backgroundClickAfter = true, deletePath = true, silent = false) {\r\n        //Remove this input from the parent molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.removeIO('input', this.name, this.parent, silent)\r\n        }\r\n        \r\n        super.deleteNode(backgroundClickAfter, deletePath, silent)\r\n    }\r\n    \r\n    /**\r\n     * Called when the name has changed to updated the name of the parent molecule IO\r\n     */ \r\n    updateParentName(){\r\n        //Run through the parent molecule and find the input with the same name\r\n        this.parent.inputs.forEach(child => {\r\n            if (child.name == this.oldName){\r\n                child.name = this.name\r\n            }\r\n        })\r\n        this.oldName = this.name\r\n    }\r\n    \r\n    /**\r\n     * Grabs the new value from the parent molecule's input, sets this atoms value, then propagates.\r\n     */ \r\n    updateValue(){\r\n        this.parent.inputs.forEach(input => { //Grab the value for this input from the parent's inputs list\r\n            if(input.name == this.name){        //If we have found the matching input\r\n                this.decreaseToProcessCountByOne()\r\n                \r\n                this.value = input.getValue()\r\n                this.path  = this.value\r\n                \r\n                this.output.waitOnComingInformation()         //Lock all of the dependents\r\n                \r\n                this.output.setValue(this.value)\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms.\r\n     */ \r\n    loadTree(){\r\n        this.parent.inputs.forEach(input => { //Grab the value for this input from the parent's inputs list\r\n            if(input.name == this.name){\r\n                input.loadTree()\r\n                this.value = input.value\r\n                this.output.value = input.value\r\n            }\r\n        })\r\n        return this.value\r\n    }\r\n    \r\n    /**\r\n     * Returns the current value being output\r\n     */ \r\n    getOutput(){\r\n        return this.output.getValue()\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 378,
    "kind": "class",
    "name": "Input",
    "memberof": "src/js/molecules/input.js",
    "static": true,
    "longname": "src/js/molecules/input.js~Input",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/input.js",
    "importStyle": "Input",
    "description": "This class creates the input atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 379,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 381,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#value",
    "access": "public",
    "description": "The value the input is set to, defaults to 10. Is this still used or are we using the value of the attachmentPoint now?",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "oldName",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#oldName",
    "access": "public",
    "description": "This atom's old name, used during name changes",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to let the user change the atom value. Note that the parent molecule input is set, not this atom's input by changes.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#draw",
    "access": "public",
    "description": "Draws the atom on the screen.",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#x",
    "access": "public",
    "description": "The x position of the atom",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#color",
    "access": "public",
    "description": "This background color",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#strokeColor",
    "access": "public",
    "description": "This atoms accent color",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#deleteNode",
    "access": "public",
    "description": "Remove the input from the parent molecule, then delete the atom normally.",
    "lineNumber": 143,
    "params": [
      {
        "name": "backgroundClickAfter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "updateParentName",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateParentName",
    "access": "public",
    "description": "Called when the name has changed to updated the name of the parent molecule IO",
    "lineNumber": 155,
    "params": [],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#updateValue",
    "access": "public",
    "description": "Grabs the new value from the parent molecule's input, sets this atoms value, then propagates.",
    "lineNumber": 168,
    "params": [],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "path",
    "memberof": "src/js/molecules/input.js~Input",
    "static": false,
    "longname": "src/js/molecules/input.js~Input#path",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms.",
    "lineNumber": 186,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "getOutput",
    "memberof": "src/js/molecules/input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/input.js~Input#getOutput",
    "access": "public",
    "description": "Returns the current value being output",
    "lineNumber": 200,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "file",
    "name": "src/js/molecules/intersection.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the intersection atom.\r\n */\r\nexport default class Intersection extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry1', this, 'geometry', '')\r\n        this.addIO('input', 'geometry2', this, 'geometry', '')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Intersection'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Intersection'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"The space shared by two shapes.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n\r\n    /**\r\n     * Draw the rectangle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels - radiusInPixels/2)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/4, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2, yInPixels + radiusInPixels/2)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.lineJoin = \"round\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n    \r\n    /**\r\n     * Grab the input geometries and pass them to a worker thread for computation.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const path1 = this.findIOValue('geometry1')\r\n            const path2 = this.findIOValue('geometry2')\r\n            const values = { op: \"intersection\",readPath1: path1, readPath2: path2, writePath: this.path }\r\n            \r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/intersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 403,
    "kind": "class",
    "name": "Intersection",
    "memberof": "src/js/molecules/intersection.js",
    "static": true,
    "longname": "src/js/molecules/intersection.js~Intersection",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/intersection.js",
    "importStyle": "Intersection",
    "description": "This class creates the intersection atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 404,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#draw",
    "access": "public",
    "description": "Draw the rectangle atom & icon.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/intersection.js~Intersection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/intersection.js~Intersection#updateValue",
    "access": "public",
    "description": "Grab the input geometries and pass them to a worker thread for computation.",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "file",
    "name": "src/js/molecules/molecule.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport Connector from '../prototypes/connector.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n//import saveAs from '../lib/FileSaver.js'\r\nimport { extractBomTags } from '../BOM.js'\r\n\r\n/**\r\n * This class creates the Molecule atom.\r\n */\r\nexport default class Molecule extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /** \r\n         * A list of all of the atoms within this Molecule which should be drawn on the screen as objects.\r\n         * @type {array}\r\n         */\r\n        this.nodesOnTheScreen = []\r\n        /** \r\n         * An array of the molecules inputs. Is this not inherited from atom?\r\n         * @type {array}\r\n         */\r\n        this.inputs = []\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.name = 'Molecule'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Molecules provide an organizational structure to contain atoms. Double click on a molecule to enter it. Use the up arrow in the upper right hand corner of the screen to go up one level.\"\r\n        /** \r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Molecule'\r\n        /** \r\n         * The color for the middle dot in the molecule\r\n         * @type {string}\r\n         */\r\n        this.centerColor = '#949294'\r\n        /** \r\n         * A flag to indicate if this molecule is the top level molecule.\r\n         * @type {boolean}\r\n         */\r\n        this.topLevel = false\r\n        /** \r\n         * A flag to indicate if this molecule should simplify it's output.\r\n         * @type {boolean}\r\n         */\r\n        this.simplify = false\r\n        /** \r\n         * The threshold for simplification. This is the maximum fraction of vertices which will be removed.\r\n         * @type {float}\r\n         */\r\n        this.threshold = 0.80\r\n        /** \r\n         * A flag to indicate if this molecule is currently processing.\r\n         * @type {boolean}\r\n         */\r\n        this.processing = false //Should be pulled from atom. Docs made me put this here\r\n        /** \r\n         * A list of things which should be displayed on the the top level sideBar when in toplevel mode.\r\n         * @type {array}\r\n         */\r\n        this.runModeSidebarAdditions = []\r\n        \r\n        /** \r\n         * The total number of atoms contained in this molecule\r\n         * @type {integer}\r\n         */\r\n        this.totalAtomCount = 1\r\n        /** \r\n         * The total number of atoms contained in this molecule which are waiting to process\r\n         * @type {integer}\r\n         */\r\n        this.toProcess = 0\r\n        /**\r\n         * A flag to indicate if this molecule was waiting propagation. If it is it will take place\r\n         *the next time we go up one level.\r\n         * @type {number}\r\n         */\r\n        this.awaitingPropagationFlag = false\r\n        /**\r\n         * A list of available units.\r\n         * @type {object}\r\n         */\r\n        this.units = {\"MM\": 1, \"Inches\": 25.4}\r\n        /**\r\n         * The index of the currently selected unit.\r\n         * @type {array}\r\n         */\r\n        this.unitsIndex = 0\r\n        \r\n        this.setValues(values)\r\n        \r\n        //Add the molecule's output\r\n        this.placeAtom({\r\n            parentMolecule: this, \r\n            x: GlobalVariables.pixelsToWidth(GlobalVariables.canvas.width - 20),\r\n            y: GlobalVariables.pixelsToHeight(GlobalVariables.canvas.height/2),\r\n            parent: this,\r\n            name: 'Output',\r\n            atomType: 'Output',\r\n            uniqueID: GlobalVariables.generateUniqueID()\r\n        }, false)\r\n    }\r\n    \r\n    /**\r\n     * Gives this molecule inputs with the same names as all of it's parent's inputs\r\n     */ \r\n    copyInputsFromParent(){\r\n        if(this.parent){\r\n            this.parent.nodesOnTheScreen.forEach(node => {\r\n                if(node.atomType == \"Input\"){\r\n                    this.placeAtom({\r\n                        parentMolecule: this,\r\n                        y: node.y,\r\n                        parent: this,\r\n                        name: node.name,\r\n                        atomType: 'Input',\r\n                        uniqueID: GlobalVariables.generateUniqueID()\r\n                    }, null, GlobalVariables.availableTypes, true)\r\n                }\r\n            })\r\n        } \r\n    }\r\n    \r\n    /**\r\n     * Add the center dot to the molecule\r\n     */ \r\n    draw(){\r\n        const percentLoaded = 1-this.toProcess/this.totalAtomCount\r\n        if(this.toProcess > 1){\r\n            this.processing = true\r\n        }\r\n        else{\r\n            this.processing = false\r\n        }\r\n        \r\n        super.draw() //Super call to draw the rest\r\n        \r\n        //draw the circle in the middle\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.centerColor\r\n        GlobalVariables.c.moveTo(GlobalVariables.widthToPixels(this.x), GlobalVariables.heightToPixels(this.y))\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x), GlobalVariables.heightToPixels(this.y), GlobalVariables.widthToPixels(this.radius)/2, 0, percentLoaded*Math.PI * 2, false)\r\n        GlobalVariables.c.closePath()\r\n        GlobalVariables.c.fill()\r\n    }\r\n    \r\n    /**\r\n     * Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.\r\n     * @param {number} x - The X coordinate of the click\r\n     * @param {number} y - The Y coordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        super.clickUp(x,y)\r\n        GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(atom =>{\r\n            atom.isMoving = false\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Handle double clicks by replacing the molecule currently on the screen with this one, esentially diving into it.\r\n     * @param {number} x - The x coordinate of the click\r\n     * @param {number} y - The y coordinate of the click\r\n     */ \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        x = GlobalVariables.pixelsToWidth(x)\r\n        y = GlobalVariables.pixelsToHeight(y)\r\n        \r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, this.x, y, this.y)\r\n        \r\n        if (distFromClick < this.radius*2){\r\n            GlobalVariables.currentMolecule = this //set this to be the currently displayed molecule\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n            /**\r\n            * Deselects Atom\r\n            * @type {boolean}\r\n            */\r\n            this.selected = false\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n    \r\n    /**\r\n     * Handle a background click (a click which doesn't land on one of the contained molecules) by deselected everything and displaying a 3D rendering of this molecules output.\r\n     */ \r\n    backgroundClick(){\r\n        /**\r\n         * Flag that the atom is now selected.\r\n         */\r\n        if(this.selected == false){\r\n            this.selected = true\r\n            this.updateSidebar()\r\n            this.sendToRender()   //This is might need to be removed because it was happening too often during loading\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pushes serialized atoms into array if selected\r\n     */\r\n    copy(){\r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            if(atom.selected){\r\n                GlobalVariables.atomsSelected.push(atom.serialize({x: .03, y: .03}))\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Unselect this molecule\r\n     */ \r\n    deselect(){\r\n        this.selected = false\r\n\r\n    }\r\n    \r\n    /**\r\n     * Grab values from the inputs and push them out to the input atoms.\r\n     */ \r\n    updateValue(targetName){\r\n        \r\n        //Molecules are fully transparent so we don't wait for all of the inputs to begin processing the things inside\r\n        \r\n        //Tell the correct input to update\r\n        this.nodesOnTheScreen.forEach(atom => { //Scan all the input atoms\r\n            if(atom.atomType == 'Input' && atom.name == targetName){  //When there is a match\r\n                atom.updateValue() //Tell that input to update it's value\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Reads the path of this molecule's output atom\r\n     */ \r\n    readOutputAtomPath(){\r\n        var returnPath = \"\"\r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            //If we have found this molecule's output atom use it to update the path here\r\n            if(atom.atomType == \"Output\"){\r\n                returnPath = atom.path\r\n            }\r\n        })\r\n        return returnPath\r\n    }\r\n    \r\n    /**\r\n     * Sets the atom to wait on coming information. Basically a pass through, but used for molecules\r\n     */ \r\n    waitOnComingInformation(inputName){\r\n        this.nodesOnTheScreen.forEach( atom => {\r\n            if(atom.name == inputName){\r\n                atom.waitOnComingInformation()\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Called when this molecules value changes\r\n     */ \r\n    propagate(){\r\n        //Set the output nodes with type 'geometry' to be the generated code\r\n        if(this.simplify){\r\n            try{\r\n                this.processing = true\r\n                const values = {op: \"simplify\", readPath: this.readOutputAtomPath(), writePath: this.path, threshold: this.threshold}\r\n                const {answer} = window.ask(values)\r\n                answer.then( () => {\r\n                    this.processing = false\r\n                    this.pushPropagation()\r\n                })\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n        else{\r\n            try{\r\n                this.processing = true\r\n                const values = {op: \"copy\", readPath: this.readOutputAtomPath(), writePath: this.path}\r\n                const {answer} = window.ask(values)\r\n                answer.then( () => {\r\n                    this.processing = false\r\n                    this.pushPropagation()\r\n                })\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Called when this molecules value changes\r\n     */ \r\n    pushPropagation(){\r\n        //Only propagate up if \r\n        if(this != GlobalVariables.currentMolecule){\r\n            if(typeof this.readOutputAtomPath() == \"number\"){\r\n                this.output.setValue(this.readOutputAtomPath())\r\n            }\r\n            else{\r\n                this.output.setValue(this.path)\r\n            }\r\n            this.output.ready = true\r\n        }\r\n        else{\r\n            this.awaitingPropagationFlag = true\r\n        }\r\n        \r\n        //If this molecule is selected, send the updated value to the renderer\r\n        if(this.selected){\r\n            this.sendToRender()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Walks through each of the atoms in this molecule and begins Propagation from them if they have no inputs to wait for\r\n     */ \r\n    beginPropagation(force = false){\r\n        \r\n        //Tell every atom inside this molecule to begin Propagation\r\n        this.nodesOnTheScreen.forEach(node => {\r\n            node.beginPropagation(force)\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Walks through each of the atoms in this molecule and takes a census of how many there are and how many are currently waiting to be processed.\r\n     */\r\n    census(){\r\n        this.totalAtomCount = 0\r\n        this.toProcess = 0\r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            const newInformation = atom.census()\r\n            this.totalAtomCount = this.totalAtomCount + newInformation[0]\r\n            this.toProcess      = this.toProcess + newInformation[1]\r\n        })\r\n        \r\n        if(this.topLevel && this.selected){\r\n            this.updateSidebar()\r\n        }\r\n        \r\n        return [this.totalAtomCount, this.toProcess]\r\n    }\r\n    \r\n    /**\r\n     * Called when the simplify check box is checked or unchecked.\r\n     */\r\n    setSimplifyFlag(anEvent){\r\n        this.simplify = anEvent.target.checked\r\n        this.propagate()\r\n        this.updateSidebar()\r\n    }\r\n    \r\n    changeUnits(newUnitsIndex){\r\n        this.unitsIndex = newUnitsIndex\r\n        this.updateSidebar()\r\n    }\r\n\r\n    /**\r\n     * Updates the side bar to display options like 'go to parent' and 'load a different project'. What is displayed depends on if this atom is the top level, and if we are using run mode.\r\n     */ \r\n    updateSidebar(){\r\n        //Update the side bar to make it possible to change the molecule name\r\n        \r\n        var valueList = super.initializeSideBar()\r\n        \r\n        if(!this.topLevel){\r\n            this.createEditableValueListItem(valueList,this,'name','Name', false)\r\n        }\r\n        else if(this.topLevel){\r\n            //If we are the top level molecule\r\n\r\n            this.createSegmentSlider(valueList)\r\n\r\n            const dropdown = document.createElement('div')\r\n            valueList.appendChild(dropdown)\r\n            this.createDropDown(dropdown, this, Object.keys(this.units), this.unitsIndex, \"Units\", (index)=>{this.changeUnits(index)})\r\n        }\r\n        \r\n        //Display the percent loaded while loading\r\n        const percentLoaded = 100*(1-this.toProcess/this.totalAtomCount)\r\n        if(this.toProcess > 0 && this.topLevel){\r\n            this.createNonEditableValueListItem(valueList,{percentLoaded:percentLoaded.toFixed(0) + \"%\"},\"percentLoaded\",'Loading')\r\n        }\r\n        \r\n        //removes 3d view menu on background click\r\n        let viewerBar = document.querySelector('#viewer_bar')\r\n        if(viewerBar && viewerBar.firstChild){\r\n            while (viewerBar.firstChild) {\r\n                viewerBar.removeChild(viewerBar.firstChild)\r\n                viewerBar.setAttribute('style', 'background-color:none;')\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        //Add options to set all of the inputs\r\n        this.inputs.forEach(child => {\r\n            if(child.type == 'input' && child.valueType != 'geometry'){\r\n                this.createEditableValueListItem(valueList,child,'value', child.name, true)\r\n            }\r\n        })\r\n        \r\n        //Add the check box to simplify\r\n        this.createCheckbox(valueList,\"Simplify output\",this.simplify,(anEvent)=>{this.setSimplifyFlag(anEvent)})\r\n        \r\n        if(this.simplify){\r\n            this.createEditableValueListItem(valueList,this,'threshold', 'Threshold', true)\r\n        }\r\n\r\n        //Only bother to generate the bom if we are not currently processing data\r\n        if(this.toProcess == 0){\r\n            this.displaySimpleBOM(valueList)\r\n        }\r\n        \r\n        this.displaySidebarReadme(valueList)\r\n        \r\n        return valueList\r\n        \r\n    }\r\n\r\n    /**\r\n     * Creates segment length slider and passes value to Global Variables\r\n     */ \r\n    createSegmentSlider(valueList){\r\n\r\n        const unitsScalor = this.units[Object.keys(this.units)[this.unitsIndex]]\r\n\r\n        //Creates value slider\r\n        var rangeElement = document.createElement('input')\r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        div.setAttribute('class', 'slider-container')\r\n        valueList.appendChild(div)\r\n        var rangeLabel = document.createElement('label')\r\n        rangeLabel.textContent = \"Display quality/Length of Segments\"\r\n        div.appendChild(rangeLabel)\r\n        rangeLabel.appendChild(rangeElement)\r\n        rangeElement.setAttribute('type', 'range')\r\n        rangeElement.setAttribute('min', '' + .001/unitsScalor)\r\n        rangeElement.setAttribute('max', '' + 1/unitsScalor)\r\n        rangeElement.setAttribute('step', '' + .05/unitsScalor)\r\n        rangeElement.setAttribute('class', 'slider')\r\n        rangeElement.setAttribute('value', GlobalVariables.circleSegmentSize)\r\n            \r\n        var rangeValueLabel = document.createElement('ul')\r\n        rangeValueLabel.innerHTML= '<li>Export</li><li>Draft</li> '\r\n        rangeValueLabel.setAttribute('class', 'range-labels')\r\n        rangeLabel.appendChild(rangeValueLabel)\r\n\r\n        var rangeValue = document.createElement('p')\r\n        rangeValue.textContent = parseFloat(rangeElement.value).toFixed(5).toString()\r\n        rangeLabel.appendChild(rangeValue)\r\n\r\n\r\n        //on slider change send value to global variables\r\n        rangeElement.oninput = function() {\r\n            rangeValue.textContent = this.value\r\n            GlobalVariables.circleSegmentSize = this.value\r\n            \r\n        }\r\n        \r\n        rangeElement.addEventListener('touchend', () => {\r\n            GlobalVariables.topLevelMolecule.refreshCircles()\r\n        })\r\n        \r\n        rangeElement.addEventListener('mouseup', () => {\r\n            GlobalVariables.topLevelMolecule.refreshCircles()\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Used to trigger all of the circle atoms within a molecule and all of the molecules within it to update their value. Used when the number of segments changes.\r\n     */ \r\n    refreshCircles(){\r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            if(atom.atomType == \"Circle\"){\r\n                atom.updateValue()\r\n            }\r\n            else if(atom.atomType == \"Molecule\" || atom.atomType == \"GitHubMolecule\"){\r\n                atom.refreshCircles()\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Creates a simple BOM list which cannot be edited. The generated element is added to the passed list.\r\n     * @param {object} list - The HTML object to append the created element to.\r\n     */ \r\n    displaySimpleBOM(list){\r\n        try{\r\n            \r\n            const placementFunction = (bomList) => {\r\n                \r\n                if(bomList.length > 0){\r\n                \r\n                    list.appendChild(document.createElement('br'))\r\n                    list.appendChild(document.createElement('br'))\r\n                    \r\n                    var div = document.createElement('h3')\r\n                    div.setAttribute('style','text-align:center;')\r\n                    list.appendChild(div)\r\n                    var valueText = document.createTextNode('Bill Of Materials')\r\n                    div.appendChild(valueText)\r\n                    \r\n                    var x = document.createElement('HR')\r\n                    list.appendChild(x)\r\n                    \r\n                    bomList.forEach(bomEntry => {\r\n                        this.createNonEditableValueListItem(list,bomEntry,'numberNeeded', bomEntry.BOMitemName, false)\r\n                    })\r\n                }\r\n            }\r\n            \r\n            extractBomTags(this.path, placementFunction)\r\n            \r\n        }catch(err){\r\n            this.setAlert(\"Unable to read BOM\")\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Creates markdown version of the readme content for this atom in the sidebar\r\n     * @param {object} list - The HTML object to append the created element to.\r\n     */ \r\n    displaySidebarReadme(list){\r\n        \r\n        \r\n        var readmeContent = \"\"\r\n        \r\n        this.requestReadme().forEach(item => {\r\n            \r\n            readmeContent = readmeContent + item + \"\\n\\n\\n\"\r\n        })\r\n        \r\n        if(readmeContent.length > 0){    //If there is anything to say\r\n        \r\n            list.appendChild(document.createElement('br'))\r\n            list.appendChild(document.createElement('br'))\r\n\r\n            var div = document.createElement('h3')\r\n            div.setAttribute('style','float:right;')\r\n           \r\n            list.appendChild(div)\r\n            var valueText = document.createTextNode(`- ReadMe`)\r\n            div.appendChild(valueText)\r\n            \r\n            var x = document.createElement('HR')\r\n            x.setAttribute('style','width:100%;')\r\n            list.appendChild(x)\r\n            \r\n            this.createMarkdownListItem(list,readmeContent)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Replace the currently displayed molecule with the parent of this molecule...moves the user up one level.\r\n     */\r\n    goToParentMolecule(){\r\n        //Go to the parent molecule if there is one\r\n        if(!this.topLevel){\r\n            this.nodesOnTheScreen.forEach(atom => {\r\n                atom.selected = false\r\n            })\r\n            \r\n            GlobalVariables.currentMolecule = this.parent //set parent this to be the currently displayed molecule\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n            \r\n            //Push any changes up to the next level if there are any changes waiting in the output\r\n            if(this.awaitingPropagationFlag == true){\r\n                this.propagate()\r\n                this.awaitingPropagationFlag = false\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Check to see if any of this molecules children have contributions to make to the README file. Children closer to the top left will be applied first. TODO: No contribution should be made if it's just a title.\r\n     */\r\n    requestReadme(){\r\n        var generatedReadme = super.requestReadme()\r\n        \r\n        var sortableAtomsList = this.nodesOnTheScreen\r\n        sortableAtomsList.sort(function(a, b){return GlobalVariables.distBetweenPoints(a.x, 0, a.y, 0)-GlobalVariables.distBetweenPoints(b.x, 0, b.y, 0)})\r\n        \r\n        sortableAtomsList.forEach(atom => {\r\n            generatedReadme = generatedReadme.concat(atom.requestReadme())\r\n        })\r\n        \r\n        //Check to see if any of the children added anything if not, remove the bit we added\r\n        if(generatedReadme[generatedReadme.length - 1] == '## ' + this.name){\r\n            generatedReadme.pop()\r\n        }\r\n        \r\n        return generatedReadme\r\n    }\r\n    \r\n    /**\r\n     * Generates and returns a object representation of this molecule and all of its children.\r\n     */\r\n    serialize(offset = {x: 0, y: 0}){\r\n        \r\n        var allAtoms = [] //An array of all the atoms contained in this molecule\r\n        var allConnectors = [] //An array of all the connectors contained in this molecule\r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            //Store a representation of the atom\r\n            allAtoms.push(atom.serialize())\r\n            //Store a representation of the atom's connectors\r\n            if(atom.output){\r\n                atom.output.connectors.forEach(connector => {\r\n                    allConnectors.push(connector.serialize())\r\n                })\r\n            }\r\n        })\r\n        \r\n        var thisAsObject = super.serialize(offset)    //Do the atom serialization to create an object, then add all the bits of this one to it\r\n        thisAsObject.topLevel = this.topLevel\r\n        thisAsObject.allAtoms = allAtoms\r\n        thisAsObject.allConnectors = allConnectors\r\n        thisAsObject.fileTypeVersion = 1\r\n        thisAsObject.simplify= this.simplify\r\n        thisAsObject.unitsIndex = this.unitsIndex\r\n        \r\n        return thisAsObject\r\n    }\r\n    \r\n    /**\r\n     * Load the children of this from a JSON representation\r\n     * @param {object} json - A json representation of the molecule\r\n     * @param {object} values - An array of values to apply to this molecule before de-serializing it's contents. Used by githubmolecules to set top level correctly\r\n     */\r\n    deserialize(json, values = {}, forceBeginPropagation = false){\r\n        //Find the target molecule in the list\r\n        let promiseArray = []\r\n        \r\n        this.setValues(json) //Grab the values of everything from the passed object\r\n        this.setValues(values) //Over write those values with the passed ones where needed\r\n        \r\n        if(json.allAtoms){\r\n            json.allAtoms.forEach(atom => { //Place the atoms\r\n                const promise = this.placeAtom(atom, false)\r\n                promiseArray.push(promise)\r\n                this.setValues([]) //Call set values again with an empty list to trigger loading of IO values from memory\r\n            })\r\n        }\r\n        \r\n        return Promise.all(promiseArray).then( ()=> { //Once all the atoms are placed we can finish\r\n            \r\n            this.setValues([])//Call set values again with an empty list to trigger loading of IO values from memory\r\n            \r\n            //Place the connectors\r\n            if(json.allConnectors){\r\n                json.allConnectors.forEach(connector => {\r\n                    this.placeConnector(connector)\r\n                })\r\n            }\r\n            \r\n            if(this.topLevel){\r\n                \r\n                GlobalVariables.totalAtomCount = GlobalVariables.numberOfAtomsToLoad\r\n                \r\n                this.census()\r\n                this.loadTree()  //Walks back up the tree from this molecule loading input values from any connected atoms\r\n                \r\n                const splits = this.path.split('/')\r\n                const values = {op: \"getPathsList\", prefacePath: splits[0]+'/'+splits[1]}\r\n                const {answer} = window.ask(values)\r\n                answer.then( answer => {\r\n                \r\n                    GlobalVariables.availablePaths = answer\r\n                    this.beginPropagation(forceBeginPropagation)\r\n                \r\n                })\r\n                this.backgroundClick()\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Delete this molecule and everything in it.\r\n     */ \r\n    deleteNode(backgroundClickAfter = true, deletePath = true, silent = false){\r\n        \r\n        //make a copy of the nodes on the screen array since we will be modifying it\r\n        const copyOfNodesOnTheScreen = [...this.nodesOnTheScreen]\r\n        \r\n        copyOfNodesOnTheScreen.forEach(atom => {\r\n            atom.deleteNode(backgroundClickAfter, deletePath, silent)\r\n        })\r\n        \r\n        super.deleteNode(backgroundClickAfter, deletePath, silent)\r\n    }\r\n    \r\n    /**\r\n     * Triggers the loadTree process from this molecules output\r\n     */ \r\n    loadTree(){\r\n        //We want to walk the tree from this's output and anything which has nothing coming out of it. Basically all the graph end points.\r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {\r\n            //If we have found this molecule's output atom use it to update the path here\r\n            if(atom.atomType == \"Output\"){\r\n                atom.loadTree()\r\n            }\r\n            //If we have found an atom with nothing connected to it\r\n            if(atom.output){\r\n                if(atom.output.connectors.length == 0){\r\n                    atom.loadTree()\r\n                }\r\n            }\r\n        })\r\n        \r\n        this.output.value = this.path\r\n        return this.path\r\n    }\r\n    \r\n    /**\r\n     * Places a new atom inside the molecule\r\n     * @param {object} newAtomObj - An object defining the new atom to be placed\r\n     * @param {array} moleculeList - Only passed if we are placing an instance of Molecule.\r\n     * @param {object} typesList - A dictionary of all of the available types with references to their constructors\r\n     * @param {boolean} unlock - A flag to indicate if this atom should spawn in the unlocked state.\r\n     */\r\n    async placeAtom(newAtomObj, unlock){\r\n        \r\n        GlobalVariables.numberOfAtomsToLoad = GlobalVariables.numberOfAtomsToLoad + 1 //Indicate that one more atom needs to be loaded\r\n        \r\n        try{\r\n            var promise = null\r\n            \r\n            for(var key in GlobalVariables.availableTypes) {\r\n                if (GlobalVariables.availableTypes[key].atomType == newAtomObj.atomType){\r\n                    newAtomObj.parent = this\r\n                    var atom = new GlobalVariables.availableTypes[key].creator(newAtomObj)\r\n                    \r\n                    //reassign the name of the Inputs to preserve linking\r\n                    if(atom.atomType == 'Input' && typeof newAtomObj.name !== 'undefined'){\r\n                        atom.name = newAtomObj.name\r\n                        atom.draw() //The poling happens in draw :roll_eyes:\r\n                    }\r\n\r\n                    //If this is a molecule, de-serialize it\r\n                    if(atom.atomType == 'Molecule'){\r\n                        promise = atom.deserialize(newAtomObj)\r\n                    }\r\n                    \r\n                    //If this is a github molecule load it from the web\r\n                    if(atom.atomType == 'GitHubMolecule'){\r\n                        promise = atom.loadProjectByID(atom.projectID)\r\n                        if(unlock){\r\n                            promise.then( ()=> {\r\n                                atom.beginPropagation()\r\n                            })\r\n                        }\r\n                    }\r\n                    \r\n                    //If this is an output, check to make sure there are no existing outputs, and if there are delete the existing one because there can only be one\r\n                    if(atom.atomType == 'Output'){\r\n                        //Check for existing outputs\r\n                        this.nodesOnTheScreen.forEach(atom => {\r\n                            if(atom.atomType == 'Output'){\r\n                                atom.deleteOutputAtom(false) //Remove them\r\n                            }\r\n                        })\r\n                    }\r\n                    \r\n                    //Add the atom to the list to display\r\n                    this.nodesOnTheScreen.push(atom)\r\n                    \r\n                    if(unlock){\r\n                        \r\n                        //Make this molecule spawn with all of it's parent's inputs\r\n                        if(atom.atomType == 'Molecule'){ //Not GitHubMolecule\r\n                            atom.copyInputsFromParent()\r\n                            \r\n                            //Make begin propagation from an atom when it is placed. This is used when copy and pasting molecules.\r\n                            if(promise != null){\r\n                                promise.then( ()=> {\r\n                                    atom.beginPropagation()\r\n                                })\r\n                            }\r\n                            else{\r\n                                atom.beginPropagation()\r\n                            }\r\n                            \r\n                        }\r\n                        \r\n                        //Fake a click on the newly placed atom\r\n                        const downEvt = new MouseEvent('mousedown', {\r\n                            clientX: atom.x,\r\n                            clientY: atom.y\r\n                        })\r\n                        const upEvt = new MouseEvent('mouseup', {\r\n                            clientX: atom.x,\r\n                            clientY: atom.y\r\n                        })\r\n                        \r\n                        atom.updateValue()\r\n                        \r\n                        document.getElementById('flow-canvas').dispatchEvent(downEvt)\r\n                        document.getElementById('flow-canvas').dispatchEvent(upEvt)\r\n                    }\r\n                }\r\n            }\r\n            return promise\r\n        }catch(err){\r\n            console.warn(\"Unable to place: \" + newAtomObj)\r\n            console.warn(err)\r\n            return Promise.resolve()\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * Places a new connector within the molecule\r\n     * @param {object} connectorObj - An object representation of the connector specifying its inputs and outputs.\r\n     */\r\n    placeConnector(connectorObj){\r\n        \r\n        var outputAttachmentPoint = false\r\n        var inputAttachmentPoint = false\r\n        \r\n        this.nodesOnTheScreen.forEach(atom => {             //Check each atom on the screen\r\n            if (atom.uniqueID == connectorObj.ap1ID){           //When we have found the output atom\r\n                outputAttachmentPoint = atom.output\r\n            }\r\n            if (atom.uniqueID == connectorObj.ap2ID){           //When we have found the input atom\r\n                atom.inputs.forEach(input => {                  //Check each of its inputs\r\n                    if(input.name == connectorObj.ap2Name){\r\n                        inputAttachmentPoint = input                //Until we find the one with the right name\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        \r\n        if(outputAttachmentPoint && inputAttachmentPoint){             //If we have found the output and input\r\n            new Connector({\r\n                atomType: 'Connector',\r\n                attachmentPoint1: outputAttachmentPoint,\r\n                attachmentPoint2: inputAttachmentPoint,\r\n            })\r\n        }\r\n        else{\r\n            console.warn(\"Unable to place connector\")\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sends the output of this molecule to be displayed in the 3D view.\r\n     */\r\n    sendToRender(){\r\n        super.sendToRender()\r\n        if(this.value != null){\r\n            if(this.topLevel){\r\n                this.basicThreadValueProcessing(this.value, \"bounding box\")\r\n            }\r\n        }\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/molecule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 411,
    "kind": "class",
    "name": "Molecule",
    "memberof": "src/js/molecules/molecule.js",
    "static": true,
    "longname": "src/js/molecules/molecule.js~Molecule",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/molecule.js",
    "importStyle": "Molecule",
    "description": "This class creates the Molecule atom.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 412,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "nodesOnTheScreen",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#nodesOnTheScreen",
    "access": "public",
    "description": "A list of all of the atoms within this Molecule which should be drawn on the screen as objects.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#inputs",
    "access": "public",
    "description": "An array of the molecules inputs. Is this not inherited from atom?",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#name",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "centerColor",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#centerColor",
    "access": "public",
    "description": "The color for the middle dot in the molecule",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "topLevel",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#topLevel",
    "access": "public",
    "description": "A flag to indicate if this molecule is the top level molecule.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "simplify",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#simplify",
    "access": "public",
    "description": "A flag to indicate if this molecule should simplify it's output.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "threshold",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#threshold",
    "access": "public",
    "description": "The threshold for simplification. This is the maximum fraction of vertices which will be removed.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#processing",
    "access": "public",
    "description": "A flag to indicate if this molecule is currently processing.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "runModeSidebarAdditions",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#runModeSidebarAdditions",
    "access": "public",
    "description": "A list of things which should be displayed on the the top level sideBar when in toplevel mode.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "totalAtomCount",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#totalAtomCount",
    "access": "public",
    "description": "The total number of atoms contained in this molecule",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "toProcess",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#toProcess",
    "access": "public",
    "description": "The total number of atoms contained in this molecule which are waiting to process",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "integer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "awaitingPropagationFlag",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#awaitingPropagationFlag",
    "access": "public",
    "description": "A flag to indicate if this molecule was waiting propagation. If it is it will take place\nthe next time we go up one level.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "units",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#units",
    "access": "public",
    "description": "A list of available units.",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "unitsIndex",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#unitsIndex",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "copyInputsFromParent",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#copyInputsFromParent",
    "access": "public",
    "description": "Gives this molecule inputs with the same names as all of it's parent's inputs",
    "lineNumber": 120,
    "params": [],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#draw",
    "access": "public",
    "description": "Add the center dot to the molecule",
    "lineNumber": 140,
    "params": [],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#clickUp",
    "access": "public",
    "description": "Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y coordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#doubleClick",
    "access": "public",
    "description": "Handle double clicks by replacing the molecule currently on the screen with this one, esentially diving into it.",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#selected",
    "access": "public",
    "description": "Deselects Atom",
    "lineNumber": 193,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "backgroundClick",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#backgroundClick",
    "access": "public",
    "description": "Handle a background click (a click which doesn't land on one of the contained molecules) by deselected everything and displaying a 3D rendering of this molecules output.",
    "lineNumber": 203,
    "params": [],
    "return": null
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "copy",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#copy",
    "access": "public",
    "description": "Pushes serialized atoms into array if selected",
    "lineNumber": 217,
    "params": [],
    "return": null
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "deselect",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deselect",
    "access": "public",
    "description": "Unselect this molecule",
    "lineNumber": 228,
    "params": [],
    "return": null
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#updateValue",
    "access": "public",
    "description": "Grab values from the inputs and push them out to the input atoms.",
    "lineNumber": 236,
    "params": [
      {
        "name": "targetName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "readOutputAtomPath",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#readOutputAtomPath",
    "access": "public",
    "description": "Reads the path of this molecule's output atom",
    "lineNumber": 251,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#waitOnComingInformation",
    "access": "public",
    "description": "Sets the atom to wait on coming information. Basically a pass through, but used for molecules",
    "lineNumber": 265,
    "params": [
      {
        "name": "inputName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "propagate",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#propagate",
    "access": "public",
    "description": "Called when this molecules value changes",
    "lineNumber": 276,
    "params": [],
    "return": null
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "pushPropagation",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#pushPropagation",
    "access": "public",
    "description": "Called when this molecules value changes",
    "lineNumber": 305,
    "params": [],
    "return": null
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#beginPropagation",
    "access": "public",
    "description": "Walks through each of the atoms in this molecule and begins Propagation from them if they have no inputs to wait for",
    "lineNumber": 329,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "census",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#census",
    "access": "public",
    "description": "Walks through each of the atoms in this molecule and takes a census of how many there are and how many are currently waiting to be processed.",
    "lineNumber": 340,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "setSimplifyFlag",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#setSimplifyFlag",
    "access": "public",
    "description": "Called when the simplify check box is checked or unchecked.",
    "lineNumber": 360,
    "params": [
      {
        "name": "anEvent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "changeUnits",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#changeUnits",
    "access": "public",
    "description": null,
    "lineNumber": 366,
    "undocument": true,
    "params": [
      {
        "name": "newUnitsIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to display options like 'go to parent' and 'load a different project'. What is displayed depends on if this atom is the top level, and if we are using run mode.",
    "lineNumber": 374,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "createSegmentSlider",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#createSegmentSlider",
    "access": "public",
    "description": "Creates segment length slider and passes value to Global Variables",
    "lineNumber": 437,
    "params": [
      {
        "name": "valueList",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "refreshCircles",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#refreshCircles",
    "access": "public",
    "description": "Used to trigger all of the circle atoms within a molecule and all of the molecules within it to update their value. Used when the number of segments changes.",
    "lineNumber": 487,
    "params": [],
    "return": null
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "displaySimpleBOM",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#displaySimpleBOM",
    "access": "public",
    "description": "Creates a simple BOM list which cannot be edited. The generated element is added to the passed list.",
    "lineNumber": 502,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to append the created element to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "displaySidebarReadme",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#displaySidebarReadme",
    "access": "public",
    "description": "Creates markdown version of the readme content for this atom in the sidebar",
    "lineNumber": 538,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to append the created element to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "goToParentMolecule",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#goToParentMolecule",
    "access": "public",
    "description": "Replace the currently displayed molecule with the parent of this molecule...moves the user up one level.",
    "lineNumber": 571,
    "params": [],
    "return": null
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#requestReadme",
    "access": "public",
    "description": "Check to see if any of this molecules children have contributions to make to the README file. Children closer to the top left will be applied first. TODO: No contribution should be made if it's just a title.",
    "lineNumber": 592,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#serialize",
    "access": "public",
    "description": "Generates and returns a object representation of this molecule and all of its children.",
    "lineNumber": 613,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "deserialize",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deserialize",
    "access": "public",
    "description": "Load the children of this from a JSON representation",
    "lineNumber": 645,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "A json representation of the molecule"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values to apply to this molecule before de-serializing it's contents. Used by githubmolecules to set top level correctly"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#deleteNode",
    "access": "public",
    "description": "Delete this molecule and everything in it.",
    "lineNumber": 695,
    "params": [
      {
        "name": "backgroundClickAfter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#loadTree",
    "access": "public",
    "description": "Triggers the loadTree process from this molecules output",
    "lineNumber": 710,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "placeAtom",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#placeAtom",
    "access": "public",
    "description": "Places a new atom inside the molecule",
    "lineNumber": 737,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "newAtomObj",
        "description": "An object defining the new atom to be placed"
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "moleculeList",
        "description": "Only passed if we are placing an instance of Molecule."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "typesList",
        "description": "A dictionary of all of the available types with references to their constructors"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "unlock",
        "description": "A flag to indicate if this atom should spawn in the unlocked state."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "placeConnector",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#placeConnector",
    "access": "public",
    "description": "Places a new connector within the molecule",
    "lineNumber": 831,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connectorObj",
        "description": "An object representation of the connector specifying its inputs and outputs."
      }
    ],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/molecules/molecule.js~Molecule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/molecule.js~Molecule#sendToRender",
    "access": "public",
    "description": "Sends the output of this molecule to be displayed in the 3D view.",
    "lineNumber": 864,
    "params": [],
    "return": null
  },
  {
    "__docId__": 476,
    "kind": "file",
    "name": "src/js/molecules/move.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the move atom.\r\n */\r\nexport default class Move extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '', false, true)\r\n        this.addIO('input', 'xDist', this, 'number', 0)\r\n        this.addIO('input', 'yDist', this, 'number', 0)\r\n        this.addIO('input', 'zDist', this, 'number', 0)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Move'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Move'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Moves a shape laterally in X, Y, Z.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Draw the move icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x+this.radius/5), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/2.5), 0, Math.PI * 2, false)       \r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()  \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x-this.radius/5), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/2.5), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()  \r\n          \r\n\r\n    }\r\n    /**\r\n     * Pass the input geometry to a worker function to compute the translation.\r\n     */\r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            try{\r\n                var inputPath = this.findIOValue('geometry')\r\n                var x = this.findIOValue('xDist')\r\n                var y = this.findIOValue('yDist')\r\n                var z = this.findIOValue('zDist')\r\n                const values = { op: \"move\", x:x, y:y, z:z, readPath: inputPath, writePath: this.path }\r\n                \r\n                this.basicThreadValueProcessing(values)\r\n            }catch(err){this.setAlert(err)}\r\n        }\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/move.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 477,
    "kind": "class",
    "name": "Move",
    "memberof": "src/js/molecules/move.js",
    "static": true,
    "longname": "src/js/molecules/move.js~Move",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/move.js",
    "importStyle": "Move",
    "description": "This class creates the move atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 478,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/move.js~Move",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/move.js~Move#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/move.js~Move",
    "static": false,
    "longname": "src/js/molecules/move.js~Move#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/move.js~Move",
    "static": false,
    "longname": "src/js/molecules/move.js~Move#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/move.js~Move",
    "static": false,
    "longname": "src/js/molecules/move.js~Move#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/move.js~Move",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/move.js~Move#draw",
    "access": "public",
    "description": "Draw the move icon.",
    "lineNumber": 44,
    "params": [],
    "return": null
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/move.js~Move",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/move.js~Move#updateValue",
    "access": "public",
    "description": "Pass the input geometry to a worker function to compute the translation.",
    "lineNumber": 70,
    "params": [],
    "return": null
  },
  {
    "__docId__": 484,
    "kind": "file",
    "name": "src/js/molecules/nest.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\n\r\nimport * as svgNest from '../lib/svgnest.js'\r\n\r\n/**\r\n * This class creates the nest atom which lets you download a nested .svg file.\r\n */\r\nexport default class Nest extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Nest'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Nest'\r\n        \r\n        /**\r\n         * This atom's value. Contains the value of the input geometry, not the stl\r\n         * @type {string}\r\n         */\r\n        this.value = null\r\n\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height = 0\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        this.addIO('input', 'spacing', this, 'number', 0.3)\r\n        this.addIO('input', 'curveTolerance', this, 'number', 0.3)\r\n        \r\n        this.setValues(values)\r\n\r\n        /**\r\n         * Number of times nesting has been tried\r\n         */\r\n        this.iterations = 0\r\n        /**\r\n         * Boolean to determine wether nesting process is ongoing\r\n         */\r\n        this.isworking = false\r\n        /**\r\n         * Length and width inputs for svg placement\r\n         */\r\n        this.material = {\"width\": 121,\"length\":243}\r\n    }\r\n   \r\n    /**\r\n     * Draw the svg atom which has a SVG icon.\r\n     */ \r\n    draw() {\r\n        super.draw(\"rect\")\r\n        \r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        this.height = pixelsRadius * 1.5\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius/1.2}px Work Sans Bold`\r\n        GlobalVariables.c.fillText('SVG', GlobalVariables.widthToPixels(this.x- this.radius/1.3), GlobalVariables.heightToPixels(this.y)+this.height/6)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    /**\r\n     * Re excecutes configure function for nesting if values are updated by user\r\n     */ \r\n    setValue(){\r\n        this.setConfig()\r\n    }\r\n\r\n    /**\r\n     * Set the value to be the input geometry, then call super updateValue()\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            const values = [this.findIOValue('geometry')]\r\n            this.basicThreadValueProcessing(values, \"outline\")\r\n        }catch(err){this.setAlert(err)}\r\n        //Saves new config values for nesting (Stops any nesting in progress)\r\n        this.setConfig()\r\n\r\n    } \r\n    \r\n    /**\r\n     * Create buttons to start nest, to download the .svg file and checkbox \"Part in Part\".\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createEditableValueListItem(list,this.material,'width', 'Width of Material', true, () => this.setConfig())\r\n        this.createEditableValueListItem(list,this.material,'length','Length of Material', true, () => this.setConfig())\r\n\r\n        //this.createEditableValueListItem(list,this.BOMitem,'costUSD', 'Price', true, () => this.updateValue())\r\n        this.createCheckbox(list,\"Part in Part\", false, ()=>{this.setConfig()})\r\n        this.createButton(list, this, \"Start Nest\", ()=>{this.svgToNest()})\r\n        //remember to disable until svg is nested \r\n        this.createButton(list, this, \"Download SVG\", ()=>{this.downloadSvg()})   \r\n\r\n        var svgButton = document.getElementById(\"DownloadSVG-button\")\r\n        svgButton.disabled = true\r\n        svgButton.classList.add(\"disabled\")      \r\n    }\r\n\r\n    /**\r\n     * Update values for config(). Called when the values on sidebar have been edited.\r\n     */ \r\n    setConfig() {\r\n        // config = [distance, curve tolerance,rotations, population size, mutation rate, use holes, concave]\r\n        const configKeys = [\"spacing\",\"curveTolerance\"]\r\n        var c = {\"useholes\":false,\"exploreConcave\":false,\"rotations\":4,\"mutationRate\":10,\"populationSize\":10} \r\n        for(var i=0; i<configKeys.length; i++){\r\n            var key = configKeys[i]\r\n            c[key] = this.findIOValue(key)\r\n        }\r\n        var check1 = document.getElementById(\"Part in Part\")\r\n        if(check1 !== null){\r\n            if (check1.checked){\r\n                c[check1] = true\r\n            }\r\n            else{\r\n                c[check1] = false\r\n               \r\n            }   \r\n        }                  \r\n\r\n        window.SvgNest.config(c)\r\n        \r\n        var svgButton = document.getElementById(\"DownloadSVG-button\")  \r\n        if (svgButton !== null){\r\n            svgButton.disabled = true\r\n            svgButton.classList.add(\"disabled\")  \r\n        }\r\n                \r\n        // new configs will invalidate current nest\r\n        if(this.isworking){\r\n            this.stopnest()\r\n        \r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Turns geometry values into svg then starts nest and returns nested SVG\r\n     */ \r\n    svgToNest(){\r\n\r\n        //turn into svg\r\n        const values = [this.findIOValue('geometry')]\r\n        \r\n        const computeValue = async (values, key) => {\r\n            try{\r\n                return await GlobalVariables.ask({values: values, op: key})\r\n            }\r\n            catch(err){\r\n                this.setAlert(err)\r\n            }\r\n        }\r\n        var unestedSVG\r\n\r\n        computeValue(values, \"svg\").then(result => {\r\n            if (result != -1 ){\r\n                var decoder = new TextDecoder('utf8')\r\n                unestedSVG = decoder.decode(result)\r\n                \r\n                return unestedSVG\r\n            }else{\r\n                this.setAlert(\"Unable to compute\")\r\n            }\r\n        }).then(result =>{ \r\n            try{\r\n                var svg = SvgNest.parsesvg(result)\r\n                var display = document.getElementById('select')\r\n                {\r\n                    var wholeSVG = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\r\n                    // Copy relevant scaling info\r\n                    wholeSVG.setAttribute('width',this.material[\"width\"])\r\n                    wholeSVG.setAttribute('height',this.material[\"length\"])\r\n                    wholeSVG.setAttribute('viewBox',svg.getAttribute('viewBox'))\r\n                    var rect = document.createElementNS(wholeSVG.namespaceURI,'rect')\r\n                    rect.setAttribute('x', wholeSVG.viewBox.baseVal.x)\r\n                    rect.setAttribute('y', wholeSVG.viewBox.baseVal.x)\r\n                    rect.setAttribute('width', \"100%\")\r\n                    rect.setAttribute('height', \"100%\")\r\n                    rect.setAttribute('class', 'fullRect')\r\n\r\n                    wholeSVG.appendChild(rect)\r\n                }\r\n                display.innerHTML = ''\r\n                display.appendChild(wholeSVG) // As a default bin in background\r\n                display.appendChild(svg)\r\n            }\r\n            catch(e){\r\n                console.warn(e)\r\n                //message.innerHTML = e;\r\n                //message.className = 'error animated bounce';\r\n                return\r\n            }                   \r\n                        \r\n            //hideSplash();\r\n            //message.className = 'active animated bounce';\r\n            //start.className = 'button start disabled';\r\n                        \r\n            //attachSvgListeners(svg);\r\n\r\n            //set the bin to wholeSVG\r\n            this.attachSvgListeners(wholeSVG)\r\n                        \r\n                     \r\n        })\r\n    }\r\n    /**\r\n     * Defines bin which will be used to place parts for nested svg\r\n     */ \r\n    attachSvgListeners(svg){\r\n        // auto set bin to be whole svg\r\n        for(var i=0; i<svg.childNodes.length; i++){\r\n            var node = svg.childNodes[i]\r\n                    \r\n            if(node.nodeType == 1){\r\n                node.setAttribute(\"class\", \"active\")\r\n                        \r\n                //if(display.className == 'disabled'){\r\n                //    return;\r\n                //}\r\n                            \r\n                var currentbin = document.querySelector('#select .active')\r\n                if(currentbin){\r\n                    var className = currentbin.getAttribute('class').replace('active', '').trim()\r\n                    if(!className)\r\n                        currentbin.removeAttribute('class')\r\n                    else\r\n                        currentbin.setAttribute('class', className)\r\n                }\r\n                SvgNest.setbin(node) \r\n                node.setAttribute('class',(node.getAttribute('class') ? node.getAttribute('class')+' ' : '') + 'active')\r\n                            \r\n                //start.className = 'button start animated bounce';\r\n                //message.className = '';\r\n                this.startnest()\r\n                        \r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Starts nesting, replaces html svg for nested svg\r\n     */ \r\n    async startnest(){\r\n        // Once started, don't allow this anymore       \r\n        SvgNest.start(this.progress,this.renderSvg)\r\n        //remember to change label so nest can stop\r\n        //startlabel.innerHTML = 'Stop Nest';\r\n        //start.className = 'button spinner';\r\n        //configbutton.className = 'button config disabled';\r\n        //config.className = '';\r\n\r\n        var svg = document.querySelector('#select svg')\r\n        if(svg){\r\n            svg.removeAttribute('style')\r\n        }\r\n        this.isworking = true\r\n    }\r\n     \r\n    /**\r\n     * Stops nest and changes flag to not working\r\n     */        \r\n    stopnest(){\r\n        SvgNest.stop()\r\n        //startlabel.innerHTML = 'Start Nest'\r\n        //start.className = 'button start'\r\n        //configbutton.className = 'button config'\r\n                \r\n        this.isworking = false\r\n    }\r\n\r\n            \r\n    /**\r\n     * NOT WORKING Defines percentage of nesting and estimates time and iterations\r\n              \r\n    progress(percent, prevpercent = 0){\r\n        \r\n        var transition = percent > prevpercent //? '; transition: width 0.1s' : ''\r\n        //document.getElementById('info_progress').setAttribute('style','width: '+Math.round(percent*100)+'% ' + transition)\r\n        //document.getElementById('info').setAttribute('style','display: block')\r\n                \r\n        prevpercent = percent\r\n                \r\n        var now = new Date().getTime()\r\n        if(startTime && now){\r\n            var diff = now-startTime\r\n            // show a time estimate for long-running placements\r\n\r\n            var estimate = (diff/percent)*(1-percent)\r\n            //document.getElementById('info_time').innerHTML = millisecondsToStr(estimate)+' remaining'\r\n            console.log(estimate)        \r\n            if(diff > 5000 && percent < 0.3 && percent > 0.02 && estimate > 10000){\r\n                document.getElementById('info_time').setAttribute('style','display: block')\r\n            }\r\n        }\r\n                \r\n        if(percent > 0.95 || percent < 0.02){\r\n            document.getElementById('info_time').setAttribute('style','display: none')\r\n        }\r\n        if(percent < 0.02){\r\n            startTime = new Date().getTime()\r\n        }\r\n    }\r\n    */\r\n\r\n    /**\r\n     * NOT WORKING Defines HTML bit and defines svg list\r\n     */ \r\n    renderSvg(svglist, efficiency, placed, total){\r\n        //this.iterations++;\r\n                \r\n        //document.getElementById('info_iterations').innerHTML = iterations;     \r\n        //Enable download button if all parts have been placed\r\n\r\n        if (placed == total){\r\n            var svgButton = document.getElementById(\"DownloadSVG-button\")\r\n            svgButton.disabled = false\r\n            svgButton.classList.remove(\"disabled\")  \r\n        } \r\n        if(!svglist || svglist.length == 0){\r\n            return\r\n        }\r\n        var bins = document.getElementById('bins')\r\n        bins.innerHTML = ''\r\n                \r\n        for(var i=0; i<svglist.length; i++){\r\n            if(svglist.length > 2){\r\n                svglist[i].setAttribute('class','grid')\r\n            }\r\n            bins.appendChild(svglist[i])\r\n        }\r\n                \r\n        if(efficiency || efficiency === 0){\r\n            // document.getElementById('info_efficiency').innerHTML = Math.round(efficiency*100);\r\n        }\r\n\r\n        //document.getElementById('info_placed').innerHTML = placed+'/'+total;      \r\n        //document.getElementById('info_placement').setAttribute('style','display: block');\r\n        //display.setAttribute('style','display: none');\r\n        //download.className = 'button download animated bounce';\r\n                \r\n    }\r\n            \r\n    /**\r\n     * The function which is called when you press the download button.\r\n     * Stops nest in progress and downloads file to computer. Only enabled if svg has been nested at least once\r\n     */ \r\n    downloadSvg(){\r\n        //if it is still trying iterations stop nest \r\n        this.stopnest()\r\n        var bins = document.getElementById('bins')\r\n            \r\n        if(bins.children.length == 0){\r\n            console.warn('No SVG to export')\r\n            return\r\n        }\r\n                \r\n        var svg\r\n\r\n        var display = document.getElementById('select')\r\n        svg = display.querySelector('svg')\r\n                \r\n        if(!svg){\r\n            svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\r\n        }\r\n                \r\n        svg = svg.cloneNode(false)\r\n                \r\n        // maintain stroke, fill etc of input\r\n        if(SvgNest.style){\r\n            svg.appendChild(SvgNest.style)\r\n        }\r\n                \r\n        var binHeight = parseInt(bins.children[0].getAttribute('height'))\r\n                \r\n        for(var i=0; i<bins.children.length; i++){\r\n            var b = bins.children[i]\r\n            \r\n            var group = document.createElementNS('http://www.w3.org/2000/svg', 'g')\r\n            group.setAttribute('fill', 'none')\r\n            group.setAttribute('stroke-width', '.1')\r\n            group.setAttribute('fill', 'none')\r\n            group.setAttribute('transform', 'translate(0 '+binHeight*1.1*i+')')\r\n            for(var j=0; j<b.children.length; j++){\r\n                group.appendChild(b.children[j].cloneNode(true))\r\n            }\r\n            svg.appendChild(group)\r\n        }\r\n                \r\n        var output\r\n        if(typeof XMLSerializer != 'undefined'){\r\n            output = (new XMLSerializer()).serializeToString(svg)\r\n        }\r\n        else{\r\n            output = svg.outerHTML\r\n        }\r\n        var blob = new Blob([output], {type: \"image/svg+xml;charset=utf-8\"})\r\n        saveAs(blob, \"SVGnest-output.svg\")\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/nest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 485,
    "kind": "class",
    "name": "Nest",
    "memberof": "src/js/molecules/nest.js",
    "static": true,
    "longname": "src/js/molecules/nest.js~Nest",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/nest.js",
    "importStyle": "Nest",
    "description": "This class creates the nest atom which lets you download a nested .svg file.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 486,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 40,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "iterations",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#iterations",
    "access": "public",
    "description": "Number of times nesting has been tried",
    "lineNumber": 51,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "isworking",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#isworking",
    "access": "public",
    "description": "Boolean to determine wether nesting process is ongoing",
    "lineNumber": 55,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "material",
    "memberof": "src/js/molecules/nest.js~Nest",
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#material",
    "access": "public",
    "description": "Length and width inputs for svg placement",
    "lineNumber": 59,
    "type": {
      "types": [
        "{\"width\": number, \"length\": number}"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#draw",
    "access": "public",
    "description": "Draw the svg atom which has a SVG icon.",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#setValue",
    "access": "public",
    "description": "Re excecutes configure function for nesting if values are updated by user",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#updateValue",
    "access": "public",
    "description": "Set the value to be the input geometry, then call super updateValue()",
    "lineNumber": 89,
    "params": [],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#updateSidebar",
    "access": "public",
    "description": "Create buttons to start nest, to download the .svg file and checkbox \"Part in Part\".",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "setConfig",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#setConfig",
    "access": "public",
    "description": "Update values for config(). Called when the values on sidebar have been edited.",
    "lineNumber": 121,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "svgToNest",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#svgToNest",
    "access": "public",
    "description": "Turns geometry values into svg then starts nest and returns nested SVG",
    "lineNumber": 159,
    "params": [],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "attachSvgListeners",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#attachSvgListeners",
    "access": "public",
    "description": "Defines bin which will be used to place parts for nested svg",
    "lineNumber": 228,
    "params": [
      {
        "name": "svg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "startnest",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#startnest",
    "access": "public",
    "description": "Starts nesting, replaces html svg for nested svg",
    "lineNumber": 261,
    "params": [],
    "return": null
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "stopnest",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#stopnest",
    "access": "public",
    "description": "Stops nest and changes flag to not working",
    "lineNumber": 280,
    "params": [],
    "return": null
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "renderSvg",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#renderSvg",
    "access": "public",
    "description": "NOT WORKING Defines HTML bit and defines svg list",
    "lineNumber": 326,
    "params": [
      {
        "name": "svglist",
        "types": [
          "*"
        ]
      },
      {
        "name": "efficiency",
        "types": [
          "*"
        ]
      },
      {
        "name": "placed",
        "types": [
          "*"
        ]
      },
      {
        "name": "total",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "downloadSvg",
    "memberof": "src/js/molecules/nest.js~Nest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/nest.js~Nest#downloadSvg",
    "access": "public",
    "description": "The function which is called when you press the download button.\nStops nest in progress and downloads file to computer. Only enabled if svg has been nested at least once",
    "lineNumber": 365,
    "params": [],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "file",
    "name": "src/js/molecules/output.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the output atom. The goal is that the output atom is fully transparent to the molecule which contains it\r\n */\r\nexport default class Output extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super (values)\r\n        \r\n        //Add a new output to the current molecule\r\n        if (typeof this.parent !== 'undefined') {\r\n            this.parent.addIO('output', 'Geometry', this.parent, 'geometry', this.parent.path)\r\n        }\r\n        \r\n        /**\r\n         * This atom's type...not used?\r\n         * @type {string}\r\n         */\r\n        this.type = 'output'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Output'\r\n        /**\r\n         * This atom's value\r\n         * @type {object}\r\n         */\r\n        this.value = null\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Output'\r\n        /**\r\n         * This atom's height\r\n         * @type {number}\r\n         */\r\n        this.height = 16\r\n        /**\r\n         * This atom's radius\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/75\r\n        /**\r\n         * This atom's path\r\n         * @type {string}\r\n         */\r\n        this.path = \"\" //Not sure why documentation made me put this hear instead of pulling it from atom\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Connect geometry here to make it available in the next level up. \"\r\n        \r\n        this.setValues(values)\r\n        \r\n        this.addIO('input', 'number or geometry', this, 'geometry', undefined)\r\n    }\r\n    \r\n    /**\r\n     * Take the input value of this function and pass it to the parent Molecule to go up one level.\r\n     */ \r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            this.decreaseToProcessCountByOne()\r\n            \r\n            this.path = this.findIOValue('number or geometry')\r\n            \r\n            this.parent.propagate()  //Propagate passes the updated value on while parent.updateValue is called when one of the molecule inputs changes\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets the parent molecule output to wait on coming information\r\n     */ \r\n    waitOnComingInformation(){\r\n        this.parent.output.waitOnComingInformation()\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms. In this case it sets the path of this and it's parent to be correct.\r\n     */ \r\n    loadTree(){\r\n        this.path = this.inputs[0].loadTree()\r\n        this.value = this.path\r\n        return this.path\r\n    }\r\n    \r\n    /**\r\n     * Override super delete function to prevent output from being deleted\r\n     */ \r\n    deleteNode(){\r\n        \r\n    }\r\n    \r\n    /**\r\n     * A function to allow you to still call the delete function if needed.\r\n     */\r\n    deleteOutputAtom(deletePath = true){\r\n        super.deleteNode(false, deletePath)\r\n    }\r\n    \r\n    /**\r\n     * Draw the output shape on the screen.\r\n     */ \r\n    draw() {\r\n\r\n        const xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        const yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        const radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        this.height= radiusInPixels\r\n\r\n        //Set colors\r\n        if(this.processing){\r\n            GlobalVariables.c.fillStyle = 'blue'\r\n        }\r\n        else if(this.selected){\r\n            \r\n            GlobalVariables.c.fillStyle = this.selectedColor\r\n            GlobalVariables.c.strokeStyle = this.defaultColor\r\n            /**\r\n             * This background color\r\n             * @type {string}\r\n             */\r\n            this.color = this.selectedColor\r\n            /**\r\n             * This atoms accent color\r\n             * @type {string}\r\n             */\r\n            this.strokeColor = this.defaultColor\r\n        }\r\n        else{\r\n            GlobalVariables.c.fillStyle = this.defaultColor\r\n            GlobalVariables.c.strokeStyle = this.selectedColor\r\n            this.color = this.defaultColor\r\n            this.strokeColor = this.selectedColor\r\n        }\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.textAlign = 'start'\r\n        GlobalVariables.c.fillText(this.name, xInPixels - radiusInPixels, yInPixels - radiusInPixels*1.5)\r\n        GlobalVariables.c.moveTo(xInPixels + radiusInPixels - radiusInPixels*2, yInPixels - this.height)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels -5, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels - radiusInPixels*2, yInPixels + this.height)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels - radiusInPixels*2, yInPixels - this.height)\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.lineJoin = \"round\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/output.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 509,
    "kind": "class",
    "name": "Output",
    "memberof": "src/js/molecules/output.js",
    "static": true,
    "longname": "src/js/molecules/output.js~Output",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/output.js",
    "importStyle": "Output",
    "description": "This class creates the output atom. The goal is that the output atom is fully transparent to the molecule which contains it",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 510,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 511,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#type",
    "access": "public",
    "description": "This atom's type...not used?",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#value",
    "access": "public",
    "description": "This atom's value",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 515,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#height",
    "access": "public",
    "description": "This atom's height",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#radius",
    "access": "public",
    "description": "This atom's radius",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "path",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#path",
    "access": "public",
    "description": "This atom's path",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#updateValue",
    "access": "public",
    "description": "Take the input value of this function and pass it to the parent Molecule to go up one level.",
    "lineNumber": 70,
    "params": [],
    "return": null
  },
  {
    "__docId__": 521,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#waitOnComingInformation",
    "access": "public",
    "description": "Sets the parent molecule output to wait on coming information",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms. In this case it sets the path of this and it's parent to be correct.",
    "lineNumber": 90,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#deleteNode",
    "access": "public",
    "description": "Override super delete function to prevent output from being deleted",
    "lineNumber": 99,
    "params": [],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "deleteOutputAtom",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#deleteOutputAtom",
    "access": "public",
    "description": "A function to allow you to still call the delete function if needed.",
    "lineNumber": 106,
    "params": [
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/output.js~Output",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/output.js~Output#draw",
    "access": "public",
    "description": "Draw the output shape on the screen.",
    "lineNumber": 113,
    "params": [],
    "return": null
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#color",
    "access": "public",
    "description": "This background color",
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/js/molecules/output.js~Output",
    "static": false,
    "longname": "src/js/molecules/output.js~Output#strokeColor",
    "access": "public",
    "description": "This atoms accent color",
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "src/js/molecules/readme.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the readme atom.\r\n */\r\nexport default class Readme extends Atom{\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Readme'\r\n        /**\r\n         * The text to appear in the README file\r\n         * @type {string}\r\n         */\r\n        this.readmeText = 'Readme text here'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.type = 'readme'\r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'README'\r\n        /**\r\n         * This atom's radius...probably inherited and can be deleted\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/72\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"A place to put project notes. These will appear in the GitHub readme and in the description of molecules up the chain. Markdown is supported. \"\r\n\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height = 10\r\n\r\n        /**\r\n         * Should this atom contribute to the molecule level readme\r\n         */\r\n        this.global = true\r\n        \r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Add a place to edit the readme text to the sidebar*/ \r\n    updateSidebar(){\r\n        var valueList = super.updateSidebar() //call the super function\r\n        this.createEditableValueListItem(valueList,this,'readmeText', 'Notes', false)\r\n        this.createCheckbox(valueList,\"Global\",this.global,(event) => {\r\n            this.global = event.target.checked\r\n        })\r\n    }\r\n    /**\r\n     * Draw the readme atom with // icon.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n\r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        this.height = pixelsRadius * 1.5\r\n    \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius*1.5}px Work Sans Bold`\r\n        GlobalVariables.c.fillText('//', GlobalVariables.widthToPixels(this.x- this.radius/2), GlobalVariables.heightToPixels(this.y)+this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    /**\r\n     * Update the readme text. Called when the readme text has been edited.\r\n     */ \r\n    setValue(newText) {\r\n        this.readmeText = newText\r\n    }\r\n    \r\n    /**\r\n     * Provides this molecules contribution to the global Readme\r\n     */ \r\n    requestReadme(){\r\n        if(this.global){\r\n            return [this.readmeText]\r\n        }\r\n        else{\r\n            return []\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add the readme text to the information saved for this atom\r\n     */ \r\n    serialize(values){\r\n        //Save the readme text to the serial stream\r\n        var valuesObj = super.serialize(values)\r\n        \r\n        valuesObj.readmeText = this.readmeText\r\n        valuesObj.global     = this.global\r\n        \r\n        return valuesObj\r\n        \r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/readme.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "class",
    "name": "Readme",
    "memberof": "src/js/molecules/readme.js",
    "static": true,
    "longname": "src/js/molecules/readme.js~Readme",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/readme.js",
    "importStyle": "Readme",
    "description": "This class creates the readme atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 535,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 536,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#atomType",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 537,
    "kind": "member",
    "name": "readmeText",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#readmeText",
    "access": "public",
    "description": "The text to appear in the README file",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 538,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#type",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 539,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 540,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#radius",
    "access": "public",
    "description": "This atom's radius...probably inherited and can be deleted",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 541,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 542,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 49,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "member",
    "name": "global",
    "memberof": "src/js/molecules/readme.js~Readme",
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#global",
    "access": "public",
    "description": "Should this atom contribute to the molecule level readme",
    "lineNumber": 54,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#updateSidebar",
    "access": "public",
    "description": "Add a place to edit the readme text to the sidebar",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#draw",
    "access": "public",
    "description": "Draw the readme atom with // icon.",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#setValue",
    "access": "public",
    "description": "Update the readme text. Called when the readme text has been edited.",
    "lineNumber": 90,
    "params": [
      {
        "name": "newText",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#requestReadme",
    "access": "public",
    "description": "Provides this molecules contribution to the global Readme",
    "lineNumber": 97,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/readme.js~Readme",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/readme.js~Readme#serialize",
    "access": "public",
    "description": "Add the readme text to the information saved for this atom",
    "lineNumber": 109,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "file",
    "name": "src/js/molecules/rectangle.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the rectangle atom.\r\n */\r\nexport default class Rectangle extends Atom {\r\n\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'x length', this, 'number', 10)\r\n        this.addIO('input', 'y length', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Rectangle'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Rectangle'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Creates a new rectangle.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Starts propagation from this atom if it is not waiting for anything up stream.\r\n     */ \r\n    beginPropagation(){\r\n        \r\n        //Check to see if a value already exists. Generate it if it doesn't. Only do this for circles and rectangles\r\n        if(!GlobalVariables.availablePaths.includes(this.path)){\r\n            //Triggers inputs with nothing connected to begin propagation\r\n            this.inputs.forEach(input => {\r\n                input.beginPropagation()\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the rectangle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.rect(GlobalVariables.widthToPixels(this.x- this.radius/2), \r\n            GlobalVariables.heightToPixels(this.y- this.radius*2), \r\n            GlobalVariables.widthToPixels(this.radius), \r\n            GlobalVariables.widthToPixels(this.radius))       \r\n        //GlobalVariables.c.fill()\r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()  \r\n    }\r\n    \r\n    /**\r\n     * Create a new rectangle in a worker thread.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var xVal = this.findIOValue('x length')\r\n            var yVal = this.findIOValue('y length')\r\n            const values = {op: \"rectangle\", x: xVal, y:yVal, writePath: this.path }\r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/rectangle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 553,
    "kind": "class",
    "name": "Rectangle",
    "memberof": "src/js/molecules/rectangle.js",
    "static": true,
    "longname": "src/js/molecules/rectangle.js~Rectangle",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/rectangle.js",
    "importStyle": "Rectangle",
    "description": "This class creates the rectangle atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 554,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 555,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 556,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 557,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#draw",
    "access": "public",
    "description": "Draw the rectangle atom & icon.",
    "lineNumber": 56,
    "params": [],
    "return": null
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/rectangle.js~Rectangle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rectangle.js~Rectangle#updateValue",
    "access": "public",
    "description": "Create a new rectangle in a worker thread.",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 561,
    "kind": "file",
    "name": "src/js/molecules/regularPolygon.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the regular polygon atom.\r\n */\r\nexport default class RegularPolygon extends Atom {\r\n\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'number of sides', this, 'number', 6)\r\n        this.addIO('input', 'diameter', this, 'number', 10)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'RegularPolygon'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'RegularPolygon'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Creates a new regular polygon. Corners are on the diameter.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n\r\n    /**\r\n     * Draw the circle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        // polygon in progress - replace numbers with variables\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.moveTo(xInPixels - radiusInPixels/3, yInPixels + radiusInPixels/1.7)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/3, yInPixels + radiusInPixels/1.7)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/1.5, yInPixels)\r\n        GlobalVariables.c.lineTo(xInPixels + radiusInPixels/2.5, yInPixels - radiusInPixels/1.7)\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/2.5, yInPixels - radiusInPixels/1.7)\r\n        GlobalVariables.c.lineTo(xInPixels- radiusInPixels/1.5, yInPixels )\r\n        GlobalVariables.c.lineTo(xInPixels - radiusInPixels/3, yInPixels + radiusInPixels/1.7)\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n    \r\n    /**\r\n     * Starts propagation from this atom if it is not waiting for anything up stream.\r\n     */ \r\n\r\n    beginPropagation(force = false){\r\n        //Check to see if a value already exists. Generate it if it doesn't. Only do this for circles, rectangles, and regular polygons\r\n        if(!GlobalVariables.availablePaths.includes(this.path)||force){\r\n            //Triggers inputs with nothing connected to begin propagation\r\n            this.inputs.forEach(input => {\r\n                input.beginPropagation()\r\n            })\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Create a new regular polygon in a worker thread.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            \r\n            const values = {op: \"circle\", diameter: this.findIOValue('diameter'), numSegments:this.findIOValue('number of sides'), writePath: this.path }\r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }  \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/regularPolygon.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 562,
    "kind": "class",
    "name": "RegularPolygon",
    "memberof": "src/js/molecules/regularPolygon.js",
    "static": true,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/regularPolygon.js",
    "importStyle": "RegularPolygon",
    "description": "This class creates the regular polygon atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 563,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 564,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 565,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 566,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this atom if it is not waiting for anything up stream.",
    "lineNumber": 70,
    "params": [
      {
        "name": "force",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/regularPolygon.js~RegularPolygon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/regularPolygon.js~RegularPolygon#updateValue",
    "access": "public",
    "description": "Create a new regular polygon in a worker thread.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 570,
    "kind": "file",
    "name": "src/js/molecules/rotate.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the rotate atom.\r\n */\r\nexport default class Rotate extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '', false, true)\r\n        this.addIO('input', 'x-axis degrees', this, 'number', 0)\r\n        this.addIO('input', 'y-axis degrees', this, 'number', 0)\r\n        this.addIO('input', 'z-axis degrees', this, 'number', 0)\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Rotate'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Rotate'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Rotates the input geometry around the X, Y, or Z axis. Inputs are degrees.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Draw the circle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.ellipse(GlobalVariables.widthToPixels(this.x), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/1.5), GlobalVariables.widthToPixels(this.radius/2.3), Math.PI / 4,  0, Math.PI * 2)  \r\n        GlobalVariables.c.stroke() \r\n        GlobalVariables.c.closePath()\r\n\r\n        \r\n\r\n    }\r\n  \r\n    /**\r\n     * Pass the input shape to a worker thread to compute the rotation\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputPath = this.findIOValue('geometry')\r\n            var x = this.findIOValue('x-axis degrees')\r\n            var y = this.findIOValue('y-axis degrees')\r\n            var z = this.findIOValue('z-axis degrees')\r\n            const values = { op: \"rotate\", x:x, y:y, z:z, readPath: inputPath, writePath: this.path }\r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/rotate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 571,
    "kind": "class",
    "name": "Rotate",
    "memberof": "src/js/molecules/rotate.js",
    "static": true,
    "longname": "src/js/molecules/rotate.js~Rotate",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/rotate.js",
    "importStyle": "Rotate",
    "description": "This class creates the rotate atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 572,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 573,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 574,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 575,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 576,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 45,
    "params": [],
    "return": null
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/rotate.js~Rotate",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/rotate.js~Rotate#updateValue",
    "access": "public",
    "description": "Pass the input shape to a worker thread to compute the rotation",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 578,
    "kind": "file",
    "name": "src/js/molecules/shrinkwrap.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport { addOrDeletePorts } from '../alwaysOneFreeInput.js'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates the shrinkwrap atom. This behavior can also be called 'hull'\r\n */\r\nexport default class ShrinkWrap extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Shrink Wrap'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'ShrinkWrap'\r\n        /**\r\n         * A list of all of the inputs to this molecule. May be passed to the constructor and loaded.\r\n         * @type {array}\r\n         */\r\n        this.ioValues = []\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Joins two or more shapes into a single solid by filling in the space between them. Also called 'hull'\"\r\n        \r\n        /**\r\n         * This was used when there was a drop down to select closed...may be deleted\r\n         * @type {number}\r\n         */\r\n        this.closedSelection = 0\r\n        /**\r\n         * I believe this is no longer used alzatin - is that right?\r\n         * @type {boolean}\r\n         */\r\n        this.addedIO = false\r\n        \r\n        this.setValues(values)\r\n        \r\n        if (typeof this.ioValues !== 'undefined'){\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.addIO('input', ioValue.name, this, 'geometry', '')\r\n            })\r\n        }\r\n\r\n\r\n        this.setValues([])\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Draw the translate icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x+this.radius/4), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/2.5), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()  \r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.arc(GlobalVariables.widthToPixels(this.x-this.radius/4), \r\n            GlobalVariables.heightToPixels(this.y), \r\n            GlobalVariables.widthToPixels(this.radius/2.5), 0, Math.PI * 2, false)       \r\n        GlobalVariables.c.fill() \r\n        GlobalVariables.c.closePath()  \r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#949294'\r\n        GlobalVariables.c.rect(GlobalVariables.widthToPixels(this.x- this.radius/4), \r\n            GlobalVariables.heightToPixels(this.y- this.radius), \r\n            GlobalVariables.widthToPixels(this.radius/2), \r\n            GlobalVariables.widthToPixels(this.radius/2))       \r\n        GlobalVariables.c.fill() \r\n        GlobalVariables.c.closePath() \r\n          \r\n\r\n    }\r\n    \r\n    /**\r\n     * Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull\r\n     */ \r\n    updateValue(){\r\n        if(this.inputs.every(x => x.ready)){\r\n            try{\r\n                var inputsList = []\r\n                this.inputs.forEach( io => {\r\n                    if(io.connectors.length > 0){\r\n                        inputsList.push(io.getValue())\r\n                    }\r\n                })\r\n                \r\n                const values = { op: \"hull\", paths: inputsList, writePath: this.path }\r\n                this.basicThreadValueProcessing(values)\r\n            }catch(err){this.setAlert(err)}\r\n            \r\n            //Delete or add ports as needed\r\n            addOrDeletePorts(this)\r\n        }\r\n    }\r\n     \r\n    /**\r\n     * Add the names of the inputs to the saved object so that they can be loaded later\r\n     */ \r\n    serialize(savedObject){\r\n        var thisAsObject = super.serialize(savedObject)\r\n        \r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (io.type == 'input'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        ioValues.forEach(ioValue => {\r\n            thisAsObject.ioValues.push(ioValue)\r\n        })\r\n        \r\n        //Write the selection for if the chain is closed\r\n        thisAsObject.closedSelection = this.closedSelection\r\n        \r\n        return thisAsObject\r\n        \r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/shrinkwrap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 579,
    "kind": "class",
    "name": "ShrinkWrap",
    "memberof": "src/js/molecules/shrinkwrap.js",
    "static": true,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/shrinkwrap.js",
    "importStyle": "ShrinkWrap",
    "description": "This class creates the shrinkwrap atom. This behavior can also be called 'hull'",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 580,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 581,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 582,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 583,
    "kind": "member",
    "name": "ioValues",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#ioValues",
    "access": "public",
    "description": "A list of all of the inputs to this molecule. May be passed to the constructor and loaded.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 584,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 585,
    "kind": "member",
    "name": "closedSelection",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#closedSelection",
    "access": "public",
    "description": "This was used when there was a drop down to select closed...may be deleted",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 586,
    "kind": "member",
    "name": "addedIO",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#addedIO",
    "access": "public",
    "description": "I believe this is no longer used alzatin - is that right?",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#draw",
    "access": "public",
    "description": "Draw the translate icon.",
    "lineNumber": 67,
    "params": [],
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#updateValue",
    "access": "public",
    "description": "Generates a list of all of the input shapes, then passees them to a worker thread to compute the hull",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/shrinkwrap.js~ShrinkWrap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/shrinkwrap.js~ShrinkWrap#serialize",
    "access": "public",
    "description": "Add the names of the inputs to the saved object so that they can be loaded later",
    "lineNumber": 124,
    "params": [
      {
        "name": "savedObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 590,
    "kind": "file",
    "name": "src/js/molecules/stl.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\n\r\n/**\r\n * This class creates the stl atom which lets you download a .stl file.\r\n */\r\nexport default class Stl extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Stl'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Stl'\r\n\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n        \r\n        /**\r\n         * This atom's value. Contains the value of the input geometry, not the stl\r\n         * @type {string}\r\n         */\r\n        this.value = null\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Exports an stl of the input geometry.\"\r\n        \r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Draw the svg atom which has a SVG icon.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        \r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height = pixelsRadius * 1.5\r\n    \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius/1.2}px Work Sans`\r\n        GlobalVariables.c.fillText('Stl', GlobalVariables.widthToPixels(this.x- this.radius/1.5), GlobalVariables.heightToPixels(this.y)+this.height/6)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    /**\r\n     * Set the value to be the input geometry, then call super updateValue()\r\n     */ \r\n    updateValue(){\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Create a button to download the .stl file.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createButton(list, this, \"Download STL\", ()=>{this.downloadStl()})\r\n    }\r\n    \r\n    /**\r\n     * The function which is called when you press the download button.\r\n     */ \r\n    downloadStl(){\r\n        try{\r\n            const values = {op: \"stl\", readPath: this.findIOValue('geometry')}\r\n            const {answer} = window.ask(values)\r\n            answer.then( returnedAnswer => {\r\n                const blob = new Blob([returnedAnswer])\r\n                saveAs(blob, GlobalVariables.currentMolecule.name+'.stl')\r\n            })\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/stl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 591,
    "kind": "class",
    "name": "Stl",
    "memberof": "src/js/molecules/stl.js",
    "static": true,
    "longname": "src/js/molecules/stl.js~Stl",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/stl.js",
    "importStyle": "Stl",
    "description": "This class creates the stl atom which lets you download a .stl file.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 592,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 593,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 594,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 595,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 596,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 597,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#draw",
    "access": "public",
    "description": "Draw the svg atom which has a SVG icon.",
    "lineNumber": 54,
    "params": [],
    "return": null
  },
  {
    "__docId__": 598,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/stl.js~Stl",
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#updateValue",
    "access": "public",
    "description": "Set the value to be the input geometry, then call super updateValue()",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .stl file.",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "downloadStl",
    "memberof": "src/js/molecules/stl.js~Stl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/stl.js~Stl#downloadStl",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 91,
    "params": [],
    "return": null
  },
  {
    "__docId__": 602,
    "kind": "file",
    "name": "src/js/molecules/svg.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\nimport saveAs from '../lib/FileSaver.js'\r\n\r\n/**\r\n * This class creates the svg atom which lets you download a .svg file.\r\n */\r\nexport default class Svg extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Svg'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Svg'\r\n        \r\n        /**\r\n         * This atom's value. Contains the value of the input geometry, not the stl\r\n         * @type {string}\r\n         */\r\n        this.value = null\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Exports an svg of the input geometry. Before generating an SVG the shape will be moved rest on the XY plane and the outline will be generated.\"\r\n\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height = 0\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', null)\r\n        \r\n        //Add a download svg button to the top level atoms side bar in run mode\r\n        GlobalVariables.topLevelMolecule.runModeSidebarAdditions.push(list => {\r\n            this.createButton(list, this, \"Download SVG\", ()=>{this.downloadSvg()})\r\n        })\r\n        \r\n        this.setValues(values)\r\n    }\r\n\r\n    /**\r\n     * Draw the svg atom which has a SVG icon.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        \r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        this.height = pixelsRadius * 1.5\r\n\r\n    \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius/1.2}px Work Sans`\r\n        GlobalVariables.c.fillText('Svg', GlobalVariables.widthToPixels(this.x- this.radius/1.4), GlobalVariables.heightToPixels(this.y)+this.height/6)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n        \r\n    }\r\n    \r\n    \r\n    /**\r\n     * Compute the outline\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputPath = this.findIOValue('geometry')\r\n            const values = { op: \"outline\", readPath: inputPath, writePath: this.path }\r\n            \r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n    \r\n    /**\r\n     * Create a button to download the .svg file.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createButton(list, this, \"Download SVG\", ()=>{this.downloadSvg()})\r\n    }\r\n    \r\n    /**\r\n     * The function which is called when you press the download button.\r\n     */ \r\n    downloadSvg(){\r\n        try{\r\n            const values = {op: \"svgOutline\", readPath: this.path}\r\n            const {answer} = window.ask(values)\r\n            answer.then( result => {\r\n                \r\n                //var enc = new TextDecoder(\"utf-8\");\r\n                \r\n                const blob = new Blob([result])\r\n                saveAs(blob, GlobalVariables.currentMolecule.name+'.svg')\r\n            })\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/svg.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 603,
    "kind": "class",
    "name": "Svg",
    "memberof": "src/js/molecules/svg.js",
    "static": true,
    "longname": "src/js/molecules/svg.js~Svg",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/svg.js",
    "importStyle": "Svg",
    "description": "This class creates the svg atom which lets you download a .svg file.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 604,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 605,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 606,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 607,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#value",
    "access": "public",
    "description": "This atom's value. Contains the value of the input geometry, not the stl",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 608,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/svg.js~Svg",
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#height",
    "access": "public",
    "description": "This atom's height as drawn on the screen",
    "lineNumber": 43,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#draw",
    "access": "public",
    "description": "Draw the svg atom which has a SVG icon.",
    "lineNumber": 58,
    "params": [],
    "return": null
  },
  {
    "__docId__": 612,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#updateValue",
    "access": "public",
    "description": "Compute the outline",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .svg file.",
    "lineNumber": 91,
    "params": [],
    "return": null
  },
  {
    "__docId__": 614,
    "kind": "method",
    "name": "downloadSvg",
    "memberof": "src/js/molecules/svg.js~Svg",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/svg.js~Svg#downloadSvg",
    "access": "public",
    "description": "The function which is called when you press the download button.",
    "lineNumber": 99,
    "params": [],
    "return": null
  },
  {
    "__docId__": 615,
    "kind": "file",
    "name": "src/js/molecules/tag.js",
    "content": "import Atom from '../prototypes/atom'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates the tag atom.\r\n */\r\nexport default class Tag extends Atom{\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        super(values)\r\n        \r\n        this.addIO('input', 'geometry', this, 'geometry', '', false, true)\r\n        this.addIO('input', 'tag', this, 'string', 'Tag String')\r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'Add Tag'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Tag'\r\n        /**\r\n         * This atom's height as drawn on the screen\r\n         */\r\n        this.height\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Tags geometry so that it can be extracted later.\"\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n\r\n    /**\r\n     * Draw the constant which is more rectangular than the regular shape.\r\n     */ \r\n    draw() {\r\n        \r\n        super.draw(\"rect\")\r\n        \r\n        let pixelsRadius = GlobalVariables.widthToPixels(this.radius)\r\n        /**\r\n        * Relates height to radius\r\n        * @type {number}\r\n        */\r\n        this.height= pixelsRadius\r\n        \r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${pixelsRadius}px Work Sans Bold`\r\n        GlobalVariables.c.fillText(String.fromCharCode(0x0023), GlobalVariables.widthToPixels(this.x- this.radius/3), GlobalVariables.heightToPixels(this.y)+this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n    }\r\n    /**\r\n     * Add a tag to the input geometry. The substance is not changed.\r\n     */ \r\n    updateValue(){\r\n        try{\r\n            var inputPath = this.findIOValue('geometry')\r\n            const tag =  this.findIOValue('tag')\r\n            const values = {op: \"tag\", tag: tag, readPath: inputPath, writePath: this.path }\r\n            this.basicThreadValueProcessing(values, \"tag\")\r\n        }catch(err){this.setAlert(err)}\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/tag.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 616,
    "kind": "class",
    "name": "Tag",
    "memberof": "src/js/molecules/tag.js",
    "static": true,
    "longname": "src/js/molecules/tag.js~Tag",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/tag.js",
    "importStyle": "Tag",
    "description": "This class creates the tag atom.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 617,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#draw",
    "access": "public",
    "description": "Draw the constant which is more rectangular than the regular shape.",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "height",
    "memberof": "src/js/molecules/tag.js~Tag",
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#height",
    "access": "public",
    "description": "Relates height to radius",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/tag.js~Tag",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/tag.js~Tag#updateValue",
    "access": "public",
    "description": "Add a tag to the input geometry. The substance is not changed.",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 624,
    "kind": "file",
    "name": "src/js/molecules/uploadSVG.js",
    "content": "import Atom from '../prototypes/atom.js'\r\nimport GlobalVariables from '../globalvariables.js'\r\n\r\n/**\r\n * This class creates an atom which supports uploading a .svg file\r\n */\r\nexport default class UploadSVG extends Atom {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        super(values)\r\n        \r\n        /**\r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'UploadSVG'\r\n        /**\r\n         * This atom's type\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'UploadSVG'\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"Upload a .svg file and use it in your design.\"\r\n        \r\n        /** \r\n         * The name of the uploaded file\r\n         * @type {string}\r\n         */\r\n        this.fileName = \"\"\r\n        \r\n        this.addIO('output', 'geometry', this, 'geometry', '')\r\n        \r\n        this.setValues(values)\r\n    }\r\n    \r\n    /**\r\n     * Draw the circle atom & icon.\r\n     */ \r\n    draw(){\r\n\r\n        super.draw() //Super call to draw the rest\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = '#484848'\r\n        GlobalVariables.c.font = `${GlobalVariables.widthToPixels(this.radius)}px Work Sans Bold`\r\n        GlobalVariables.c.fillText('G', GlobalVariables.widthToPixels(this.x- this.radius/3), GlobalVariables.heightToPixels(this.y)+this.height/3)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.closePath()\r\n\r\n    }\r\n\r\n    /**\r\n     * Upload a new svg file\r\n     */ \r\n    updateValue(){\r\n        \r\n        const rawPath = GlobalVariables.gitHub.getAFileRawPath(this.fileName)\r\n        \r\n        try{\r\n            const values = { op: \"fromSVG\", svgPath:rawPath, writePath: this.path }\r\n            \r\n            this.basicThreadValueProcessing(values)\r\n        }catch(err){this.setAlert(err)}\r\n        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * Create a button to download the .stl file.\r\n     */ \r\n    updateSidebar(){\r\n        const list = super.updateSidebar()\r\n        this.createFileUpload(list, this, \"Upload SVG\", ()=>{this.uploadSvg()})\r\n    }\r\n    \r\n    /**\r\n     * The function which is called when you press the upload button\r\n     */ \r\n    uploadSvg(){\r\n        \r\n        var x = document.getElementById(\"UploadSVG-button\")\r\n        if ('files' in x){\r\n            if(x.files.length > 0){\r\n                const file = x.files[0]\r\n                \r\n                const toSend = {}\r\n                \r\n                //Delete the previous file if this one is a new one\r\n                if(this.fileName != x.files[0].name){\r\n                    //Make sure the file to delete actually exists before deleting it\r\n                    let rawPath = GlobalVariables.gitHub.getAFileRawPath(this.fileName)\r\n                    var http = new XMLHttpRequest()\r\n                    http.open('HEAD', rawPath, false)\r\n                    http.send()\r\n                    if ( http.status!=404){\r\n                        toSend[this.fileName] = null\r\n                    }\r\n                }\r\n                \r\n                this.fileName = x.files[0].name\r\n                this.name = this.fileName\r\n                \r\n                const reader = new FileReader()\r\n                reader.addEventListener('load', (event) => {\r\n                    \r\n                    \r\n                    toSend[this.fileName] = event.target.result\r\n                    \r\n                    GlobalVariables.gitHub.uploadAFile(toSend).then(() => {\r\n                        this.updateValue()\r\n                        //Save the project to keep it in sync with the files uploaded to github\r\n                        setTimeout(() => {GlobalVariables.gitHub.saveProject()}, 10000)\r\n                    })\r\n                })\r\n                reader.readAsText(file)\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Add the file name to the object which is saved for this molecule\r\n     */\r\n    serialize(){\r\n        var superSerialObject = super.serialize(null)\r\n        \r\n        //Write the current equation to the serialized object\r\n        superSerialObject.fileName = this.fileName\r\n        superSerialObject.name = this.name\r\n        \r\n        return superSerialObject\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/molecules/uploadSVG.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 625,
    "kind": "class",
    "name": "UploadSVG",
    "memberof": "src/js/molecules/uploadSVG.js",
    "static": true,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/molecules/uploadSVG.js",
    "importStyle": "UploadSVG",
    "description": "This class creates an atom which supports uploading a .svg file",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "src/js/prototypes/atom.js~Atom"
    ]
  },
  {
    "__docId__": 626,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 627,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 628,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#atomType",
    "access": "public",
    "description": "This atom's type",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "fileName",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#fileName",
    "access": "public",
    "description": "The name of the uploaded file",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 631,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#draw",
    "access": "public",
    "description": "Draw the circle atom & icon.",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 632,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#updateValue",
    "access": "public",
    "description": "Upload a new svg file",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 633,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#updateSidebar",
    "access": "public",
    "description": "Create a button to download the .stl file.",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "uploadSvg",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#uploadSvg",
    "access": "public",
    "description": "The function which is called when you press the upload button",
    "lineNumber": 87,
    "params": [],
    "return": null
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/molecules/uploadSVG.js~UploadSVG",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/molecules/uploadSVG.js~UploadSVG#serialize",
    "access": "public",
    "description": "Add the file name to the object which is saved for this molecule",
    "lineNumber": 131,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "file",
    "name": "src/js/NewMenu.js",
    "content": "import CMenu from './lib/circularmenu.js'\r\nimport GlobalVariables from './globalvariables'\r\n\r\n/**\r\n * Html element that contains the circular menu\r\n */    \r\nvar ele = document.querySelector('#circle-menu1')\r\n/**\r\n * This creates a new instance of the circular menu. \r\n */\r\nvar cmenu = CMenu(ele)\r\n    .config({\r\n        totalAngle: 360,//deg,\r\n        spaceDeg: 1,//deg\r\n        background: \"#e1e1e1\",\r\n        backgroundHover: \"#FFFFFF\",\r\n        percent: 0.20,//%\r\n        diameter: 120,//px\r\n        position: 'top',\r\n        horizontal: true,\r\n        //start: -45,//deg\r\n        animation: \"into\",\r\n        menus: [\r\n            {\r\n                title: '',\r\n                icon: 'Actions',\r\n                menus: makeArray('Actions')        \r\n            },\r\n            {\r\n                title: '',\r\n                icon: 'Inputs',\r\n                menus: makeArray('Inputs')        \r\n            },\r\n            {\r\n                title: '',\r\n                icon: 'Tags',\r\n                menus: makeArray('Tags')\r\n            },\r\n            {\r\n                title: '',\r\n                icon: 'Export',\r\n                menus: makeArray('Export')\r\n                                \r\n            },\r\n            {\r\n                title: '',\r\n                icon: 'Shapes',\r\n                menus: makeArray('Shapes')\r\n            },\r\n            {\r\n                title: '',\r\n                icon: 'Interaction',\r\n                menus: makeArray('Interactions')\r\n            }\r\n        ]\r\n    })\r\n/**\r\n     * Runs to create submenus from Global Variables atomCategories. Populates menu objects\r\n     * @param {object} group - Name of the category to find appropriate atoms\r\n     */ \r\nfunction makeArray(group) {\r\n                \r\n    var menuArray = []\r\n    for(var key in GlobalVariables.availableTypes){\r\n        var instance = GlobalVariables.availableTypes[key] \r\n        if(instance.atomCategory === group){\r\n            var subMenu = new Object()\r\n            subMenu.title = `${instance.atomType}`\r\n            subMenu.icon = `${instance.atomType}`\r\n            subMenu.name = instance.atomType\r\n            subMenu.click = function menuClick(e, title){ \r\n                if (title.icon === 'GitHubMolecule'){\r\n                    showGitHubSearch(e)\r\n                }\r\n                else{\r\n                    e.target.id = title.name\r\n                    placeNewNode(e)\r\n                }\r\n            }  \r\n            menuArray.push(subMenu)\r\n        }\r\n    }\r\n    return menuArray\r\n}\r\n\r\n/*Mask the default context menu on the main canvas*/\r\ndocument.getElementById('flow-canvas').addEventListener('contextmenu', (e) => {\r\n    e.preventDefault()\r\n}) \r\n\r\n/*Mask the default context menu on the menu*/\r\nele.addEventListener('contextmenu', (e) => {\r\n    e.preventDefault()\r\n}) \r\n\r\nvar doubleClick\r\n\r\n/* Right click to open circular menu -- mouse click and drag*/\r\ndocument.getElementById('flow-canvas').addEventListener('mousedown', event => {\r\n    //every time the mouse button goes down\r\n    if (event.detail === 1) {\r\n        doubleClick = false\r\n        // it was a single click\r\n        var isRightMB\r\n\r\n        if (\"which\" in event){  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera\r\n            isRightMB = event.which == 3\r\n        }\r\n        else if (\"button\" in event){  // IE, Opera \r\n            isRightMB = event.button == 2\r\n        }\r\n        if(isRightMB){\r\n            cmenu.show([event.clientX, event.clientY],doubleClick)\r\n            return\r\n        }\r\n    } else if (event.detail === 2) {\r\n        // it was a double click\r\n        //every time the mouse button goes down\r\n        doubleClick = true\r\n\r\n        if (\"which\" in event){  // Gecko (Firefox), WebKit (Safari/Chrome) & Opera\r\n            isRightMB = event.which == 3\r\n        }\r\n        else if (\"button\" in event){  // IE, Opera \r\n            isRightMB = event.button == 2\r\n        }\r\n        if(isRightMB){\r\n            cmenu.show([event.clientX, event.clientY],doubleClick)\r\n            return\r\n        }\r\n    }\r\n})\r\n\r\n//Add function call to search when typing\r\ndocument.getElementById('menuInput').addEventListener('keyup', (e) => {\r\n    if(e.code == 'Enter'){\r\n        searchMenu()}\r\n})\r\n\r\n/**  List that contains results of gitHub search */\r\nlet githubList = document.getElementById('githubList')\r\n\r\n/**\r\n * Runs when a gitHub molecule menu option is clicked to show search bar.\r\n */ \r\nfunction showGitHubSearch(){\r\n    //remove old results everytime           \r\n    const menu = document.querySelector('#canvas_menu')\r\n\r\n    githubList.querySelectorAll('*').forEach(n => n.remove())\r\n\r\n    const containerX = parseInt(cmenu._container.style.left, 10)\r\n    const containerY = parseInt(cmenu._container.style.top, 10)\r\n    menu.style.display = 'block'\r\n    menu.style.top = `${containerY}px`\r\n    menu.style.left = `${containerX}px`\r\n    menu.classList.remove('off')\r\n\r\n    const menuInput = document.getElementById('menuInput')\r\n    menuInput.setAttribute('style','display:block')\r\n    \r\n}\r\n\r\n/**\r\n* Runs when enter key is clicked and the input is focused to show results from search.\r\n*/ \r\nasync function searchMenu() {\r\n\r\n    //We are searching on github\r\n    let input = document.getElementById('menuInput').value\r\n   \r\n    githubList.querySelectorAll('*').forEach(n => n.remove())\r\n\r\n    await GlobalVariables.gitHub.searchGithub(input,true).then(result => {     \r\n        result.data.items.forEach(item => {\r\n            \r\n            addToList(item,true)\r\n        })\r\n    })\r\n    GlobalVariables.gitHub.searchGithub(input,false).then(result => {\r\n        result.data.items.forEach(item => { \r\n\r\n            addToList(item,false)  \r\n        })\r\n    })\r\n}\r\n/**\r\n     * Runs when a search value is entered (after return)\r\n     * @param {object} item - What is being added to the list.\r\n     * @param {object} owned - Does the project belong to the currentUser.\r\n     */ \r\nfunction addToList(item,owned){\r\n    var newElement = document.createElement('LI')\r\n    var text = document.createTextNode(item.name)\r\n    if (owned){\r\n        newElement.classList.add('menu-item-mine')\r\n    }\r\n    newElement.classList.add('menu-item')\r\n    newElement.setAttribute('id', item.id)\r\n    newElement.appendChild(text) \r\n    githubList.appendChild(newElement) \r\n    githubList.setAttribute('style','display:block;')\r\n\r\n \r\n    document.getElementById(item.id).addEventListener('click', (e) => {\r\n        placeGitHubMolecule(e)\r\n    })\r\n}\r\n\r\n/**\r\n     * Runs when a menu option is clicked to place a new atom from the local atoms list.\r\n     * @param {object} ev - The event triggered by click event on a menu item.\r\n     */ \r\nfunction placeNewNode(e){\r\n    let clr = e.target.id\r\n    const containerX = parseInt(cmenu._container.style.left, 10)\r\n    const containerY = parseInt(cmenu._container.style.top, 10)\r\n    GlobalVariables.currentMolecule.placeAtom({\r\n        x: GlobalVariables.pixelsToWidth(containerX), \r\n        y: GlobalVariables.pixelsToHeight(containerY), \r\n        parent: GlobalVariables.currentMolecule,\r\n        atomType: clr,\r\n        uniqueID: GlobalVariables.generateUniqueID()\r\n            \r\n    }, true)\r\n    \r\n    //Simulate a click on the new atom\r\n    var clickHandledByAtom = false\r\n    GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(atom => {\r\n        if (atom.clickDown(containerX,containerY,clickHandledByAtom) == true){\r\n            clickHandledByAtom = true\r\n            atom.clickUp(containerX, containerY) //Click up to not drag the atom\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n     * Runs when a menu option is clicked to place a new atom from searching on GitHub.\r\n     * @param {object} ev - The event triggered by clicking on a menu item.\r\n     */ \r\nfunction placeGitHubMolecule(ev){\r\n\r\n    const menu = document.querySelector('#canvas_menu')\r\n    menu.classList.add('off')\r\n    menu.style.top = '-200%'\r\n    menu.style.left = '-200%'  \r\n\r\n    let clr = ev.target.id\r\n    const containerXinPixels = parseInt(cmenu._container.style.left, 10)\r\n    const containerYinPixels = parseInt(cmenu._container.style.top, 10)\r\n    const containerX = GlobalVariables.pixelsToWidth(containerXinPixels)\r\n    const containerY = GlobalVariables.pixelsToHeight(containerYinPixels)\r\n    GlobalVariables.currentMolecule.placeAtom({\r\n        x: containerX, \r\n        y: containerY, \r\n        parent: GlobalVariables.currentMolecule,\r\n        atomType: 'GitHubMolecule',\r\n        projectID: clr,\r\n        uniqueID: GlobalVariables.generateUniqueID()\r\n    }, true)\r\n}\r\n\r\nexport {cmenu,showGitHubSearch}\r\n ",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/NewMenu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 639,
    "kind": "variable",
    "name": "ele",
    "memberof": "src/js/NewMenu.js",
    "static": true,
    "longname": "src/js/NewMenu.js~ele",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Html element that contains the circular menu",
    "lineNumber": 7,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 640,
    "kind": "function",
    "name": "makeArray",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/NewMenu.js~makeArray",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Runs to create submenus from Global Variables atomCategories. Populates menu objects",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "group",
        "description": "Name of the category to find appropriate atoms"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 641,
    "kind": "variable",
    "name": "githubList",
    "memberof": "src/js/NewMenu.js",
    "static": true,
    "longname": "src/js/NewMenu.js~githubList",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": " List that contains results of gitHub search",
    "lineNumber": 141,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 642,
    "kind": "function",
    "name": "searchMenu",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/js/NewMenu.js~searchMenu",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Runs when enter key is clicked and the input is focused to show results from search.",
    "lineNumber": 167,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 643,
    "kind": "function",
    "name": "addToList",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/NewMenu.js~addToList",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Runs when a search value is entered (after return)",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "What is being added to the list."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "owned",
        "description": "Does the project belong to the currentUser."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 644,
    "kind": "function",
    "name": "placeNewNode",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/NewMenu.js~placeNewNode",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Runs when a menu option is clicked to place a new atom from the local atoms list.",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "The event triggered by click event on a menu item."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 645,
    "kind": "function",
    "name": "placeGitHubMolecule",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/NewMenu.js~placeGitHubMolecule",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": null,
    "description": "Runs when a menu option is clicked to place a new atom from searching on GitHub.",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "The event triggered by clicking on a menu item."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 646,
    "kind": "variable",
    "name": "cmenu",
    "memberof": "src/js/NewMenu.js",
    "static": true,
    "longname": "src/js/NewMenu.js~cmenu",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": "{cmenu}",
    "description": "This creates a new instance of the circular menu. ",
    "lineNumber": 11,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "function",
    "name": "showGitHubSearch",
    "memberof": "src/js/NewMenu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/js/NewMenu.js~showGitHubSearch",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/NewMenu.js",
    "importStyle": "{showGitHubSearch}",
    "description": "Runs when a gitHub molecule menu option is clicked to show search bar.",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 648,
    "kind": "file",
    "name": "src/js/prototypes/atom.js",
    "content": "import AttachmentPoint from './attachmentpoint'\r\nimport GlobalVariables from '../globalvariables'\r\nimport showdown  from 'showdown'\r\n\r\n/**\r\n * This class is the prototype for all atoms.\r\n */\r\nexport default class Atom {\r\n\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        //Setup default values\r\n        /** \r\n         * An array of all of the input attachment points connected to this atom\r\n         * @type {array}\r\n         */\r\n        this.inputs = []\r\n        /** \r\n         * This atom's output attachment point if it has one\r\n         * @type {object}\r\n         */\r\n        this.output = null\r\n        /** \r\n         * This atom's unique ID. Often overwritten later when loading\r\n         * @type {number}\r\n         */\r\n        this.uniqueID = GlobalVariables.generateUniqueID()\r\n        /** \r\n         * A description of this atom\r\n         * @type {string}\r\n         */\r\n        this.description = \"none\"\r\n        /** \r\n         * The X cordinate of this atom\r\n         * @type {number}\r\n         */\r\n        this.x = 0\r\n        /** \r\n         * The Y cordinate of this atom\r\n         * @type {number}\r\n         */\r\n        this.y = 0\r\n        /** \r\n         * This atom's radius as displayed on the screen is 1/72 width\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/75\r\n        /** \r\n         * This atom's default color (ie when not selected or processing)\r\n         * @type {string}\r\n         */\r\n        this.defaultColor = '#F3EFEF'\r\n        /** \r\n         * This atom's color when selected\r\n         * @type {string}\r\n         */\r\n        this.selectedColor = '#484848'\r\n        /** \r\n         * The color currently used for strokes\r\n         * @type {string}\r\n         */\r\n        this.strokeColor = '#484848'\r\n        /** \r\n         * A flag to indicate if this atom is currently selected\r\n         * @type {boolean}\r\n         */\r\n        this.selected = false\r\n        /** \r\n         * This atom's current color\r\n         * @type {string}\r\n         */\r\n        this.color = '#F3EFEF'\r\n        /** \r\n         * This atom's name\r\n         * @type {string}\r\n         */\r\n        this.name = 'name'\r\n        /** \r\n         * This atom's parent, usually the molecule which contains this atom\r\n         * @type {object}\r\n         */\r\n        this.parentMolecule = null\r\n        /** \r\n         * This atom's value...Is can this be done away with? Are we basically storing the value in the output now?\r\n         * @type {object}\r\n         */\r\n        this.value = null\r\n        /** \r\n         * A flag to indicate if this atom is currently being dragged on the screen.\r\n         * @type {boolean}\r\n         */\r\n        this.isMoving = false\r\n        /** \r\n         * A flag to indicate if we are hovering over this atom.\r\n         * @type {boolean}\r\n         */\r\n        this.showHover = false\r\n        /** \r\n         * The X coordinate of this atom now\r\n         * @type {number}\r\n         */\r\n        this.x = 0\r\n        /** \r\n         * The Y coordinate of this atom now\r\n         * @type {number}\r\n         */\r\n        this.y = 0\r\n        /** \r\n         * A warning message displayed next to the atom. Put text in here to have a warning automatically show up. Cleared each time the output is regenerated.\r\n         * @type {string}\r\n         */\r\n        this.alertMessage = ''\r\n        /** \r\n         * A flag to indicate if the atom is currently computing a new output. Turns the molecule blue.\r\n         * @type {boolean}\r\n         */\r\n        this.processing = false\r\n        /** \r\n         * The path which contains the geometry represented by this atom\r\n         * @type {string}\r\n         */\r\n        this.path = \"\"\r\n        /** \r\n         * A function which can be called to cancel the processing being done for this atom.\r\n         * @type {function}\r\n         */\r\n        this.cancelProcessing = () => {console.warn(\"Nothing to cancel\")}\r\n\r\n        for(var key in values) {\r\n            /** \r\n             * Assign each of the values in values as this.value\r\n             */\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        this.generatePath()\r\n    }\r\n    \r\n    /**\r\n     * Generates the path for this atom from it's location in the graph\r\n     */ \r\n    generatePath(){\r\n        let levelToInspect = this\r\n        let topPath = \"\"\r\n        while(!levelToInspect.topLevel){\r\n            topPath = \"/\" + levelToInspect.uniqueID + topPath\r\n            levelToInspect = levelToInspect.parent\r\n        }\r\n        \r\n        this.path =\"source/\" + levelToInspect.uniqueID + topPath + this.atomType\r\n\r\n    }\r\n    \r\n    /**\r\n     * Applies each of the passed values to this as this.x\r\n     * @param {object} values - A list of values to set\r\n     */ \r\n    setValues(values){\r\n        //Assign the object to have the passed in values\r\n        \r\n        for(var key in values) {\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        this.generatePath()\r\n        \r\n        if (typeof this.ioValues !== 'undefined') {\r\n            this.ioValues.forEach(ioValue => { //for each saved value\r\n                this.inputs.forEach(io => {  //Find the matching IO and set it to be the saved value\r\n                    if(ioValue.name == io.name && io.type == 'input'){\r\n                        io.value = ioValue.ioValue\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n   \r\n    /**\r\n     * Draws the atom on the screen\r\n     */ \r\n    draw(drawType) {\r\n\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        this.inputs.forEach(child => {\r\n            child.draw()       \r\n        })\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.font = '10px Work Sans'\r\n\r\n        if(this.processing){\r\n            GlobalVariables.c.fillStyle = 'blue'\r\n        }\r\n        else if(this.selected){\r\n            GlobalVariables.c.fillStyle = this.selectedColor\r\n            GlobalVariables.c.strokeStyle = this.selectedColor\r\n            this.color = this.selectedColor\r\n            this.strokeColor = this.defaultColor\r\n        }\r\n        else{\r\n            GlobalVariables.c.fillStyle = this.defaultColor\r\n            GlobalVariables.c.strokeStyle = this.selectedColor\r\n            this.color = this.defaultColor\r\n            this.strokeColor = this.selectedColor\r\n        }\r\n\r\n        GlobalVariables.c.beginPath()\r\n        if (drawType == \"rect\"){\r\n            GlobalVariables.c.rect(xInPixels - radiusInPixels, yInPixels - this.height/2, 2* radiusInPixels, this.height)\r\n        }\r\n        else{\r\n            GlobalVariables.c.arc(xInPixels, yInPixels, radiusInPixels, 0, Math.PI * 2, false)\r\n        }\r\n        GlobalVariables.c.textAlign = 'start' \r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.strokeStyle = this.strokeColor\r\n        GlobalVariables.c.fillStyle = \"white\"\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.textAlign = 'start'\r\n        GlobalVariables.c.fillText(this.name, xInPixels + radiusInPixels, yInPixels - radiusInPixels)\r\n        GlobalVariables.c.fill()\r\n        GlobalVariables.c.strokeStyle = this.strokeColor\r\n        GlobalVariables.c.lineWidth = 1\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.closePath()\r\n\r\n        if (this.showHover){\r\n           \r\n            if (this.alertMessage.length > 0){\r\n                this.color = \"red\"\r\n\r\n                //Draw Alert block  \r\n                GlobalVariables.c.beginPath()\r\n                const padding = 10\r\n                GlobalVariables.c.fillStyle = 'red'\r\n                GlobalVariables.c.rect(\r\n                    xInPixels + radiusInPixels - padding/2, \r\n                    yInPixels - radiusInPixels + padding/2, \r\n                    GlobalVariables.c.measureText(this.alertMessage.toUpperCase()).width + padding, \r\n                    - (parseInt(GlobalVariables.c.font) + padding))\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.strokeStyle = 'black'\r\n                GlobalVariables.c.lineWidth = 1\r\n                GlobalVariables.c.stroke()\r\n                GlobalVariables.c.closePath()\r\n\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = 'black'\r\n                GlobalVariables.c.fillText(this.alertMessage.toUpperCase(), xInPixels + radiusInPixels, yInPixels - radiusInPixels) \r\n                GlobalVariables.c.closePath()\r\n                \r\n            } \r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Adds a new attachment point to this atom\r\n     * @param {boolean} type - The type of the IO (input or output)\r\n     * @param {string} name - The name of the new attachment point\r\n     * @param {object} target - The atom to attach the new attachment point to. Should we force this to always be this one?\r\n     * @param {string} valueType - Describes the type of value the input is expecting options are number, geometry, array\r\n     * @param {object} defaultValue - The default value to be used when the value is not yet set\r\n     */ \r\n    addIO(type, name, target, valueType, defaultValue, ready, primary = false){\r\n        \r\n        if(target.inputs.find(o => (o.name === name && o.type === type))== undefined){ //Check to make sure there isn't already an IO with the same type and name\r\n            //compute the baseline offset from parent node\r\n            var offset\r\n            if (type == 'input'){\r\n                offset = -1* target.scaledRadius\r\n            }\r\n            else{\r\n                offset = target.scaledRadius\r\n            }\r\n            var newAp = new AttachmentPoint({\r\n                parentMolecule: target,\r\n                defaultOffsetX: offset,\r\n                defaultOffsetY: 0,\r\n                type: type,\r\n                valueType: valueType,\r\n                name: name,\r\n                primary: primary,\r\n                value: defaultValue,\r\n                defaultValue: defaultValue,\r\n                uniqueID: GlobalVariables.generateUniqueID(),\r\n                atomType: 'AttachmentPoint',\r\n                ready: true\r\n            })\r\n            \r\n            if(type == 'input'){\r\n                target.inputs.push(newAp)\r\n            }else{\r\n                target.output = newAp\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Removes an attachment point from an atom.\r\n     * @param {boolean} type - The type of the IO (input or output).\r\n     * @param {string} name - The name of the new attachment point.\r\n     * @param {object} target - The attom which the attachment point is attached to. Should \r\n     * @param {object} silent - Should any connected atoms be informed of the change\r\n     */ \r\n    removeIO(type, name, target, silent = false){\r\n        //Remove the target IO attachment point\r\n        target.inputs.forEach(input => {\r\n            if(input.name == name && input.type == type){\r\n                target.inputs.splice(target.inputs.indexOf(input),1)\r\n                input.deleteSelf(silent)\r\n            }\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Set an alert to display next to the atom.\r\n     * @param {string} message - The message to display.\r\n     */ \r\n    setAlert(message){\r\n        this.color = 'orange'\r\n        this.alertMessage = String(message)\r\n        console.warn(message)\r\n    }\r\n    \r\n    /**\r\n     * Clears the alert message attached to this atom.\r\n     */ \r\n    clearAlert(){\r\n        this.color = this.defaultColor\r\n        this.alertMessage = ''\r\n    }\r\n\r\n    /**\r\n     * Delineates bounds for selection box.\r\n     */ \r\n    selectBox(x,y,xEnd,yEnd){\r\n        let xIn = Math.min(x, xEnd)\r\n        let xOut = Math.max(x, xEnd)\r\n        let yIn = Math.min(y, yEnd)\r\n        let yOut = Math.max(y, yEnd)\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        if(xInPixels >= xIn && xInPixels <= xOut){\r\n            if(yInPixels >= yIn && yInPixels <= yOut){\r\n                //this.isMoving = true\r\n                this.selected = true\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the atom's response to a mouse click. This usually means selecting the atom and displaying it's contents in 3D\r\n     * @param {number} x - The X coordinate of the click\r\n     * @param {number} y - The Y coordinate of the click\r\n     * @param {boolean} clickProcessed - A flag to indicate if the click has already been processed\r\n     */ \r\n    clickDown(x,y, clickProcessed){\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        //If none of the inputs processed the click see if the atom should, if not clicked, then deselected\r\n        if(!clickProcessed && GlobalVariables.distBetweenPoints(x, xInPixels, y, yInPixels) < radiusInPixels){\r\n            this.isMoving = true\r\n            this.selected = true\r\n            this.updateSidebar()\r\n            this.sendToRender()\r\n            clickProcessed = true\r\n        }\r\n        //Deselect this if it wasn't clicked on, unless control is held\r\n        else if (!GlobalVariables.ctrlDown){\r\n            this.selected = false\r\n        }         \r\n        //Returns true if something was done with the click\r\n        this.inputs.forEach(child => {\r\n            if(child.clickDown(x,y, clickProcessed) == true){\r\n                clickProcessed = true\r\n            }\r\n        })\r\n        if(this.output){\r\n            if(this.output.clickDown(x,y, clickProcessed) == true){\r\n                clickProcessed = true\r\n            }\r\n        }\r\n           \r\n        return clickProcessed \r\n    }\r\n\r\n    /**\r\n     * Set the atom's response to a mouse double click. By default this isn't to do anything other than mark the double click as handled.\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     */ \r\n    doubleClick(x,y){\r\n        //returns true if something was done with the click\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        var clickProcessed = false\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, xInPixels, y, yInPixels)\r\n        \r\n        if (distFromClick < xInPixels){\r\n            clickProcessed = true\r\n        }\r\n        \r\n        return clickProcessed \r\n    }\r\n\r\n    /**\r\n     * Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        this.isMoving = false\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.clickUp(x,y)     \r\n        })\r\n        if(this.output){\r\n            this.output.clickUp(x,y)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set the atom's response to a mouse click and drag. Moves the atom around the screen.\r\n     * @param {number} x - The X cordinate of the click\r\n     * @param {number} y - The Y cordinate of the click\r\n     */ \r\n    clickMove(x,y){\r\n\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n        if (this.isMoving == true){\r\n            this.x = GlobalVariables.pixelsToWidth(x)\r\n            this.y = GlobalVariables.pixelsToHeight(y)\r\n        }\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.clickMove(x,y)       \r\n        })\r\n        if(this.output){\r\n            this.output.clickMove(x,y)\r\n        }\r\n        \r\n        var distFromClick = GlobalVariables.distBetweenPoints(x, xInPixels, y, yInPixels)\r\n        \r\n        //If we are close to the attachment point move it to it's hover location to make it accessible\r\n        if (distFromClick < radiusInPixels ){\r\n            this.showHover = true\r\n        }  \r\n        else { this.showHover = false}\r\n    }\r\n    \r\n    /**\r\n     * Set the atom's response to a key press. Is used to delete the atom if it is selected.\r\n     * @param {string} key - The key which has been pressed.\r\n     */ \r\n    keyPress(key){ \r\n\r\n      \r\n        this.inputs.forEach(child => {\r\n            child.keyPress(key)\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Updates the side bar to display information about the atom. By default this is just add a title and to let you edit any unconnected inputs.\r\n     */ \r\n    updateSidebar(){\r\n        //updates the sidebar to display information about this node\r\n        \r\n        var valueList = this.initializeSideBar()\r\n        \r\n        //Add options to set all of the inputs\r\n        this.inputs.forEach(input => {\r\n            if(input.type == 'input' && input.valueType != 'geometry' && input.connectors.length == 0){\r\n                if(input.valueType == 'number'){\r\n                    this.createEditableValueListItem(valueList,input,'value', input.name, true)\r\n                }\r\n                else{\r\n                    this.createEditableValueListItem(valueList,input,'value', input.name, false)\r\n                }\r\n            }\r\n        })\r\n        \r\n        //Add a delete button if we are using the touch interface\r\n        if(GlobalVariables.touchInterface){\r\n            this.createButton(valueList,this,\"Delete\",()=>{this.deleteNode()})\r\n        }\r\n        \r\n        return valueList\r\n    }\r\n    \r\n    /**\r\n     * Initialized the sidebar with a title and create the HTML object.\r\n     */ \r\n    initializeSideBar(){\r\n\r\n        //remove everything in the sideBar now\r\n        let sideBar = document.querySelector('.sideBar')\r\n        //Updates sidebar values before erasing\r\n        var editables = document.querySelectorAll(\".editing-item\")\r\n        editables.forEach(function(value) {\r\n            value.blur()\r\n        })\r\n\r\n        while (sideBar.firstChild) { \r\n            sideBar.removeChild(sideBar.firstChild)\r\n        }\r\n\r\n        //adds the name of the molecule to sideBar\r\n        var name2 = document.createElement('p')\r\n        name2.textContent = this.name\r\n        sideBar.appendChild(name2)\r\n        name2.setAttribute('class','molecule_title')\r\n        \r\n        //adds the name of the molecule to sideBar\r\n        var description = document.createElement('p')\r\n        description.textContent = this.description\r\n        sideBar.appendChild(description)\r\n        description.setAttribute('class','atom_description')\r\n        \r\n\r\n        //add the name as of project title \r\n        if (this.atomType == 'Molecule' ){\r\n            let headerBar_title = document.querySelector('#headerBar_title')\r\n            if(headerBar_title){\r\n                while (headerBar_title.firstChild) {\r\n                    headerBar_title.removeChild(headerBar_title.firstChild)\r\n                }\r\n               \r\n                var name1 = document.createElement('p')\r\n                name1.textContent = \"- \" + GlobalVariables.topLevelMolecule.name\r\n                headerBar_title.appendChild(name1)\r\n            }\r\n        }\r\n\r\n        //Create a list element\r\n        var valueList = document.createElement('ul')\r\n        sideBar.appendChild(valueList)\r\n        valueList.setAttribute('class', 'sidebar-list')\r\n\r\n        \r\n        return valueList\r\n\r\n    }\r\n\r\n    /**\r\n     * Delete this atom. Silent prevents it from telling its neighbors\r\n     */ \r\n    deleteNode(backgroundClickAfter = true, deletePath = true, silent = false){\r\n        //deletes this node and all of it's inputs\r\n        \r\n        this.inputs.forEach(input => { //disable the inputs before deleting\r\n            input.ready = false\r\n        })\r\n        \r\n        const inputsCopy = [...this.inputs]//Make a copy of the inputs list to delete all of them\r\n        inputsCopy.forEach(input => {\r\n            input.deleteSelf(silent)\r\n        })\r\n        if(this.output){\r\n            this.output.deleteSelf(silent)\r\n        }\r\n        \r\n        this.parent.nodesOnTheScreen.splice(this.parent.nodesOnTheScreen.indexOf(this),1) //remove this node from the list\r\n        \r\n        if(deletePath){\r\n            this.basicThreadValueProcessing({op: \"deletePath\", path: this.path }) //Delete the cached geometry\r\n        }\r\n        \r\n        if(backgroundClickAfter){\r\n            GlobalVariables.currentMolecule.backgroundClick()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Runs with each frame to draw the atom.\r\n     */ \r\n    update() {\r\n        \r\n        this.inputs.forEach(child => {\r\n            child.update()     \r\n        })\r\n        if(this.output){\r\n            this.output.update()\r\n        }\r\n        \r\n        this.draw()\r\n    }\r\n\r\n    /**\r\n     * Create an object containing the information about this atom that we want to save. \r\n     */ \r\n    serialize(offset = {x: 0, y: 0}){\r\n        //Offsets are used to make copy and pasted atoms move over a little bit\r\n        var ioValues = []\r\n        this.inputs.forEach(io => {\r\n            if (typeof io.getValue() == 'number' || typeof io.getValue() == 'string'){\r\n                var saveIO = {\r\n                    name: io.name,\r\n                    ioValue: io.getValue()\r\n                }\r\n                ioValues.push(saveIO)\r\n            }\r\n        })\r\n        \r\n        var object = {\r\n            atomType: this.atomType,\r\n            name: this.name,\r\n            x: this.x + offset.x,\r\n            y: this.y - offset.y,\r\n            uniqueID: this.uniqueID,\r\n            ioValues: ioValues\r\n        }\r\n        return object\r\n    }\r\n    \r\n    /**\r\n     * Return any contribution from this atom to the README file\r\n     */ \r\n    requestReadme(){\r\n        //request any contributions from this atom to the readme\r\n        \r\n        return []\r\n    }\r\n    \r\n    /**\r\n     * Set's the output value and shows the atom output on the 3D view.\r\n     */ \r\n    decreaseToProcessCountByOne(){\r\n        \r\n        GlobalVariables.topLevelMolecule.census()\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Token update value function to give each atom one by default\r\n     */ \r\n    updateValue(){\r\n    \r\n    }\r\n    \r\n    /**\r\n     * Used to walk back out the tree generating a list of constants...used for evolve\r\n     */ \r\n    walkBackForConstants(callback){\r\n        //Pass the call further up the chain\r\n        this.inputs.forEach(input => {\r\n            input.connectors.forEach(connector => {\r\n                connector.walkBackForConstants(callback)\r\n            })\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Displays the atom in 3D and sets the output.\r\n     */ \r\n    displayAndPropagate(){\r\n        //If this has an output write to it\r\n        if(this.output){\r\n            this.output.setValue(this.path)\r\n            this.output.ready = true\r\n        }\r\n        \r\n        //If this atom is selected, send the updated value to the renderer\r\n        if (this.selected){\r\n            this.sendToRender()\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets the atom to wait on coming information. Basically a pass through, but used for molecules\r\n     */ \r\n    waitOnComingInformation(){\r\n        if(this.output){\r\n            this.output.waitOnComingInformation()\r\n        }\r\n        \r\n        if(this.processing){\r\n            console.warn(\"Processing \"+ this.name + \" Canceled\")\r\n            this.cancelProcessing()\r\n            this.processing = false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Calls a worker thread to compute the atom's value.\r\n     */ \r\n    basicThreadValueProcessing(toAsk){\r\n        //If the inputs are all ready\r\n        var go = true\r\n        this.inputs.forEach(input => {\r\n            if(!input.ready){\r\n                go = false\r\n            }\r\n        })\r\n        if(go){     //Then we update the value\r\n            \r\n            this.waitOnComingInformation() //This sends a chain command through the tree to lock all the inputs which are down stream of this one. It also cancels anything processing if this atom was doing a calculation already.\r\n            \r\n            this.processing = true\r\n            this.decreaseToProcessCountByOne()\r\n            \r\n            \r\n            this.clearAlert()\r\n            \r\n            const {answer, terminate} = window.ask(toAsk)\r\n            answer.then(result => {\r\n                if (result != -1 ){\r\n                    this.displayAndPropagate()\r\n                }else{\r\n                    this.setAlert(\"Unable to compute\")\r\n                }\r\n                this.processing = false\r\n            })\r\n            \r\n            this.cancelProcessing = terminate //This can be called to interrupt the computation\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Starts propagation placeholder. Most atom types do not begin propagation.\r\n     */ \r\n    beginPropagation(){\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Returns an array of length two indicating that this is one atom and if it is waiting to be computed\r\n     */ \r\n    census(){\r\n        var waiting = 0\r\n        this.inputs.forEach(input => {\r\n            if(input.ready != true){\r\n                waiting = 1\r\n            }\r\n        })\r\n        return [1,waiting]\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms.\r\n     */ \r\n    loadTree(){\r\n        this.inputs.forEach(input => {\r\n            input.loadTree()\r\n        })\r\n        if(this.output){\r\n            this.output.value = this.path\r\n        }\r\n        return this.path\r\n    }\r\n    \r\n    /**\r\n     * Send the value of this atom to the 3D display.\r\n     */ \r\n    sendToRender(){\r\n        //Send code to JSxCAD to render\r\n        try{\r\n            GlobalVariables.writeToDisplay(this.path)\r\n        }\r\n        catch(err){\r\n            this.setAlert(err)\r\n        }\r\n\r\n    }\r\n    \r\n    /**\r\n     * Find the value of an input for with a given name.\r\n     * @param {string} ioName - The name of the target attachment point.\r\n     */ \r\n    findIOValue(ioName){\r\n        ioName = ioName.split('~').join('')\r\n        var ioValue = null\r\n        \r\n        this.inputs.forEach(child => {\r\n            if(child.name == ioName && child.type == 'input'){\r\n                ioValue = child.getValue()\r\n            }\r\n        })\r\n        \r\n        return ioValue\r\n    }\r\n    \r\n    /**\r\n     * Dump the stored copies of any geometry in this atom to free up ram....probably can be deleted\r\n     */ \r\n    // dumpBuffer(){\r\n    // this.inputs.forEach(input => {\r\n    // input.dumpBuffer()\r\n    // })\r\n    // if(this.output){\r\n    // this.output.dumpBuffer()\r\n    // }\r\n    // this.value = null\r\n    // }\r\n    \r\n    /**\r\n     * Creates an editable HTML item to set the value of an object element. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} object - The object with the element we are editing.\r\n     * @param {string} key - The key of the element to edit.\r\n     * @param {string} label - The label to display next to the editable value.\r\n     * @param {boolean} resultShouldBeNumber - A flag to indicate if the input should be converted to a number.\r\n     * @param {object} callBack - Optional. A function to call with the new value when the value changes.\r\n     */ \r\n    createEditableValueListItem(list,object,key, label, resultShouldBeNumber, callBack = () => console.warn(\"no callback\")){\r\n\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item sidebar-editable-div')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('label')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(label + ':')\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('span')\r\n        labelDiv.appendChild(valueTextDiv)\r\n        var valueText = document.createTextNode(object[key])\r\n        valueTextDiv.appendChild(valueText)\r\n        valueTextDiv.setAttribute('contenteditable', 'true')\r\n        valueTextDiv.setAttribute('class', 'editing-item')\r\n        var thisID = label+GlobalVariables.generateUniqueID()\r\n        valueTextDiv.setAttribute('id', thisID)\r\n        \r\n        \r\n        document.getElementById(thisID).addEventListener('focusout',() =>{\r\n            var valueInBox = document.getElementById(thisID).textContent.trim()\r\n            if(resultShouldBeNumber){\r\n                valueInBox = GlobalVariables.limitedEvaluate(valueInBox)\r\n            }\r\n            \r\n            //If the target is an attachmentPoint then call the setter function\r\n            if(object instanceof AttachmentPoint){\r\n                object.setValue(valueInBox)\r\n            }\r\n            else{\r\n                object[key] = valueInBox\r\n                callBack(valueInBox)\r\n            }\r\n        })\r\n        \r\n        //prevent the return key from being used when editing a value\r\n        document.getElementById(thisID).addEventListener('keypress', function(evt) {\r\n            if (evt.which === 13) {\r\n                evt.preventDefault() \r\n                document.getElementById(thisID).blur() //shift focus away if someone presses enter\r\n            }\r\n        })\r\n\r\n    }\r\n    \r\n    /**\r\n     * Creates an non-editable HTML item to set the value of an object element. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} object - The object with the element we are displaying.\r\n     * @param {string} key - The key of the element to display.\r\n     * @param {string} label - The label to display next to the displayed value.\r\n     */ \r\n    createNonEditableValueListItem(list,object,key, label){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item sidebar-editable-div')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(label + ':')\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem label-item')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var valueText = document.createTextNode(object[key])\r\n        valueTextDiv.appendChild(valueText)\r\n        valueTextDiv.setAttribute('contenteditable', 'false')\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem noediting-item')\r\n        var thisID = label+GlobalVariables.generateUniqueID()\r\n        valueTextDiv.setAttribute('id', thisID)\r\n        \r\n\r\n    }\r\n    \r\n    /**\r\n     * Creates a html representation of the passed text. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {string} texxt - The text used to generate the markdown html.\r\n     */ \r\n    createMarkdownListItem(list, text){\r\n        \r\n        var converter = new showdown.Converter()\r\n        //var text      = '# hello, markdown!'\r\n        var html      = converter.makeHtml(text)\r\n        \r\n        var markdownTextDiv = document.createElement('div')\r\n        markdownTextDiv.innerHTML = html\r\n        \r\n        //var valueText = document.createTextNode(text)\r\n        //valueTextDiv.appendChild(valueText)\r\n        list.appendChild(markdownTextDiv)       \r\n    }\r\n    \r\n    /**\r\n     * Creates dropdown with multiple options to select. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r\n     * @param {array} options - A list of options to display in the drop down.\r\n     * @param {number} selectedOption - The zero referenced index of the selected option.\r\n     * @param {string} description - A description of what the dropdown does.\r\n     * @param {object} Callback function\r\n     */ \r\n    createDropDown(list,parent,options,selectedOption, description, callback){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'sidebar-item')\r\n        \r\n        //Left div which displays the label\r\n        var labelDiv = document.createElement('div')\r\n        div.appendChild(labelDiv)\r\n        var labelText = document.createTextNode(description)\r\n        labelDiv.appendChild(labelText)\r\n        labelDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        \r\n        //Right div which is editable and displays the value\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var dropDown = document.createElement('select')\r\n        options.forEach(option => {\r\n            var op = new Option()\r\n            op.value = options.findIndex(thisOption => thisOption === option)\r\n            op.text = option\r\n            dropDown.options.add(op)\r\n        })\r\n        valueTextDiv.appendChild(dropDown)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        dropDown.selectedIndex = selectedOption //display the current selection\r\n        \r\n        dropDown.addEventListener(\r\n            'change',\r\n            function() { callback(dropDown.value) },\r\n            false\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * Creates button. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r\n     * @param {string} buttonText - The text on the button.\r\n     * @param {object} functionToCall - The function to call when the button is pressed.\r\n     */ \r\n    createButton(list,parent,buttonText,functionToCall){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'runSideBarDiv')\r\n        \r\n        \r\n        //Right div which is button\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var button = document.createElement('button')\r\n        var buttonTextNode = document.createTextNode(buttonText)\r\n        button.setAttribute('class', ' browseButton')\r\n        button.setAttribute('id', buttonText.replace(/\\s+/g, \"\") + \"-button\")\r\n        button.appendChild(buttonTextNode)\r\n        valueTextDiv.appendChild(button)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        button.addEventListener(\r\n            'mousedown',\r\n            function() { functionToCall() } ,\r\n            false\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * Creates file upload button. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {object} parent - The parent which has the function to call on the change...this should really be done with a callback function.\r\n     * @param {string} buttonText - The text on the button.\r\n     * @param {object} functionToCall - The function to call when the button is pressed.\r\n     */ \r\n    createFileUpload(list,parent,buttonText,functionToCall){\r\n        var listElement = document.createElement('LI')\r\n        list.appendChild(listElement)\r\n        \r\n        \r\n        //Div which contains the entire element\r\n        var div = document.createElement('div')\r\n        listElement.appendChild(div)\r\n        div.setAttribute('class', 'runSideBarDiv')\r\n        \r\n        \r\n        //Right div which is button\r\n        var valueTextDiv = document.createElement('div')\r\n        div.appendChild(valueTextDiv)\r\n        var button = document.createElement('input')\r\n        button.type = \"file\"\r\n        var buttonTextNode = document.createTextNode(buttonText)\r\n        button.setAttribute('class', ' browseButton')\r\n        button.setAttribute('id', buttonText.replace(/\\s+/g, \"\") + \"-button\")\r\n        button.appendChild(buttonTextNode)\r\n        valueTextDiv.appendChild(button)\r\n        valueTextDiv.setAttribute('class', 'sidebar-subitem')\r\n        \r\n        button.addEventListener(\r\n            'change',\r\n            functionToCall,\r\n            false\r\n        )\r\n    }\r\n    \r\n    /**\r\n     * Creates button. Used in the sidebar.\r\n     * @param {object} list - The HTML object to attach the new item to.\r\n     * @param {string} buttonText - The text on the button.\r\n     * @param {boolean} - Flag to see if checkbox is checked\r\n     * @param {object} functionToCall - The function to call when the button is pressed.\r\n     */ \r\n    createCheckbox(sideBar,text,isChecked,callback){\r\n        var gridDiv = document.createElement('div')\r\n        sideBar.appendChild(gridDiv)\r\n        gridDiv.setAttribute('id', text + \"-parent\")\r\n        gridDiv.setAttribute('class', \"sidebar-checkbox\")\r\n        var gridCheck = document.createElement('input')\r\n        gridDiv.appendChild(gridCheck)\r\n        gridCheck.setAttribute('type', 'checkbox')\r\n        gridCheck.setAttribute('id', text)\r\n        \r\n        if (isChecked){\r\n            gridCheck.setAttribute('checked', 'true')\r\n        }\r\n        \r\n\r\n        var gridCheckLabel = document.createElement('label')\r\n        gridDiv.appendChild(gridCheckLabel)\r\n        gridCheckLabel.setAttribute('for', 'gridCheck')\r\n        gridCheckLabel.setAttribute('style', 'margin-right:1em;')\r\n        gridCheckLabel.textContent = text\r\n\r\n        gridCheck.addEventListener('change', event => {\r\n            callback(event)\r\n        })\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/atom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 649,
    "kind": "class",
    "name": "Atom",
    "memberof": "src/js/prototypes/atom.js",
    "static": true,
    "longname": "src/js/prototypes/atom.js~Atom",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/atom.js",
    "importStyle": "Atom",
    "description": "This class is the prototype for all atoms.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 650,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 651,
    "kind": "member",
    "name": "inputs",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#inputs",
    "access": "public",
    "description": "An array of all of the input attachment points connected to this atom",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 652,
    "kind": "member",
    "name": "output",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#output",
    "access": "public",
    "description": "This atom's output attachment point if it has one",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 653,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#uniqueID",
    "access": "public",
    "description": "This atom's unique ID. Often overwritten later when loading",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 654,
    "kind": "member",
    "name": "description",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#description",
    "access": "public",
    "description": "A description of this atom",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 655,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#x",
    "access": "public",
    "description": "The X cordinate of this atom",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 656,
    "kind": "member",
    "name": "y",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#y",
    "access": "public",
    "description": "The Y cordinate of this atom",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 657,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#radius",
    "access": "public",
    "description": "This atom's radius as displayed on the screen is 1/72 width",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 658,
    "kind": "member",
    "name": "defaultColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#defaultColor",
    "access": "public",
    "description": "This atom's default color (ie when not selected or processing)",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 659,
    "kind": "member",
    "name": "selectedColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selectedColor",
    "access": "public",
    "description": "This atom's color when selected",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 660,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#strokeColor",
    "access": "public",
    "description": "The color currently used for strokes",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 661,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selected",
    "access": "public",
    "description": "A flag to indicate if this atom is currently selected",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 662,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#color",
    "access": "public",
    "description": "This atom's current color",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "name",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#name",
    "access": "public",
    "description": "This atom's name",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "name": "parentMolecule",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#parentMolecule",
    "access": "public",
    "description": "This atom's parent, usually the molecule which contains this atom",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 665,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#value",
    "access": "public",
    "description": "This atom's value...Is can this be done away with? Are we basically storing the value in the output now?",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 666,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#isMoving",
    "access": "public",
    "description": "A flag to indicate if this atom is currently being dragged on the screen.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "showHover",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#showHover",
    "access": "public",
    "description": "A flag to indicate if we are hovering over this atom.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 670,
    "kind": "member",
    "name": "alertMessage",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#alertMessage",
    "access": "public",
    "description": "A warning message displayed next to the atom. Put text in here to have a warning automatically show up. Cleared each time the output is regenerated.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 671,
    "kind": "member",
    "name": "processing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#processing",
    "access": "public",
    "description": "A flag to indicate if the atom is currently computing a new output. Turns the molecule blue.",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 672,
    "kind": "member",
    "name": "path",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#path",
    "access": "public",
    "description": "The path which contains the geometry represented by this atom",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 673,
    "kind": "member",
    "name": "cancelProcessing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#cancelProcessing",
    "access": "public",
    "description": "A function which can be called to cancel the processing being done for this atom.",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 674,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#[key]",
    "access": "public",
    "description": "Assign each of the values in values as this.value",
    "lineNumber": 136,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 675,
    "kind": "method",
    "name": "generatePath",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#generatePath",
    "access": "public",
    "description": "Generates the path for this atom from it's location in the graph",
    "lineNumber": 145,
    "params": [],
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "setValues",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#setValues",
    "access": "public",
    "description": "Applies each of the passed values to this as this.x",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "A list of values to set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#draw",
    "access": "public",
    "description": "Draws the atom on the screen",
    "lineNumber": 184,
    "params": [
      {
        "name": "drawType",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 685,
    "kind": "method",
    "name": "addIO",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#addIO",
    "access": "public",
    "description": "Adds a new attachment point to this atom",
    "lineNumber": 273,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the IO (input or output)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new attachment point"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The atom to attach the new attachment point to. Should we force this to always be this one?"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "valueType",
        "description": "Describes the type of value the input is expecting options are number, geometry, array"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultValue",
        "description": "The default value to be used when the value is not yet set"
      }
    ],
    "return": null
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "removeIO",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#removeIO",
    "access": "public",
    "description": "Removes an attachment point from an atom.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of the IO (input or output)."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the new attachment point."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The attom which the attachment point is attached to. Should"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "silent",
        "description": "Should any connected atoms be informed of the change"
      }
    ],
    "return": null
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "setAlert",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#setAlert",
    "access": "public",
    "description": "Set an alert to display next to the atom.",
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to display."
      }
    ],
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "clearAlert",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clearAlert",
    "access": "public",
    "description": "Clears the alert message attached to this atom.",
    "lineNumber": 337,
    "params": [],
    "return": null
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "selectBox",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#selectBox",
    "access": "public",
    "description": "Delineates bounds for selection box.",
    "lineNumber": 345,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "xEnd",
        "types": [
          "*"
        ]
      },
      {
        "name": "yEnd",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickDown",
    "access": "public",
    "description": "Set the atom's response to a mouse click. This usually means selecting the atom and displaying it's contents in 3D",
    "lineNumber": 366,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clickProcessed",
        "description": "A flag to indicate if the click has already been processed"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "doubleClick",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#doubleClick",
    "access": "public",
    "description": "Set the atom's response to a mouse double click. By default this isn't to do anything other than mark the double click as handled.",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 700,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickUp",
    "access": "public",
    "description": "Set the atom's response to a mouse click up. If the atom is moving this makes it stop moving.",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#clickMove",
    "access": "public",
    "description": "Set the atom's response to a mouse click and drag. Moves the atom around the screen.",
    "lineNumber": 439,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The X cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The Y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#keyPress",
    "access": "public",
    "description": "Set the atom's response to a key press. Is used to delete the atom if it is selected.",
    "lineNumber": 469,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which has been pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "updateSidebar",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#updateSidebar",
    "access": "public",
    "description": "Updates the side bar to display information about the atom. By default this is just add a title and to let you edit any unconnected inputs.",
    "lineNumber": 480,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "method",
    "name": "initializeSideBar",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#initializeSideBar",
    "access": "public",
    "description": "Initialized the sidebar with a title and create the HTML object.",
    "lineNumber": 508,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "deleteNode",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#deleteNode",
    "access": "public",
    "description": "Delete this atom. Silent prevents it from telling its neighbors",
    "lineNumber": 562,
    "params": [
      {
        "name": "backgroundClickAfter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "deletePath",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#update",
    "access": "public",
    "description": "Runs with each frame to draw the atom.",
    "lineNumber": 591,
    "params": [],
    "return": null
  },
  {
    "__docId__": 712,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#serialize",
    "access": "public",
    "description": "Create an object containing the information about this atom that we want to save. ",
    "lineNumber": 606,
    "params": [
      {
        "name": "offset",
        "optional": true,
        "types": [
          "{\"x\": number, \"y\": number}"
        ],
        "defaultRaw": {
          "x": 0,
          "y": 0
        },
        "defaultValue": "{\"x\":0,\"y\":0}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "requestReadme",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#requestReadme",
    "access": "public",
    "description": "Return any contribution from this atom to the README file",
    "lineNumber": 633,
    "params": [],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "decreaseToProcessCountByOne",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#decreaseToProcessCountByOne",
    "access": "public",
    "description": "Set's the output value and shows the atom output on the 3D view.",
    "lineNumber": 642,
    "params": [],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "updateValue",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#updateValue",
    "access": "public",
    "description": "Token update value function to give each atom one by default",
    "lineNumber": 651,
    "params": [],
    "return": null
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "walkBackForConstants",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#walkBackForConstants",
    "access": "public",
    "description": "Used to walk back out the tree generating a list of constants...used for evolve",
    "lineNumber": 658,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "displayAndPropagate",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#displayAndPropagate",
    "access": "public",
    "description": "Displays the atom in 3D and sets the output.",
    "lineNumber": 670,
    "params": [],
    "return": null
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#waitOnComingInformation",
    "access": "public",
    "description": "Sets the atom to wait on coming information. Basically a pass through, but used for molecules",
    "lineNumber": 686,
    "params": [],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "basicThreadValueProcessing",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#basicThreadValueProcessing",
    "access": "public",
    "description": "Calls a worker thread to compute the atom's value.",
    "lineNumber": 701,
    "params": [
      {
        "name": "toAsk",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#beginPropagation",
    "access": "public",
    "description": "Starts propagation placeholder. Most atom types do not begin propagation.",
    "lineNumber": 736,
    "params": [],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "census",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#census",
    "access": "public",
    "description": "Returns an array of length two indicating that this is one atom and if it is waiting to be computed",
    "lineNumber": 743,
    "params": [],
    "return": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms.",
    "lineNumber": 756,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "sendToRender",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#sendToRender",
    "access": "public",
    "description": "Send the value of this atom to the 3D display.",
    "lineNumber": 769,
    "params": [],
    "return": null
  },
  {
    "__docId__": 728,
    "kind": "method",
    "name": "findIOValue",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#findIOValue",
    "access": "public",
    "description": "Find the value of an input for with a given name.",
    "lineNumber": 784,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ioName",
        "description": "The name of the target attachment point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "createEditableValueListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createEditableValueListItem",
    "access": "public",
    "description": "Creates an editable HTML item to set the value of an object element. Used in the sidebar.",
    "lineNumber": 819,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object with the element we are editing."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the element to edit."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The label to display next to the editable value."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "resultShouldBeNumber",
        "description": "A flag to indicate if the input should be converted to a number."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "callBack",
        "description": "Optional. A function to call with the new value when the value changes."
      }
    ],
    "return": null
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "createNonEditableValueListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createNonEditableValueListItem",
    "access": "public",
    "description": "Creates an non-editable HTML item to set the value of an object element. Used in the sidebar.",
    "lineNumber": 882,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object with the element we are displaying."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key of the element to display."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "The label to display next to the displayed value."
      }
    ],
    "return": null
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "createMarkdownListItem",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createMarkdownListItem",
    "access": "public",
    "description": "Creates a html representation of the passed text. Used in the sidebar.",
    "lineNumber": 918,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "texxt",
        "description": "The text used to generate the markdown html."
      }
    ],
    "return": null
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "createDropDown",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createDropDown",
    "access": "public",
    "description": "Creates dropdown with multiple options to select. Used in the sidebar.",
    "lineNumber": 941,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent which has the function to call on the change...this should really be done with a callback function."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "A list of options to display in the drop down."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedOption",
        "description": "The zero referenced index of the selected option."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A description of what the dropdown does."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "Callback",
        "description": "function"
      }
    ],
    "return": null
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "createButton",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createButton",
    "access": "public",
    "description": "Creates button. Used in the sidebar.",
    "lineNumber": 988,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent which has the function to call on the change...this should really be done with a callback function."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buttonText",
        "description": "The text on the button."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionToCall",
        "description": "The function to call when the button is pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "createFileUpload",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createFileUpload",
    "access": "public",
    "description": "Creates file upload button. Used in the sidebar.",
    "lineNumber": 1024,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": "The parent which has the function to call on the change...this should really be done with a callback function."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buttonText",
        "description": "The text on the button."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionToCall",
        "description": "The function to call when the button is pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "createCheckbox",
    "memberof": "src/js/prototypes/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/atom.js~Atom#createCheckbox",
    "access": "public",
    "description": "Creates button. Used in the sidebar.",
    "lineNumber": 1061,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "list",
        "description": "The HTML object to attach the new item to."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buttonText",
        "description": "The text on the button."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "Flag to see if checkbox is checked"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionToCall",
        "description": "The function to call when the button is pressed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 736,
    "kind": "file",
    "name": "src/js/prototypes/attachmentpoint.js",
    "content": "import Connector from './connector'\r\nimport GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * This class creates a new attachmentPoint which are the input and output blobs on Atoms\r\n */\r\nexport default class AttachmentPoint {\r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        /** \r\n         * This atom's default radius (non hover)\r\n         * @type {number}\r\n         */\r\n        this.defaultRadius = 1/60\r\n        /** \r\n         * A flag to indicate if this attachment point is currently expanded.\r\n         * @type {boolean}\r\n         */\r\n        this.expandedRadius = false\r\n        /** \r\n         * This atom's current radius as displayed.\r\n         * @type {number}\r\n         */\r\n        this.radius = 1/60\r\n        /** \r\n         * When the mouse is hovering where should the AP move in X\r\n         * @type {number}\r\n         */\r\n        this.hoverOffsetX = 0\r\n        /** \r\n         * When the mouse is hovering where should the AP move in Y\r\n         * @type {number}\r\n         */\r\n        this.hoverOffsetY = 0\r\n        /** \r\n         * The attachment points X position\r\n         * @type {number}\r\n         */\r\n        this.x = 0\r\n        /** \r\n         * The attachment point's Y position\r\n         * @type {number}\r\n         */\r\n        this.y = 0\r\n        /** \r\n         * A unique identifying number for this attachment point\r\n         * @type {number}\r\n         */\r\n        this.uniqueID = 0\r\n        /** \r\n         * The default offset position in X referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.defaultOffsetX = 0\r\n        /** \r\n         * The default offset position in Y referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.defaultOffsetY = 0\r\n        /** \r\n         * The current offset position in X referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.offsetX = 0\r\n        /** \r\n         * The current offset position in Y referenced to the center of the parent atom.\r\n         * @type {number}\r\n         */\r\n        this.offsetY = 0\r\n        /** \r\n         * A flag to determine if the hover text is shown next to the attachment point.\r\n         * @type {boolean}\r\n         */\r\n        this.showHoverText = true\r\n        /** \r\n         * The attachment point type.\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'AttachmentPoint'\r\n        \r\n        /** \r\n         * The attachment point value type. Options are number, geometry, array.\r\n         * @type {string}\r\n         */\r\n        this.valueType = 'number'\r\n        /** \r\n         * The attachment point type. Options are input, output.\r\n         * @type {string}\r\n         */\r\n        this.type = 'output'\r\n        \r\n        /** \r\n         * This is a flag to indicate if the attachment point is of the primary type.\r\n         * Primary type inputs are of the form geometry.translate(input2, input3, input4) for example\r\n         * This value is useful for importing molecules into other formats. I don't know if this is used any more. Maybe it can be deleted.\r\n         * @type {boolean}\r\n         */\r\n        this.primary = false\r\n        \r\n        /** \r\n         * The attachment point current value.\r\n         * @type {number}\r\n         */\r\n        this.value = 10\r\n        \r\n        /**\r\n         * The default value to be used by the ap when nothing is attached\r\n         * @type {string}\r\n         */\r\n        this.defaultValue = 10\r\n        \r\n        /** \r\n         * A flag to indicate if the attachment point is currently ready. Used to order initilization when program is loaded.\r\n         * @type {string}\r\n         */\r\n        this.ready = true\r\n        /** \r\n         * A list of all of the connectors attached to this attachment point\r\n         * @type {object}\r\n         */\r\n        this.connectors = []\r\n        \r\n        this.offsetX = this.defaultOffsetX\r\n        this.offsetY = this.defaultOffsetY\r\n        \r\n        for(var key in values) {\r\n            /**\r\n             * Assign values in values as this.x\r\n             */\r\n            this[key] = values[key]\r\n        }\r\n        this.clickMove(0,0) //trigger a refresh to get all the current values\r\n    }\r\n    \r\n    /**\r\n     * Draws the attachment point on the screen. Called with each frame.\r\n     */ \r\n    draw() {\r\n       \r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n        let parentRadiusInPixels = GlobalVariables.widthToPixels(this.parentMolecule.radius)\r\n        let parentXInPixels = GlobalVariables.widthToPixels(this.parentMolecule.x)\r\n        let parentYInPixels = GlobalVariables.heightToPixels(this.parentMolecule.y)\r\n\r\n        this.defaultRadius = radiusInPixels\r\n        radiusInPixels = parentRadiusInPixels/2.7\r\n\r\n        if (this.expandedRadius){\r\n            radiusInPixels = parentRadiusInPixels/2.4\r\n        }\r\n        if(this.parentMolecule.inputs.length < 2 && this.type == 'input'){\r\n            //This prevents single attachment points from expanding out\r\n            /**\r\n             * The x coordinate of the attachment point.\r\n             */\r\n            xInPixels = parentXInPixels - parentRadiusInPixels\r\n            this.x = this.parentMolecule.x - this.parentMolecule.radius //This makes sure it says it is where it actually is\r\n            /**\r\n             * The y coordinate of the attachment point.\r\n             */\r\n            yInPixels = parentYInPixels\r\n        }    \r\n        else if(this.parentMolecule.inputs.length < 2 && this.type == 'output'){\r\n            xInPixels = parentXInPixels + parentRadiusInPixels\r\n            yInPixels = parentYInPixels\r\n        }                 \r\n\r\n        var txt = this.name\r\n        var textWidth = GlobalVariables.c.measureText(txt).width\r\n        GlobalVariables.c.font = '10px Work Sans'\r\n\r\n        var bubbleColor = '#C300FF'\r\n        var scaleRadiusDown = radiusInPixels*.7\r\n        var halfRadius = radiusInPixels *.5\r\n\r\n        \r\n        if (this.showHoverText){\r\n            if(this.type == 'input'){\r\n \r\n                GlobalVariables.c.globalCompositeOperation='destination-over'\r\n                GlobalVariables.c.beginPath()\r\n\r\n                if (this.name === 'geometry'){\r\n                    GlobalVariables.c.fillStyle = this.parentMolecule.selectedColor   \r\n                }\r\n                else{\r\n                    GlobalVariables.c.fillStyle = bubbleColor\r\n                }\r\n            \r\n                //Draws bubble shape\r\n                GlobalVariables.c.rect(xInPixels - textWidth - radiusInPixels - halfRadius, yInPixels - radiusInPixels, textWidth + radiusInPixels + halfRadius , radiusInPixels*2)   \r\n                GlobalVariables.c.arc(xInPixels - textWidth - radiusInPixels - halfRadius, yInPixels, radiusInPixels, 0, Math.PI * 2, false)\r\n\r\n                //Bubble text\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.globalCompositeOperation='source-over'\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor\r\n                GlobalVariables.c.textAlign = 'end'\r\n                GlobalVariables.c.fillText(this.name, xInPixels - (radiusInPixels + 3), yInPixels+2)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n            }\r\n            else{\r\n\r\n                GlobalVariables.c.beginPath()\r\n                    \r\n                if (this.name === 'geometry'){\r\n                    GlobalVariables.c.fillStyle = this.parentMolecule.selectedColor   \r\n                }\r\n                else{\r\n                    GlobalVariables.c.fillStyle = bubbleColor\r\n                }\r\n\r\n                GlobalVariables.c.rect(xInPixels, yInPixels - scaleRadiusDown, textWidth + radiusInPixels + halfRadius, scaleRadiusDown*2)\r\n                GlobalVariables.c.arc(xInPixels + textWidth + radiusInPixels + halfRadius, yInPixels, scaleRadiusDown, 0, Math.PI * 2, false)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n                GlobalVariables.c.beginPath()\r\n                GlobalVariables.c.fillStyle = this.parentMolecule.defaultColor\r\n                GlobalVariables.c.textAlign = 'start' \r\n                GlobalVariables.c.fillText(this.name, (xInPixels + halfRadius) + (radiusInPixels + 3), yInPixels+2)\r\n                GlobalVariables.c.fill()\r\n                GlobalVariables.c.closePath()\r\n            }\r\n\r\n        }\r\n \r\n        GlobalVariables.c.beginPath()\r\n        if(this.ready){\r\n            GlobalVariables.c.fillStyle = this.parentMolecule.color\r\n        }else{\r\n            GlobalVariables.c.fillStyle = '#6ba4ff'\r\n        }\r\n        GlobalVariables.c.strokeStyle = this.parentMolecule.strokeColor\r\n        GlobalVariables.c.lineWidth = 1\r\n\r\n        GlobalVariables.c.arc(xInPixels, yInPixels, radiusInPixels, 0, Math.PI * 2, false)\r\n        if(this.showHoverText == true){\r\n            GlobalVariables.c.fill()\r\n            GlobalVariables.c.stroke()\r\n        }\r\n        GlobalVariables.c.closePath()  \r\n\r\n        if (!this.expandedRadius){ \r\n            if (this.type == 'output'){     \r\n                this.offsetX = this.parentMolecule.radius  \r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.\r\n     * @param {number} x - The x coordinate of the click\r\n     * @param {number} y - The y coordinate of the click\r\n     * @param {boolean} clickProcessed - Has the click already been handled\r\n     */ \r\n    clickDown(x,y, clickProcessed){\r\n\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n\r\n        if(GlobalVariables.distBetweenPoints (xInPixels, x, yInPixels, y) < this.defaultRadius && !clickProcessed){\r\n            //console.log(this.value)\r\n            if(this.type == 'output'){                  //begin to extend a connector from this if it is an output\r\n                new Connector({\r\n                    parentMolecule: this.parentMolecule, \r\n                    attachmentPoint1: this,\r\n                    atomType: 'Connector',\r\n                    isMoving: true\r\n                })\r\n            }\r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                    connector.selected = true\r\n                })\r\n            }\r\n            \r\n            return true //indicate that the click was handled by this object\r\n        }\r\n        else{\r\n            if(this.type == 'input'){ //connectors can only be selected by clicking on an input\r\n                this.connectors.forEach(connector => {      //unselect any connectors attached to this node\r\n                    connector.selected = false\r\n                })\r\n            }\r\n            return false //indicate that the click was not handled by this object\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles mouse click up. If the click is inside the AP and a connector is currently extending, then a connection is made\r\n     * @param {number} x - The x coordinate of the click\r\n     * @param {number} y - The y coordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        this.connectors.forEach(connector => {\r\n            connector.clickUp(x, y)\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Handles mouse click and move to expand the AP. Could this be done with a call to expand out?\r\n     * @param {number} x - The x coordinate of the click\r\n     * @param {number} y - The y coordinate of the click\r\n     */ \r\n    clickMove(x,y){\r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n        \r\n        let parentXInPixels = GlobalVariables.widthToPixels(this.parentMolecule.x)\r\n        let parentYInPixels = GlobalVariables.heightToPixels(this.parentMolecule.y)\r\n        let parentRadiusInPixels = GlobalVariables.widthToPixels(this.parentMolecule.radius)\r\n       \r\n        //expand if touched by mouse \r\n        var distFromClick =  Math.abs(GlobalVariables.distBetweenPoints(parentXInPixels, x, parentYInPixels, y))\r\n        //If we are close to the attachment point move it to it's hover location to make it accessible\r\n        if (distFromClick < parentRadiusInPixels*2.7 && this.type == 'input'){       \r\n            this.expandOut(distFromClick)\r\n            this.showHoverText = true     \r\n        }         \r\n        else if( distFromClick < parentRadiusInPixels *1.5 && this.type == 'output'){       \r\n            this.showHoverText = true\r\n        }\r\n        else{\r\n            this.reset()\r\n            this.expandedRadius = false\r\n        }\r\n        //Expand it if you are close enough to make connection\r\n        if (GlobalVariables.distBetweenPoints(xInPixels, x, yInPixels, y) < radiusInPixels ){\r\n            this.expandedRadius = true\r\n        }  \r\n        else{\r\n            this.expandedRadius = false\r\n        }\r\n        \r\n        this.connectors.forEach(connector => {\r\n            connector.clickMove(x, y)       \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * I'm not sure what this does. Can it be deleted?\r\n     */ \r\n    reset(){\r\n\r\n        if (this.type == 'input'){\r\n            this.offsetX = -1* this.parentMolecule.radius\r\n            this.offsetY = this.defaultOffsetY\r\n        }\r\n        this.showHoverText = false\r\n    }\r\n    \r\n    /**\r\n     * Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.\r\n     * @param {number} cursorDistance - The distance the cursor is from the attachment point.\r\n     */ \r\n    expandOut(cursorDistance){\r\n\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        const inputList = this.parentMolecule.inputs.filter(input => input.type == 'input')\r\n        const attachmentPointNumber = inputList.indexOf(this) \r\n        const anglePerIO = (Math.PI) / (inputList.length + 1)\r\n        // angle correction so that it centers menu adjusting to however many attachment points there are \r\n        const angleCorrection = -Math.PI/2 - anglePerIO\r\n        this.hoverOffsetY = 12 * this.parentMolecule.radius * (Math.sin((attachmentPointNumber * anglePerIO) - angleCorrection))\r\n        this.hoverOffsetX = 4 * this.parentMolecule.radius * (Math.cos((attachmentPointNumber * anglePerIO) - angleCorrection))\r\n        cursorDistance = Math.max( cursorDistance, radiusInPixels*2) //maxes cursor distance so we can hover over each attachment without expansion movement\r\n        //this.offset uses radius in pixels before translating to pixels because that's also the value that limits cursor distance\r\n        this.offsetX = GlobalVariables.widthToPixels(radiusInPixels * 1.2 * this.hoverOffsetX * this.parentMolecule.radius * GlobalVariables.pixelsToWidth((radiusInPixels*3)/cursorDistance))  \r\n        this.offsetY = GlobalVariables.heightToPixels( radiusInPixels* 2.1 * this.hoverOffsetY * this.parentMolecule.radius* GlobalVariables.pixelsToHeight((radiusInPixels*3)/cursorDistance))\r\n    \r\n\r\n    }\r\n    \r\n    /**\r\n     * Just passes a key press to the attached connectors. No impact on the connector.\r\n     * @param {string} key - The key which was pressed\r\n     */ \r\n    keyPress(key){\r\n        this.connectors.forEach(connector => {\r\n            connector.keyPress(key)       \r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Delete any connectors attached to this ap\r\n     */ \r\n    deleteSelf(silent = false){\r\n        //remove any connectors which were attached to this attachment point\r\n        var connectorsList = [...this.connectors] //Make a copy of the list so that we can delete elements without having issues with forEach as we remove things from the list\r\n        connectorsList.forEach( connector => {\r\n            connector.deleteSelf(silent)\r\n        })\r\n    }\r\n    \r\n    /**\r\n     * Delete a target connector which is passed in. The default option is to delete all of the connectors.\r\n     */ \r\n    deleteConnector(connector = \"all\"){\r\n        try{\r\n            const connectorIndex = this.connectors.indexOf(connector)\r\n            if(connectorIndex != -1){\r\n                this.connectors.splice(connectorIndex,1) //Remove the target connector\r\n            }\r\n            else{\r\n                this.connectors = [] //Remove all of the connectors\r\n            }\r\n        }\r\n        catch(err){\r\n            console.warn(\"Error deleting connector: \")\r\n            console.warn(err)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Can be called to see if the target coordinates are within this ap. Returns true/false.\r\n     * @param {number} x - The x coordinate of the target\r\n     * @param {number} y - The y coordinate of the target\r\n     */ \r\n    wasConnectionMade(x,y){\r\n        \r\n        let xInPixels = GlobalVariables.widthToPixels(this.x)\r\n        let yInPixels = GlobalVariables.heightToPixels(this.y)\r\n        let radiusInPixels = GlobalVariables.widthToPixels(this.radius)\r\n\r\n        //this function returns itself if the coordinates passed in are within itself\r\n        if (GlobalVariables.distBetweenPoints(xInPixels, x, yInPixels, y) < radiusInPixels && this.type == 'input'){  //If we have released the mouse here and this is an input...\r\n        \r\n            if(this.connectors.length > 0){ //Don't accept a second connection to an input\r\n                return false\r\n            }\r\n            else{\r\n                return true\r\n            }\r\n        }\r\n        else{\r\n            return false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Attaches a new connector to this ap\r\n     * @param {object} connector - The connector to attach\r\n     */ \r\n    attach(connector){\r\n        this.connectors.push(connector)\r\n    }\r\n    \r\n    /**\r\n     * Starts propagation from this attachmentPoint if it is not waiting for anything up stream.\r\n     */ \r\n    beginPropagation(){\r\n        \r\n        //If nothing is connected it is a starting point\r\n        if(this.connectors.length == 0){\r\n            this.setValue(this.value)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Passes a lock command to the parent molecule, or to the attached connector depending on input/output.\r\n     */ \r\n    waitOnComingInformation(){\r\n        if(this.type == 'output'){\r\n            this.connectors.forEach(connector => {\r\n                connector.waitOnComingInformation()\r\n            })\r\n        }\r\n        else{  //If this is an input\r\n            this.ready = false\r\n            this.parentMolecule.waitOnComingInformation(this.name)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Restores the ap to it's default value.\r\n     */ \r\n    setDefault(){\r\n        this.setValue(this.defaultValue)\r\n    }\r\n    \r\n    /**\r\n     * Updates the default value for the ap.\r\n     */ \r\n    updateDefault(newDefault){\r\n        var oldDefault = this.defaultValue\r\n        this.defaultValue = newDefault\r\n        \r\n        if(this.connectors.length == 0 && this.value == oldDefault){    //Update the value to be the default if there is nothing attached\r\n            this.value = this.defaultValue\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Reads and returns the current value of the ap.\r\n     */ \r\n    getValue(){\r\n        return this.value\r\n    }\r\n    \r\n    /**\r\n     * Sets the current value of the ap. Force forces an update even if the value hasn't changed.\r\n     */ \r\n    setValue(newValue){\r\n        this.value = newValue\r\n        this.ready = true\r\n        //propagate the change to linked elements if this is an output\r\n        if (this.type == 'output'){\r\n            this.connectors.forEach(connector => {     //select any connectors attached to this node\r\n                connector.propogate()\r\n            })\r\n        }\r\n        //if this is an input attachment point\r\n        else{\r\n            this.parentMolecule.updateValue(this.name)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms.\r\n     */ \r\n    loadTree(){\r\n        this.connectors.forEach(connector => {\r\n            this.value = connector.loadTree()\r\n        })\r\n        return this.value\r\n    }\r\n    \r\n    /**\r\n     * Computes the curent position and then draws the ap on the screen.\r\n     */ \r\n    update() { \r\n        this.x = this.parentMolecule.x + this.offsetX\r\n        this.y = this.parentMolecule.y + this.offsetY\r\n        this.draw()\r\n       \r\n        this.connectors.forEach(connector => {  //update any connectors attached to this node\r\n            connector.update()       \r\n        })\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/attachmentpoint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 737,
    "kind": "class",
    "name": "AttachmentPoint",
    "memberof": "src/js/prototypes/attachmentpoint.js",
    "static": true,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/attachmentpoint.js",
    "importStyle": "AttachmentPoint",
    "description": "This class creates a new attachmentPoint which are the input and output blobs on Atoms",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 738,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 739,
    "kind": "member",
    "name": "defaultRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultRadius",
    "access": "public",
    "description": "This atom's default radius (non hover)",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 740,
    "kind": "member",
    "name": "expandedRadius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#expandedRadius",
    "access": "public",
    "description": "A flag to indicate if this attachment point is currently expanded.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 741,
    "kind": "member",
    "name": "radius",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#radius",
    "access": "public",
    "description": "This atom's current radius as displayed.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 742,
    "kind": "member",
    "name": "hoverOffsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverOffsetX",
    "access": "public",
    "description": "When the mouse is hovering where should the AP move in X",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 743,
    "kind": "member",
    "name": "hoverOffsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#hoverOffsetY",
    "access": "public",
    "description": "When the mouse is hovering where should the AP move in Y",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "x",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#x",
    "access": "public",
    "description": "The attachment points X position",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 745,
    "kind": "member",
    "name": "y",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#y",
    "access": "public",
    "description": "The attachment point's Y position",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 746,
    "kind": "member",
    "name": "uniqueID",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#uniqueID",
    "access": "public",
    "description": "A unique identifying number for this attachment point",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 747,
    "kind": "member",
    "name": "defaultOffsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultOffsetX",
    "access": "public",
    "description": "The default offset position in X referenced to the center of the parent atom.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 748,
    "kind": "member",
    "name": "defaultOffsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultOffsetY",
    "access": "public",
    "description": "The default offset position in Y referenced to the center of the parent atom.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 749,
    "kind": "member",
    "name": "offsetX",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#offsetX",
    "access": "public",
    "description": "The current offset position in X referenced to the center of the parent atom.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 750,
    "kind": "member",
    "name": "offsetY",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#offsetY",
    "access": "public",
    "description": "The current offset position in Y referenced to the center of the parent atom.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 751,
    "kind": "member",
    "name": "showHoverText",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#showHoverText",
    "access": "public",
    "description": "A flag to determine if the hover text is shown next to the attachment point.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 752,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#atomType",
    "access": "public",
    "description": "The attachment point type.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 753,
    "kind": "member",
    "name": "valueType",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#valueType",
    "access": "public",
    "description": "The attachment point value type. Options are number, geometry, array.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 754,
    "kind": "member",
    "name": "type",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#type",
    "access": "public",
    "description": "The attachment point type. Options are input, output.",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 755,
    "kind": "member",
    "name": "primary",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#primary",
    "access": "public",
    "description": "This is a flag to indicate if the attachment point is of the primary type.\nPrimary type inputs are of the form geometry.translate(input2, input3, input4) for example\nThis value is useful for importing molecules into other formats. I don't know if this is used any more. Maybe it can be deleted.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 756,
    "kind": "member",
    "name": "value",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#value",
    "access": "public",
    "description": "The attachment point current value.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 757,
    "kind": "member",
    "name": "defaultValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#defaultValue",
    "access": "public",
    "description": "The default value to be used by the ap when nothing is attached",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "ready",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#ready",
    "access": "public",
    "description": "A flag to indicate if the attachment point is currently ready. Used to order initilization when program is loaded.",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 759,
    "kind": "member",
    "name": "connectors",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#connectors",
    "access": "public",
    "description": "A list of all of the connectors attached to this attachment point",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 762,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#[key]",
    "access": "public",
    "description": "Assign values in values as this.x",
    "lineNumber": 134,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#draw",
    "access": "public",
    "description": "Draws the attachment point on the screen. Called with each frame.",
    "lineNumber": 142,
    "params": [],
    "return": null
  },
  {
    "__docId__": 767,
    "kind": "method",
    "name": "clickDown",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickDown",
    "access": "public",
    "description": "Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "clickProcessed",
        "description": "Has the click already been handled"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickUp",
    "access": "public",
    "description": "Handles mouse click up. If the click is inside the AP and a connector is currently extending, then a connection is made",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 769,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#clickMove",
    "access": "public",
    "description": "Handles mouse click and move to expand the AP. Could this be done with a call to expand out?",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "reset",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#reset",
    "access": "public",
    "description": "I'm not sure what this does. Can it be deleted?",
    "lineNumber": 352,
    "params": [],
    "return": null
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "expandOut",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#expandOut",
    "access": "public",
    "description": "Handles mouse click down. If the click is inside the AP it's connectors are selected if it is an input.",
    "lineNumber": 365,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "cursorDistance",
        "description": "The distance the cursor is from the attachment point."
      }
    ],
    "return": null
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#keyPress",
    "access": "public",
    "description": "Just passes a key press to the attached connectors. No impact on the connector.",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which was pressed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#deleteSelf",
    "access": "public",
    "description": "Delete any connectors attached to this ap",
    "lineNumber": 397,
    "params": [
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "deleteConnector",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#deleteConnector",
    "access": "public",
    "description": "Delete a target connector which is passed in. The default option is to delete all of the connectors.",
    "lineNumber": 408,
    "params": [
      {
        "name": "connector",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "all",
        "defaultValue": "all"
      }
    ],
    "return": null
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "wasConnectionMade",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#wasConnectionMade",
    "access": "public",
    "description": "Can be called to see if the target coordinates are within this ap. Returns true/false.",
    "lineNumber": 429,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x coordinate of the target"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y coordinate of the target"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "attach",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#attach",
    "access": "public",
    "description": "Attaches a new connector to this ap",
    "lineNumber": 454,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "connector",
        "description": "The connector to attach"
      }
    ],
    "return": null
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "beginPropagation",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#beginPropagation",
    "access": "public",
    "description": "Starts propagation from this attachmentPoint if it is not waiting for anything up stream.",
    "lineNumber": 461,
    "params": [],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#waitOnComingInformation",
    "access": "public",
    "description": "Passes a lock command to the parent molecule, or to the attached connector depending on input/output.",
    "lineNumber": 472,
    "params": [],
    "return": null
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "setDefault",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#setDefault",
    "access": "public",
    "description": "Restores the ap to it's default value.",
    "lineNumber": 487,
    "params": [],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "updateDefault",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#updateDefault",
    "access": "public",
    "description": "Updates the default value for the ap.",
    "lineNumber": 494,
    "params": [
      {
        "name": "newDefault",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "getValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#getValue",
    "access": "public",
    "description": "Reads and returns the current value of the ap.",
    "lineNumber": 506,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#setValue",
    "access": "public",
    "description": "Sets the current value of the ap. Force forces an update even if the value hasn't changed.",
    "lineNumber": 513,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms.",
    "lineNumber": 531,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 803,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/attachmentpoint.js~AttachmentPoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/attachmentpoint.js~AttachmentPoint#update",
    "access": "public",
    "description": "Computes the curent position and then draws the ap on the screen.",
    "lineNumber": 541,
    "params": [],
    "return": null
  },
  {
    "__docId__": 806,
    "kind": "file",
    "name": "src/js/prototypes/connector.js",
    "content": "import GlobalVariables from '../globalvariables'\r\n\r\n/**\r\n * The connector class defines how an output can be connected to an input. It appears on the screen as a black line extending from an output to an input.\r\n */\r\nexport default class Connector {\r\n    \r\n    /**\r\n     * The constructor function.\r\n     * @param {object} values An array of values passed in which will be assigned to the class as this.x\r\n     */ \r\n    constructor(values){\r\n        \r\n        /** \r\n         * True if the connector is currently being created and is in the process of extending\r\n         * @type {boolean}\r\n         */\r\n        this.isMoving = false\r\n        /** \r\n         * The connectors current color\r\n         * @type {string}\r\n         */\r\n        this.color = 'black'\r\n        /** \r\n         * The type of this connector\r\n         * @type {string}\r\n         */\r\n        this.atomType = 'Connector'\r\n        /** \r\n         * True if this connector has been selected\r\n         * @type {boolean}\r\n         */\r\n        this.selected = false\r\n        /** \r\n         * The first attachment point this connector is connected to (an ouput)\r\n         * @type {object}\r\n         */\r\n        this.attachmentPoint1 = null\r\n        /** \r\n         * The second attachment point this connector is connected to (an input)\r\n         * @type {object}\r\n         */\r\n        this.attachmentPoint2 = null\r\n        \r\n        for(var key in values) {\r\n            /**\r\n             * Assign each of the values in values as this.key\r\n             */\r\n            this[key] = values[key]\r\n        }\r\n        \r\n        /** \r\n         * The starting X cordinate for the connector. Should really be referenced to attachmentPoint1.\r\n         * @type {number}\r\n         */\r\n        this.startX = this.attachmentPoint1.parentMolecule.outputX\r\n        /** \r\n         * The starting Y cordinate for the connector. Should really be referenced to attachmentPoint1.\r\n         * @type {number}\r\n         */\r\n        this.startY = this.attachmentPoint1.parentMolecule.y\r\n        \r\n        \r\n        this.attachmentPoint1.connectors.push(this)   //Give input and output references to the connector\r\n        if(this.attachmentPoint2 != null){\r\n            this.attachmentPoint2.connectors.push(this)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Draw the connector as a bezier curve on the screen\r\n     */ \r\n    draw(){\r\n        let startXInPixels = GlobalVariables.widthToPixels(this.startX)\r\n        let startYInPixels = GlobalVariables.heightToPixels(this.startY)\r\n        let endXInPixels = GlobalVariables.widthToPixels(this.endX)\r\n        let endYInPixels = GlobalVariables.heightToPixels(this.endY)\r\n\r\n        GlobalVariables.c.beginPath()\r\n        GlobalVariables.c.fillStyle = this.color\r\n        GlobalVariables.c.strokeStyle = this.color\r\n        GlobalVariables.c.globalCompositeOperation = 'destination-over' //draw under other elements;\r\n        if(this.selected){\r\n            GlobalVariables.c.lineWidth = 3\r\n        }\r\n        else{\r\n            GlobalVariables.c.lineWidth = 1\r\n        }\r\n        GlobalVariables.c.moveTo(startXInPixels, startYInPixels)\r\n        GlobalVariables.c.bezierCurveTo(startXInPixels + 100, startYInPixels, endXInPixels - 100, endYInPixels, endXInPixels, endYInPixels)\r\n        GlobalVariables.c.stroke()\r\n        GlobalVariables.c.globalCompositeOperation = 'source-over' //switch back to drawing on top\r\n    }\r\n    \r\n    /**\r\n     * clickUp checks to see if the mouse button has been released over an input attachment point. If it has then the connector is created there. If not, then the connector is deleted.\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    clickUp(x,y){\r\n        if(this.isMoving){  //we only want to attach the connector which is currently moving\r\n            var attachmentMade = false\r\n            GlobalVariables.currentMolecule.nodesOnTheScreen.forEach(molecule => {                      //For every molecule on the screen  \r\n                molecule.inputs.forEach(attachmentPoint => {                                    //For each of their attachment points\r\n                    if(attachmentPoint.wasConnectionMade(x,y) && !attachmentMade){    //Check to make sure we haven't already attached somewhere else\r\n                        attachmentMade = true\r\n                        this.attachmentPoint2 = attachmentPoint\r\n                        attachmentPoint.attach(this)\r\n                        this.propogate()\r\n                    }\r\n                })\r\n            })\r\n            if (!attachmentMade){\r\n                this.deleteSelf()\r\n            }\r\n            this.isMoving = false\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * clickMove runs while the connector is being created. As long as the mouse is pressed down, the end of the connector stays attached to the mouse.\r\n     * @param {number} x - The x cordinate of the click\r\n     * @param {number} y - The y cordinate of the click\r\n     */ \r\n    clickMove(x,y){\r\n        if (this.isMoving == true){\r\n            /**\r\n             * The s cordinate of the end of the connector.\r\n             */\r\n            this.endX = GlobalVariables.pixelsToWidth(x)\r\n            /**\r\n             * The y cordinate of the end of the connector.\r\n             */\r\n            this.endY = GlobalVariables.pixelsToHeight(y)\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Called when any key is pressed. If the key is delete or backspace and the connector is selected then the connector is deleted.\r\n     * @param {string} key - The key which was pressed\r\n     */ \r\n    keyPress(key){\r\n        if(this.selected){\r\n            if (['Delete', 'Backspace'].includes(key)){\r\n                this.deleteSelf()\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Deletes the connector by calling its attachmentPoints to tell them to delete their references to this connector.\r\n     */ \r\n    deleteSelf(silent = false){\r\n        //Remove this connector from the output it is attached to\r\n        this.attachmentPoint1.deleteConnector(this)\r\n        \r\n        //Free up the input to which this was attached\r\n        if(this.attachmentPoint2 != null){\r\n            this.attachmentPoint2.deleteConnector(this)\r\n            if(!silent){\r\n                this.attachmentPoint2.setDefault()\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Generates an object used to save the connector.\r\n     */ \r\n    serialize(){\r\n        if ( this.attachmentPoint2 != null){\r\n            var object = {\r\n                ap1Name: this.attachmentPoint1.name,\r\n                ap2Name: this.attachmentPoint2.name,\r\n                ap2Primary: this.attachmentPoint2.primary,\r\n                ap1ID: this.attachmentPoint1.parentMolecule.uniqueID,\r\n                ap2ID: this.attachmentPoint2.parentMolecule.uniqueID\r\n            }\r\n            return object\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Passes a lock call to the connected input.\r\n     */ \r\n    waitOnComingInformation(){\r\n        this.attachmentPoint2.waitOnComingInformation()\r\n    }\r\n    \r\n    /**\r\n     * Pass the value of the attached output to the attached input\r\n     */ \r\n    propogate(){\r\n        //takes the input and passes it to the output\r\n        if(this.attachmentPoint1.ready){\r\n            this.attachmentPoint2.setValue(this.attachmentPoint1.getValue())\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Used to walk back out the tree generating a list of constants...used for evolve\r\n     */ \r\n    walkBackForConstants(callback){\r\n        this.attachmentPoint1.parentMolecule.walkBackForConstants(callback)\r\n    }\r\n    \r\n    /**\r\n     * Sets all the input and output values to match their associated atoms.\r\n     */ \r\n    loadTree(){\r\n        return this.attachmentPoint1.parentMolecule.loadTree()\r\n    }\r\n    \r\n    /**\r\n     * Computes the connectors position and draw it to the screen.\r\n     */ \r\n    update() {\r\n        this.startX = this.attachmentPoint1.x\r\n        this.startY = this.attachmentPoint1.y\r\n        if (this.attachmentPoint2){  //check to see if the attachment point is defined\r\n            this.endX = this.attachmentPoint2.x\r\n            this.endY = this.attachmentPoint2.y\r\n        }\r\n        this.draw()\r\n    }\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/js/prototypes/connector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 807,
    "kind": "class",
    "name": "Connector",
    "memberof": "src/js/prototypes/connector.js",
    "static": true,
    "longname": "src/js/prototypes/connector.js~Connector",
    "access": "public",
    "export": true,
    "importPath": "canvas-template/src/js/prototypes/connector.js",
    "importStyle": "Connector",
    "description": "The connector class defines how an output can be connected to an input. It appears on the screen as a black line extending from an output to an input.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 808,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#constructor",
    "access": "public",
    "description": "The constructor function.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "An array of values passed in which will be assigned to the class as this.x"
      }
    ]
  },
  {
    "__docId__": 809,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#isMoving",
    "access": "public",
    "description": "True if the connector is currently being created and is in the process of extending",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 810,
    "kind": "member",
    "name": "color",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#color",
    "access": "public",
    "description": "The connectors current color",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 811,
    "kind": "member",
    "name": "atomType",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#atomType",
    "access": "public",
    "description": "The type of this connector",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 812,
    "kind": "member",
    "name": "selected",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#selected",
    "access": "public",
    "description": "True if this connector has been selected",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 813,
    "kind": "member",
    "name": "attachmentPoint1",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#attachmentPoint1",
    "access": "public",
    "description": "The first attachment point this connector is connected to (an ouput)",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 814,
    "kind": "member",
    "name": "attachmentPoint2",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#attachmentPoint2",
    "access": "public",
    "description": "The second attachment point this connector is connected to (an input)",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 815,
    "kind": "member",
    "name": "[key]",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#[key]",
    "access": "public",
    "description": "Assign each of the values in values as this.key",
    "lineNumber": 49,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 816,
    "kind": "member",
    "name": "startX",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#startX",
    "access": "public",
    "description": "The starting X cordinate for the connector. Should really be referenced to attachmentPoint1.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 817,
    "kind": "member",
    "name": "startY",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#startY",
    "access": "public",
    "description": "The starting Y cordinate for the connector. Should really be referenced to attachmentPoint1.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "draw",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#draw",
    "access": "public",
    "description": "Draw the connector as a bezier curve on the screen",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "clickUp",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#clickUp",
    "access": "public",
    "description": "clickUp checks to see if the mouse button has been released over an input attachment point. If it has then the connector is created there. If not, then the connector is deleted.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "clickMove",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#clickMove",
    "access": "public",
    "description": "clickMove runs while the connector is being created. As long as the mouse is pressed down, the end of the connector stays attached to the mouse.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The x cordinate of the click"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The y cordinate of the click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 823,
    "kind": "member",
    "name": "endX",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#endX",
    "access": "public",
    "description": "The s cordinate of the end of the connector.",
    "lineNumber": 130,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 824,
    "kind": "member",
    "name": "endY",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#endY",
    "access": "public",
    "description": "The y cordinate of the end of the connector.",
    "lineNumber": 134,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "keyPress",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#keyPress",
    "access": "public",
    "description": "Called when any key is pressed. If the key is delete or backspace and the connector is selected then the connector is deleted.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "The key which was pressed"
      }
    ],
    "return": null
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "deleteSelf",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#deleteSelf",
    "access": "public",
    "description": "Deletes the connector by calling its attachmentPoints to tell them to delete their references to this connector.",
    "lineNumber": 153,
    "params": [
      {
        "name": "silent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "serialize",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#serialize",
    "access": "public",
    "description": "Generates an object used to save the connector.",
    "lineNumber": 169,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "waitOnComingInformation",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#waitOnComingInformation",
    "access": "public",
    "description": "Passes a lock call to the connected input.",
    "lineNumber": 185,
    "params": [],
    "return": null
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "propogate",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#propogate",
    "access": "public",
    "description": "Pass the value of the attached output to the attached input",
    "lineNumber": 192,
    "params": [],
    "return": null
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "walkBackForConstants",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#walkBackForConstants",
    "access": "public",
    "description": "Used to walk back out the tree generating a list of constants...used for evolve",
    "lineNumber": 202,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "loadTree",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#loadTree",
    "access": "public",
    "description": "Sets all the input and output values to match their associated atoms.",
    "lineNumber": 209,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "update",
    "memberof": "src/js/prototypes/connector.js~Connector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/js/prototypes/connector.js~Connector#update",
    "access": "public",
    "description": "Computes the connectors position and draw it to the screen.",
    "lineNumber": 216,
    "params": [],
    "return": null
  },
  {
    "__docId__": 837,
    "kind": "file",
    "name": "src/utils.js",
    "content": "/**\r\n * Returns a random integer within a range.\r\n * @param {number} min - The minimum possible value.\r\n * @param {number} max - The maximum possible value.\r\n */ \r\nfunction randomIntFromRange(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\n/**\r\n * Selects a random color from an array. Where is this used? Can this be deleted?\r\n * @param {array} colors - An array of possible colors.\r\n */ \r\nfunction randomColor(colors) {\r\n    return colors[Math.floor(Math.random() * colors.length)]\r\n}\r\n\r\n/**\r\n * Compute the distance between two points on a plane.\r\n * @param {number} x1 - The x cordinate of the first point.\r\n * @param {number} y1 - The y cordinate of the first point.\r\n * @param {number} x2 - The x cordinate of the second point.\r\n * @param {number} y2 - The y cordinate of the second point.\r\n */ \r\nfunction distance(x1, y1, x2, y2) {\r\n    const xDist = x2 - x1\r\n    const yDist = y2 - y1\r\n\r\n    return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\r\n}\r\n\r\nmodule.exports = { randomIntFromRange, randomColor, distance }\r\n",
    "static": true,
    "longname": "C:/Users/Bar/Documents/GitHub/Maslow-Create/src/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 838,
    "kind": "function",
    "name": "randomIntFromRange",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~randomIntFromRange",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": "Returns a random integer within a range.",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "The minimum possible value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "The maximum possible value."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 839,
    "kind": "function",
    "name": "randomColor",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~randomColor",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": "Selects a random color from an array. Where is this used? Can this be deleted?",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": "An array of possible colors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 840,
    "kind": "function",
    "name": "distance",
    "memberof": "src/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils.js~distance",
    "access": "public",
    "export": false,
    "importPath": "canvas-template/src/utils.js",
    "importStyle": null,
    "description": "Compute the distance between two points on a plane.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "The x cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "The y cordinate of the first point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "The x cordinate of the second point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "The y cordinate of the second point."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "kind": "index",
    "content": "# A web based CAD program for cooperative design.\r\n\r\n[![Build Status](https://travis-ci.org/MaslowCNC/Maslow-Create.svg?branch=master)](https://travis-ci.org/MaslowCNC/Maslow-Create)\r\n[![Documentation](https://maslowcreate.org/documentation/badge.svg)](https://maslowcreate.org/documentation/)\r\n[![Coverage Status](https://coveralls.io/repos/github/MaslowCNC/Maslow-Create/badge.svg?branch=master)](https://coveralls.io/github/MaslowCNC/Maslow-Create?branch=master)\r\n\r\n\r\n![overview](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/MaslowCreate.png)\r\n\r\nMaslow create breaks with the tradition of CAD programs which inherit from drawing programs and instead inherits from logical languages like programing. This allows it to be a CAD program which has language like features such as importing modules, version control, and colaboration.\r\n\r\n# Use\r\n\r\nA 3D model within Maslow Create is composed of interconnected nodes called Atoms and Molecules. An atom is an operation you can perform on a shape (ie translate it in space). A molecule can contain any number of atoms in a configuration (ie generate a table leg). Think of Atoms as the built in functions of a programing language and molecules as the functions you create.\r\n\r\nYou can place a new atom by right clicking anywhere within the flow canvas area and entering an atom name in the search bar.\r\n\r\nCurrently Maslow Create supports the folowing atoms:\r\n\r\n### Assembly \r\n\r\nThe assembly atom allows multiple shapes to be combigned into one unit called an assembly. The order in which atoms are combigned matters because where shapes intersect shapes earlier in the order subtract from shapes later in the order. For example if you have a bolt which needs to create a hole in a part you should assemble first the part and then the bolt.\r\n\r\n![assembly](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Assembly.PNG)\r\n\r\n### Add BOM Tag\r\n\r\nThe Add BOM Tag atom tags a part with a bill of materials item. This item will appear in the project bill of materials one time each time the tagged part appears in the final shape. For example if you have a table leg which needs four bolts, and the final model has four table legs the bolt will automatically appear in the final bill of materials 16 times.\r\n\r\n{picture of tag}\r\n{picture of BOM file}\r\n\r\n### Circle\r\n\r\nThe circle atom creates a circle shape. Circle shapes are commonly extruded to create cylinders.\r\n\r\n![circle](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Circle.PNG)\r\n\r\n### Code\r\n\r\nThe code atom allows you to enter arbitrary [jsxcad](https://jsxcad.js.org/) code. Please note that parts of this interface are likely to change in the near future.\r\n\r\n### Constant\r\n\r\nThe constant atom defines a constant number which can be used to control multiple inputs.\r\n\r\n{picture of constant controling multiple inputs}\r\n\r\n### Difference\r\n\r\nThe difference atom subtracts one shape from another.\r\n\r\n![difference](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Difference.PNG)\r\n\r\n### Equation \r\n\r\nThe equation Atom lets you perform basic math operations on numbers produced by constants.\r\n\r\n{Show equation doing something}\r\n\r\n### Extrude \r\n\r\nThe extrude atom takes a 2D shape and makes it 3D.\r\n\r\n![extrude](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Extrude.PNG)\r\n\r\n### Gcode\r\n\r\nThe gcode atom generates gcode to cut the input shape.\r\n\r\n![Gcode1](https://github.com/BarbourSmith/Maslow-Create/blob/master/images/Gcode1.PNG)\r\n![Gcode2](https://github.com/BarbourSmith/Maslow-Create/blob/master/images/Gcode2.PNG)\r\n\r\n### GitHub\r\n\r\nThe GitHub atom type is not directly available. By clicking on the GitHub tab when placing a new Atom you can search for and add any other Maslow Create project to your project.\r\n\r\n### Input\r\n\r\nThe input atom lets you define which variables are inputs to your program. They function similar to constants, however when you share your project, the person on the other end will have the ability to change the values of the inputs. Inputs placed within a molecule will add inputs to that molecule up one level.\r\n\r\n{picture of project being shared}\r\n\r\n### Intersection\r\n\r\nThe intersection atom computes the area of intersection of two shapes and creates a new shape out of that area.\r\n\r\n{picture of intersection}\r\n\r\n### Molecule\r\n\r\nThe molecule atom can contain any number of atoms in a useful configuration. To add inputs to the molecule, place an input atom within it.\r\n\r\n{picture of molecule}\r\n\r\n### Output\r\n\r\nThe output atom cannot be directly placed, however each molecule has one output which cannot be delted. Connect a shape to the output of a molecule to make that shape available one level up. The output of the top level molecule is the output of the project.\r\n\r\n![output](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/Output.PNG)\r\n\r\n### README\r\n\r\nThe README atom provides notes to the next person reading the project. The text of the readme input is added to the readme page of the project (similar to this page you are reading now).\r\n\r\n{Show readme atom}\r\n\r\n### Rectangle\r\n\r\nThe rectangle atom creates a rectangle shape. Rectangles are commonly extruded to make a 3D shape.\r\n\r\n{show picture of rectangle}\r\n\r\n### Regular Polygon\r\n\r\nThe regular polygon atom creates a regular polygon shape. Regular polygons are regularly extruded to create a 3D shape.\r\n\r\n![regular polygon](https://raw.githubusercontent.com/BarbourSmith/Maslow-Create/master/images/RegularPolygon.PNG)\r\n\r\n### Rotate\r\n\r\nThe rotate atom rotates a shape along any of it's three axis.\r\n\r\n{picture of rotate}\r\n\r\n### Scale\r\n\r\nThe scale atom scales a shape evenly in all directions.\r\n\r\n{picture of scale}\r\n\r\n### Shrinkwrap\r\n\r\nThe shrinkwrap atom combines multiple shapes into a single shape as if they had been shrinkwrapped. This is useful for creating shapes which would be dificult to create in other ways.\r\n\r\n{picture of shrinkwrap}\r\n\r\n### Stretch\r\n\r\nThe stretch atom stretches a shape along any of its axis.\r\n\r\n{picture of stretch}\r\n\r\n### Tag\r\n\r\nThe tag atom adds a tag to a part which can be later used to retrieve that part from an assembly.\r\n\r\n### Translate\r\n\r\nThe translate atom moves a 3D shape in 3D space or a 2D shape in 2D space.\r\n\r\n{picture of translate}\r\n\r\n### Union\r\n\r\nThe union atom combines multiple shapes into a single shape.\r\n\r\n{picture of union}\r\n\r\n\r\n# Development\r\n\r\nYou can read the complete documentation at [https://maslowcreate.org/documentation/](https://maslowcreate.org/documentation/)\r\n\r\n## How To Setup\r\n\r\n1.  Clone the repo:\r\n\r\n        git clone https://github.com/BarbourSmith/Maslow-Create.git\r\n\r\n2.  Install dependencies:\r\n\r\n        npm install\r\n\r\n3.  Run webpack:\r\n\r\n        npm start\r\n\r\nYour canvas piece should open up automatically at http://localhost:3000 and you should see 'HTML CANVAS BOILERPLATE' on hover.\r\n\r\n## Layout of the program\r\n\r\nMaslow Create has three main areas of the interface. Along the top of the screen is the logical flow of the design. In the lower left is a 3D rendering of the design, and in the lower right is the side bar which displays information related to the currently selected atom. If no atom is selected, then information about the open molecule is displayed.\r\n\r\nThe logical flow of the design is composed of nodes called Atoms which are connected by connectors. Each atom has a number of attachment points where connectors can connect. Each atom type inherits from the atom class which is defined in the file `/dist/js/molecules/prototypes.js`. Each atom type then has it's own file which modifies the behavior of the default atom class.\r\n\r\nThe lower left 3D rendring is an instance of the JSCAD project. It is currently a hacked version of 1.x while waiting for version 2 to be released. Right now the generated code is done through string manipulation. In version 2 we will pass actual JS objects to functions.\r\n\r\nThe lower right corner of the screen is called the \"Side Bar\" It contains information about the currently selected atom. It is populated by that atom's \"Generate Sidebar\" function.\r\n",
    "longname": "C:\\Users\\Bar\\Documents\\GitHub\\Maslow-Create\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"canvas-template\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"webpack.config.js\",\r\n  \"scripts\": {\r\n    \"start\": \"webpack --config webpack.config.js\",\r\n    \"build\": \"webpack --config webpack-build.config.js\",\r\n    \"test\": \"nyc --reporter=html --reporter=text mocha -r jsdom-global/register -r esm\",\r\n    \"lint\": \"eslint --ignore-path .eslintignore .\",\r\n    \"doc\": \"./node_modules/.bin/esdoc\",\r\n    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"@octokit/rest\": \"^18.10.0\",\r\n    \"codemirror\": \"^5.58.2\",\r\n    \"coveralls\": \"^3.0.4\",\r\n    \"esm\": \"^3.2.22\",\r\n    \"gsap\": \"^3.6.0\",\r\n    \"mathjs\": \"^7.5.1\",\r\n    \"mocha\": \"^6.1.4\",\r\n    \"nyc\": \"^14.1.1\",\r\n    \"oauthio-web\": \"^0.6.2\",\r\n    \"showdown\": \"^1.9.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/plugin-transform-regenerator\": \"^7.4.3\",\r\n    \"babel-core\": \"^6.26.3\",\r\n    \"babel-loader\": \"^7.1.5\",\r\n    \"babel-polyfill\": \"^6.26.0\",\r\n    \"babel-preset-env\": \"^1.7.0\",\r\n    \"babel-preset-es2015\": \"^6.24.1\",\r\n    \"babel-preset-stage-0\": \"^6.24.1\",\r\n    \"browser-sync\": \"^2.24.4\",\r\n    \"browser-sync-webpack-plugin\": \"^2.2.2\",\r\n    \"chai\": \"^4.2.0\",\r\n    \"copy-webpack-plugin\": \"^5.0.1\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^5.16.0\",\r\n    \"eslint-config-strongloop\": \"^2.1.0\",\r\n    \"html-webpack-plugin\": \"^3.2.0\",\r\n    \"jsdom\": \"^15.1.1\",\r\n    \"jsdom-global\": \"3.0.2\",\r\n    \"prettier\": \"^1.13.5\",\r\n    \"webpack\": \"^4.12.0\",\r\n    \"webpack-cli\": \"^3.0.7\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\Bar\\Documents\\GitHub\\Maslow-Create\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]